// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlclient

import (
	"fmt"
	"io"
	"strconv"
)

type Account struct {
	BackgroundColor    *string          `json:"backgroundColor,omitempty"`
	BillingCustomerID  *string          `json:"billingCustomerId,omitempty"`
	DomainMappings     []*DomainMapping `json:"domainMappings,omitempty"`
	Icon               *string          `json:"icon,omitempty"`
	ID                 string           `json:"id"`
	InsertedAt         *string          `json:"insertedAt,omitempty"`
	Name               *string          `json:"name,omitempty"`
	RootUser           *User            `json:"rootUser,omitempty"`
	UpdatedAt          *string          `json:"updatedAt,omitempty"`
	WorkosConnectionID *string          `json:"workosConnectionId,omitempty"`
}

type AccountAttributes struct {
	DomainMappings []*DomainMappingInput `json:"domainMappings,omitempty"`
	Icon           *string               `json:"icon,omitempty"`
	Name           *string               `json:"name,omitempty"`
}

type ActionItem struct {
	Link string         `json:"link"`
	Type ActionItemType `json:"type"`
}

type ActionItemAttributes struct {
	Link string         `json:"link"`
	Type ActionItemType `json:"type"`
}

type Address struct {
	City    *string `json:"city,omitempty"`
	Country *string `json:"country,omitempty"`
	Line1   *string `json:"line1,omitempty"`
	Line2   *string `json:"line2,omitempty"`
	State   *string `json:"state,omitempty"`
	Zip     *string `json:"zip,omitempty"`
}

type AddressAttributes struct {
	City    string `json:"city"`
	Country string `json:"country"`
	Line1   string `json:"line1"`
	Line2   string `json:"line2"`
	State   string `json:"state"`
	Zip     string `json:"zip"`
}

type ApplyLock struct {
	ID         string      `json:"id"`
	InsertedAt *string     `json:"insertedAt,omitempty"`
	Lock       *string     `json:"lock,omitempty"`
	Owner      *User       `json:"owner,omitempty"`
	Repository *Repository `json:"repository,omitempty"`
	UpdatedAt  *string     `json:"updatedAt,omitempty"`
}

type Artifact struct {
	Arch       *string           `json:"arch,omitempty"`
	Blob       *string           `json:"blob,omitempty"`
	Filesize   *int64            `json:"filesize,omitempty"`
	ID         *string           `json:"id,omitempty"`
	InsertedAt *string           `json:"insertedAt,omitempty"`
	Name       *string           `json:"name,omitempty"`
	Platform   *ArtifactPlatform `json:"platform,omitempty"`
	Readme     *string           `json:"readme,omitempty"`
	Sha        *string           `json:"sha,omitempty"`
	Type       *ArtifactType     `json:"type,omitempty"`
	UpdatedAt  *string           `json:"updatedAt,omitempty"`
}

type ArtifactAttributes struct {
	Arch     *string `json:"arch,omitempty"`
	Blob     *string `json:"blob,omitempty"`
	Name     string  `json:"name"`
	Platform string  `json:"platform"`
	Readme   string  `json:"readme"`
	Type     string  `json:"type"`
}

type Audit struct {
	Action             string              `json:"action"`
	Actor              *User               `json:"actor,omitempty"`
	City               *string             `json:"city,omitempty"`
	Country            *string             `json:"country,omitempty"`
	Group              *Group              `json:"group,omitempty"`
	ID                 string              `json:"id"`
	Image              *DockerImage        `json:"image,omitempty"`
	InsertedAt         *string             `json:"insertedAt,omitempty"`
	IntegrationWebhook *IntegrationWebhook `json:"integrationWebhook,omitempty"`
	IP                 *string             `json:"ip,omitempty"`
	Latitude           *string             `json:"latitude,omitempty"`
	Longitude          *string             `json:"longitude,omitempty"`
	Repository         *Repository         `json:"repository,omitempty"`
	Role               *Role               `json:"role,omitempty"`
	UpdatedAt          *string             `json:"updatedAt,omitempty"`
	User               *User               `json:"user,omitempty"`
	Version            *Version            `json:"version,omitempty"`
}

type AuditConnection struct {
	Edges    []*AuditEdge `json:"edges,omitempty"`
	PageInfo PageInfo     `json:"pageInfo"`
}

type AuditEdge struct {
	Cursor *string `json:"cursor,omitempty"`
	Node   *Audit  `json:"node,omitempty"`
}

type AuthorizationURL struct {
	Provider ScmProvider `json:"provider"`
	URL      string      `json:"url"`
}

type AwsShellCredentialsAttributes struct {
	AccessKeyID     string `json:"accessKeyId"`
	SecretAccessKey string `json:"secretAccessKey"`
}

type BindingAttributes struct {
	GroupID *string `json:"groupId,omitempty"`
	ID      *string `json:"id,omitempty"`
	UserID  *string `json:"userId,omitempty"`
}

type Card struct {
	Brand    string  `json:"brand"`
	ExpMonth int64   `json:"expMonth"`
	ExpYear  int64   `json:"expYear"`
	ID       string  `json:"id"`
	Last4    string  `json:"last4"`
	Name     *string `json:"name,omitempty"`
}

type CardConnection struct {
	Edges    []*CardEdge `json:"edges,omitempty"`
	PageInfo PageInfo    `json:"pageInfo"`
}

type CardEdge struct {
	Cursor *string `json:"cursor,omitempty"`
	Node   *Card   `json:"node,omitempty"`
}

type CategoryInfo struct {
	Category *Category             `json:"category,omitempty"`
	Count    *int64                `json:"count,omitempty"`
	Tags     *GroupedTagConnection `json:"tags,omitempty"`
}

type ChangeInstructions struct {
	Instructions *string `json:"instructions,omitempty"`
	Script       *string `json:"script,omitempty"`
}

type Chart struct {
	Dependencies  *Dependencies      `json:"dependencies,omitempty"`
	Description   *string            `json:"description,omitempty"`
	ID            *string            `json:"id,omitempty"`
	InsertedAt    *string            `json:"insertedAt,omitempty"`
	Installation  *ChartInstallation `json:"installation,omitempty"`
	LatestVersion *string            `json:"latestVersion,omitempty"`
	Name          string             `json:"name"`
	Repository    *Repository        `json:"repository,omitempty"`
	Tags          []*VersionTag      `json:"tags,omitempty"`
	UpdatedAt     *string            `json:"updatedAt,omitempty"`
}

type ChartAttributes struct {
	Tags []*VersionTagAttributes `json:"tags,omitempty"`
}

type ChartConnection struct {
	Edges    []*ChartEdge `json:"edges,omitempty"`
	PageInfo PageInfo     `json:"pageInfo"`
}

type ChartEdge struct {
	Cursor *string `json:"cursor,omitempty"`
	Node   *Chart  `json:"node,omitempty"`
}

type ChartInstallation struct {
	Chart        *Chart        `json:"chart,omitempty"`
	ID           *string       `json:"id,omitempty"`
	InsertedAt   *string       `json:"insertedAt,omitempty"`
	Installation *Installation `json:"installation,omitempty"`
	UpdatedAt    *string       `json:"updatedAt,omitempty"`
	Version      *Version      `json:"version,omitempty"`
}

type ChartInstallationAttributes struct {
	ChartID   *string `json:"chartId,omitempty"`
	VersionID *string `json:"versionId,omitempty"`
}

type ChartInstallationConnection struct {
	Edges    []*ChartInstallationEdge `json:"edges,omitempty"`
	PageInfo PageInfo                 `json:"pageInfo"`
}

type ChartInstallationEdge struct {
	Cursor *string            `json:"cursor,omitempty"`
	Node   *ChartInstallation `json:"node,omitempty"`
}

type ChartName struct {
	Chart *string `json:"chart,omitempty"`
	Repo  *string `json:"repo,omitempty"`
}

type ClosureItem struct {
	Dep       *Dependency `json:"dep,omitempty"`
	Helm      *Chart      `json:"helm,omitempty"`
	Terraform *Terraform  `json:"terraform,omitempty"`
}

type CloudShell struct {
	AesKey     string       `json:"aesKey"`
	Alive      bool         `json:"alive"`
	Cluster    string       `json:"cluster"`
	GitURL     string       `json:"gitUrl"`
	ID         string       `json:"id"`
	InsertedAt *string      `json:"insertedAt,omitempty"`
	Provider   Provider     `json:"provider"`
	Status     *ShellStatus `json:"status,omitempty"`
	Subdomain  string       `json:"subdomain"`
	UpdatedAt  *string      `json:"updatedAt,omitempty"`
}

type CloudShellAttributes struct {
	Credentials ShellCredentialsAttributes `json:"credentials"`
	DemoID      *string                    `json:"demoId,omitempty"`
	Provider    *Provider                  `json:"provider,omitempty"`
	Scm         *ScmAttributes             `json:"scm,omitempty"`
	Workspace   WorkspaceAttributes        `json:"workspace"`
}

type ClusterInformation struct {
	GitCommit  *string `json:"gitCommit,omitempty"`
	ID         string  `json:"id"`
	InsertedAt *string `json:"insertedAt,omitempty"`
	Platform   *string `json:"platform,omitempty"`
	UpdatedAt  *string `json:"updatedAt,omitempty"`
	Version    *string `json:"version,omitempty"`
}

type ClusterInformationAttributes struct {
	GitCommit *string `json:"gitCommit,omitempty"`
	Platform  *string `json:"platform,omitempty"`
	Version   *string `json:"version,omitempty"`
}

type ConsentRequest struct {
	RequestedScope []*string `json:"requestedScope,omitempty"`
	Skip           *bool     `json:"skip,omitempty"`
}

type Crd struct {
	Blob       *string `json:"blob,omitempty"`
	ID         string  `json:"id"`
	InsertedAt *string `json:"insertedAt,omitempty"`
	Name       string  `json:"name"`
	UpdatedAt  *string `json:"updatedAt,omitempty"`
}

type CrdAttributes struct {
	Blob *string `json:"blob,omitempty"`
	Name string  `json:"name"`
}

type Cvss struct {
	AttackComplexity   *VulnGrade       `json:"attackComplexity,omitempty"`
	AttackVector       *VulnVector      `json:"attackVector,omitempty"`
	Availability       *VulnGrade       `json:"availability,omitempty"`
	Confidentiality    *VulnGrade       `json:"confidentiality,omitempty"`
	Integrity          *VulnGrade       `json:"integrity,omitempty"`
	PrivilegesRequired *VulnGrade       `json:"privilegesRequired,omitempty"`
	UserInteraction    *VulnRequirement `json:"userInteraction,omitempty"`
}

type DeferredUpdate struct {
	Attempts              *int64                 `json:"attempts,omitempty"`
	ChartInstallation     *ChartInstallation     `json:"chartInstallation,omitempty"`
	DequeueAt             *string                `json:"dequeueAt,omitempty"`
	ID                    string                 `json:"id"`
	InsertedAt            *string                `json:"insertedAt,omitempty"`
	TerraformInstallation *TerraformInstallation `json:"terraformInstallation,omitempty"`
	UpdatedAt             *string                `json:"updatedAt,omitempty"`
	Version               *Version               `json:"version,omitempty"`
}

type DeferredUpdateConnection struct {
	Edges    []*DeferredUpdateEdge `json:"edges,omitempty"`
	PageInfo PageInfo              `json:"pageInfo"`
}

type DeferredUpdateEdge struct {
	Cursor *string         `json:"cursor,omitempty"`
	Node   *DeferredUpdate `json:"node,omitempty"`
}

type DemoProject struct {
	Credentials *string           `json:"credentials,omitempty"`
	ID          string            `json:"id"`
	InsertedAt  *string           `json:"insertedAt,omitempty"`
	ProjectID   string            `json:"projectId"`
	Ready       *bool             `json:"ready,omitempty"`
	State       *DemoProjectState `json:"state,omitempty"`
	UpdatedAt   *string           `json:"updatedAt,omitempty"`
}

type Dependencies struct {
	Application     *bool                  `json:"application,omitempty"`
	Breaking        *bool                  `json:"breaking,omitempty"`
	Dependencies    []*Dependency          `json:"dependencies,omitempty"`
	Instructions    *ChangeInstructions    `json:"instructions,omitempty"`
	Outputs         map[string]interface{} `json:"outputs,omitempty"`
	ProviderVsn     *string                `json:"providerVsn,omitempty"`
	ProviderWirings map[string]interface{} `json:"providerWirings,omitempty"`
	Providers       []*Provider            `json:"providers,omitempty"`
	Secrets         []*string              `json:"secrets,omitempty"`
	Wait            *bool                  `json:"wait,omitempty"`
	Wirings         *Wirings               `json:"wirings,omitempty"`
}

type Dependency struct {
	Name     *string         `json:"name,omitempty"`
	Optional *bool           `json:"optional,omitempty"`
	Repo     *string         `json:"repo,omitempty"`
	Type     *DependencyType `json:"type,omitempty"`
	Version  *string         `json:"version,omitempty"`
}

type DeviceLogin struct {
	DeviceToken string `json:"deviceToken"`
	LoginURL    string `json:"loginUrl"`
}

type DNSAccessPolicy struct {
	Bindings   []*PolicyBinding `json:"bindings,omitempty"`
	ID         string           `json:"id"`
	InsertedAt *string          `json:"insertedAt,omitempty"`
	UpdatedAt  *string          `json:"updatedAt,omitempty"`
}

type DNSAccessPolicyAttributes struct {
	Bindings []*BindingAttributes `json:"bindings,omitempty"`
	ID       *string              `json:"id,omitempty"`
}

type DNSDomain struct {
	AccessPolicy *DNSAccessPolicy     `json:"accessPolicy,omitempty"`
	Account      *Account             `json:"account,omitempty"`
	Creator      *User                `json:"creator,omitempty"`
	DNSRecords   *DNSRecordConnection `json:"dnsRecords,omitempty"`
	ID           string               `json:"id"`
	InsertedAt   *string              `json:"insertedAt,omitempty"`
	Name         string               `json:"name"`
	UpdatedAt    *string              `json:"updatedAt,omitempty"`
}

type DNSDomainAttributes struct {
	AccessPolicy *DNSAccessPolicyAttributes `json:"accessPolicy,omitempty"`
	Name         *string                    `json:"name,omitempty"`
}

type DNSDomainConnection struct {
	Edges    []*DNSDomainEdge `json:"edges,omitempty"`
	PageInfo PageInfo         `json:"pageInfo"`
}

type DNSDomainEdge struct {
	Cursor *string    `json:"cursor,omitempty"`
	Node   *DNSDomain `json:"node,omitempty"`
}

type DNSRecord struct {
	Cluster    string        `json:"cluster"`
	Creator    *User         `json:"creator,omitempty"`
	Domain     *DNSDomain    `json:"domain,omitempty"`
	ID         string        `json:"id"`
	InsertedAt *string       `json:"insertedAt,omitempty"`
	Name       string        `json:"name"`
	Provider   Provider      `json:"provider"`
	Records    []*string     `json:"records,omitempty"`
	Type       DNSRecordType `json:"type"`
	UpdatedAt  *string       `json:"updatedAt,omitempty"`
}

type DNSRecordAttributes struct {
	Name    string        `json:"name"`
	Records []*string     `json:"records,omitempty"`
	Type    DNSRecordType `json:"type"`
}

type DNSRecordConnection struct {
	Edges    []*DNSRecordEdge `json:"edges,omitempty"`
	PageInfo PageInfo         `json:"pageInfo"`
}

type DNSRecordEdge struct {
	Cursor *string    `json:"cursor,omitempty"`
	Node   *DNSRecord `json:"node,omitempty"`
}

type DockerImage struct {
	Digest           string            `json:"digest"`
	DockerRepository *DockerRepository `json:"dockerRepository,omitempty"`
	Grade            *ImageGrade       `json:"grade,omitempty"`
	ID               string            `json:"id"`
	InsertedAt       *string           `json:"insertedAt,omitempty"`
	ScannedAt        *string           `json:"scannedAt,omitempty"`
	Tag              *string           `json:"tag,omitempty"`
	UpdatedAt        *string           `json:"updatedAt,omitempty"`
	Vulnerabilities  []*Vulnerability  `json:"vulnerabilities,omitempty"`
}

type DockerImageConnection struct {
	Edges    []*DockerImageEdge `json:"edges,omitempty"`
	PageInfo PageInfo           `json:"pageInfo"`
}

type DockerImageEdge struct {
	Cursor *string      `json:"cursor,omitempty"`
	Node   *DockerImage `json:"node,omitempty"`
}

type DockerRepository struct {
	ID         string      `json:"id"`
	InsertedAt *string     `json:"insertedAt,omitempty"`
	Metrics    []*Metric   `json:"metrics,omitempty"`
	Name       string      `json:"name"`
	Public     *bool       `json:"public,omitempty"`
	Repository *Repository `json:"repository,omitempty"`
	UpdatedAt  *string     `json:"updatedAt,omitempty"`
}

type DockerRepositoryAttributes struct {
	Public bool `json:"public"`
}

type DockerRepositoryConnection struct {
	Edges    []*DockerRepositoryEdge `json:"edges,omitempty"`
	PageInfo PageInfo                `json:"pageInfo"`
}

type DockerRepositoryEdge struct {
	Cursor *string           `json:"cursor,omitempty"`
	Node   *DockerRepository `json:"node,omitempty"`
}

type DomainMapping struct {
	Account    *Account `json:"account,omitempty"`
	Domain     string   `json:"domain"`
	EnableSso  *bool    `json:"enableSso,omitempty"`
	ID         string   `json:"id"`
	InsertedAt *string  `json:"insertedAt,omitempty"`
	UpdatedAt  *string  `json:"updatedAt,omitempty"`
}

type DomainMappingInput struct {
	Domain    *string `json:"domain,omitempty"`
	EnableSso *bool   `json:"enableSso,omitempty"`
	ID        *string `json:"id,omitempty"`
}

type EabCredential struct {
	Cluster    string   `json:"cluster"`
	HmacKey    string   `json:"hmacKey"`
	ID         string   `json:"id"`
	InsertedAt *string  `json:"insertedAt,omitempty"`
	KeyID      string   `json:"keyId"`
	Provider   Provider `json:"provider"`
	UpdatedAt  *string  `json:"updatedAt,omitempty"`
}

type EntityAttributes struct {
	EndIndex   *int64            `json:"endIndex,omitempty"`
	StartIndex *int64            `json:"startIndex,omitempty"`
	Text       *string           `json:"text,omitempty"`
	Type       MessageEntityType `json:"type"`
	UserID     *string           `json:"userId,omitempty"`
}

type File struct {
	Blob        string          `json:"blob"`
	ContentType *string         `json:"contentType,omitempty"`
	Filename    *string         `json:"filename,omitempty"`
	Filesize    *int64          `json:"filesize,omitempty"`
	Height      *int64          `json:"height,omitempty"`
	ID          string          `json:"id"`
	InsertedAt  *string         `json:"insertedAt,omitempty"`
	MediaType   *MediaType      `json:"mediaType,omitempty"`
	Message     IncidentMessage `json:"message"`
	UpdatedAt   *string         `json:"updatedAt,omitempty"`
	Width       *int64          `json:"width,omitempty"`
}

type FileAttributes struct {
	Blob *string `json:"blob,omitempty"`
}

type FileConnection struct {
	Edges    []*FileEdge `json:"edges,omitempty"`
	PageInfo PageInfo    `json:"pageInfo"`
}

type FileEdge struct {
	Cursor *string `json:"cursor,omitempty"`
	Node   *File   `json:"node,omitempty"`
}

type Follower struct {
	ID          string                   `json:"id"`
	Incident    *Incident                `json:"incident,omitempty"`
	InsertedAt  *string                  `json:"insertedAt,omitempty"`
	Preferences *NotificationPreferences `json:"preferences,omitempty"`
	UpdatedAt   *string                  `json:"updatedAt,omitempty"`
	User        User                     `json:"user"`
}

type FollowerAttributes struct {
	Preferences *NotificationPreferencesAttributes `json:"preferences,omitempty"`
}

type FollowerConnection struct {
	Edges    []*FollowerEdge `json:"edges,omitempty"`
	PageInfo PageInfo        `json:"pageInfo"`
}

type FollowerEdge struct {
	Cursor *string   `json:"cursor,omitempty"`
	Node   *Follower `json:"node,omitempty"`
}

type GcpShellCredentialsAttributes struct {
	ApplicationCredentials string `json:"applicationCredentials"`
}

type GeoMetric struct {
	Count   *int64  `json:"count,omitempty"`
	Country *string `json:"country,omitempty"`
}

type Group struct {
	Description *string `json:"description,omitempty"`
	Global      *bool   `json:"global,omitempty"`
	ID          string  `json:"id"`
	InsertedAt  *string `json:"insertedAt,omitempty"`
	Name        string  `json:"name"`
	UpdatedAt   *string `json:"updatedAt,omitempty"`
}

type GroupAttributes struct {
	Description *string `json:"description,omitempty"`
	Global      *bool   `json:"global,omitempty"`
	Name        string  `json:"name"`
}

type GroupConnection struct {
	Edges    []*GroupEdge `json:"edges,omitempty"`
	PageInfo PageInfo     `json:"pageInfo"`
}

type GroupEdge struct {
	Cursor *string `json:"cursor,omitempty"`
	Node   *Group  `json:"node,omitempty"`
}

type GroupMember struct {
	Group      *Group  `json:"group,omitempty"`
	ID         string  `json:"id"`
	InsertedAt *string `json:"insertedAt,omitempty"`
	UpdatedAt  *string `json:"updatedAt,omitempty"`
	User       *User   `json:"user,omitempty"`
}

type GroupMemberConnection struct {
	Edges    []*GroupMemberEdge `json:"edges,omitempty"`
	PageInfo PageInfo           `json:"pageInfo"`
}

type GroupMemberEdge struct {
	Cursor *string      `json:"cursor,omitempty"`
	Node   *GroupMember `json:"node,omitempty"`
}

type GroupedTag struct {
	Count int64  `json:"count"`
	Tag   string `json:"tag"`
}

type GroupedTagConnection struct {
	Edges    []*GroupedTagEdge `json:"edges,omitempty"`
	PageInfo PageInfo          `json:"pageInfo"`
}

type GroupedTagEdge struct {
	Cursor *string     `json:"cursor,omitempty"`
	Node   *GroupedTag `json:"node,omitempty"`
}

type ImageDependency struct {
	ID         string      `json:"id"`
	Image      DockerImage `json:"image"`
	InsertedAt *string     `json:"insertedAt,omitempty"`
	UpdatedAt  *string     `json:"updatedAt,omitempty"`
	Version    Version     `json:"version"`
}

type ImageLayer struct {
	DiffID *string `json:"diffId,omitempty"`
	Digest *string `json:"digest,omitempty"`
}

type ImpersonationPolicy struct {
	Bindings   []*ImpersonationPolicyBinding `json:"bindings,omitempty"`
	ID         string                        `json:"id"`
	InsertedAt *string                       `json:"insertedAt,omitempty"`
	UpdatedAt  *string                       `json:"updatedAt,omitempty"`
}

type ImpersonationPolicyAttributes struct {
	Bindings []*ImpersonationPolicyBindingAttributes `json:"bindings,omitempty"`
	ID       *string                                 `json:"id,omitempty"`
}

type ImpersonationPolicyBinding struct {
	Group      *Group  `json:"group,omitempty"`
	ID         string  `json:"id"`
	InsertedAt *string `json:"insertedAt,omitempty"`
	UpdatedAt  *string `json:"updatedAt,omitempty"`
	User       *User   `json:"user,omitempty"`
}

type ImpersonationPolicyBindingAttributes struct {
	GroupID *string `json:"groupId,omitempty"`
	ID      *string `json:"id,omitempty"`
	UserID  *string `json:"userId,omitempty"`
}

type Incident struct {
	ClusterInformation *ClusterInformation        `json:"clusterInformation,omitempty"`
	Creator            User                       `json:"creator"`
	Description        *string                    `json:"description,omitempty"`
	Files              *FileConnection            `json:"files,omitempty"`
	Follower           *Follower                  `json:"follower,omitempty"`
	Followers          *FollowerConnection        `json:"followers,omitempty"`
	History            *IncidentHistoryConnection `json:"history,omitempty"`
	ID                 string                     `json:"id"`
	InsertedAt         *string                    `json:"insertedAt,omitempty"`
	Messages           *IncidentMessageConnection `json:"messages,omitempty"`
	NextResponseAt     *string                    `json:"nextResponseAt,omitempty"`
	NotificationCount  *int64                     `json:"notificationCount,omitempty"`
	Owner              *User                      `json:"owner,omitempty"`
	Postmortem         *Postmortem                `json:"postmortem,omitempty"`
	Repository         Repository                 `json:"repository"`
	Severity           int64                      `json:"severity"`
	Status             IncidentStatus             `json:"status"`
	Subscription       *SlimSubscription          `json:"subscription,omitempty"`
	Tags               []*Tag                     `json:"tags,omitempty"`
	Title              string                     `json:"title"`
	UpdatedAt          *string                    `json:"updatedAt,omitempty"`
}

type IncidentAttributes struct {
	ClusterInformation *ClusterInformationAttributes `json:"clusterInformation,omitempty"`
	Description        *string                       `json:"description,omitempty"`
	Severity           *int64                        `json:"severity,omitempty"`
	Status             *IncidentStatus               `json:"status,omitempty"`
	Tags               []*TagAttributes              `json:"tags,omitempty"`
	Title              *string                       `json:"title,omitempty"`
}

type IncidentChange struct {
	Key  string  `json:"key"`
	Next *string `json:"next,omitempty"`
	Prev *string `json:"prev,omitempty"`
}

type IncidentConnection struct {
	Edges    []*IncidentEdge `json:"edges,omitempty"`
	PageInfo PageInfo        `json:"pageInfo"`
}

type IncidentDelta struct {
	Delta   *Delta    `json:"delta,omitempty"`
	Payload *Incident `json:"payload,omitempty"`
}

type IncidentEdge struct {
	Cursor *string   `json:"cursor,omitempty"`
	Node   *Incident `json:"node,omitempty"`
}

type IncidentFilter struct {
	Statuses []*IncidentStatus  `json:"statuses,omitempty"`
	Type     IncidentFilterType `json:"type"`
	Value    *string            `json:"value,omitempty"`
}

type IncidentHistory struct {
	Action     IncidentAction    `json:"action"`
	Actor      User              `json:"actor"`
	Changes    []*IncidentChange `json:"changes,omitempty"`
	ID         string            `json:"id"`
	Incident   Incident          `json:"incident"`
	InsertedAt *string           `json:"insertedAt,omitempty"`
	UpdatedAt  *string           `json:"updatedAt,omitempty"`
}

type IncidentHistoryConnection struct {
	Edges    []*IncidentHistoryEdge `json:"edges,omitempty"`
	PageInfo PageInfo               `json:"pageInfo"`
}

type IncidentHistoryEdge struct {
	Cursor *string          `json:"cursor,omitempty"`
	Node   *IncidentHistory `json:"node,omitempty"`
}

type IncidentMessage struct {
	Creator    User             `json:"creator"`
	Entities   []*MessageEntity `json:"entities,omitempty"`
	File       *File            `json:"file,omitempty"`
	ID         string           `json:"id"`
	Incident   Incident         `json:"incident"`
	InsertedAt *string          `json:"insertedAt,omitempty"`
	Reactions  []*Reaction      `json:"reactions,omitempty"`
	Text       string           `json:"text"`
	UpdatedAt  *string          `json:"updatedAt,omitempty"`
}

type IncidentMessageAttributes struct {
	Entities []*EntityAttributes `json:"entities,omitempty"`
	File     *FileAttributes     `json:"file,omitempty"`
	Text     string              `json:"text"`
}

type IncidentMessageConnection struct {
	Edges    []*IncidentMessageEdge `json:"edges,omitempty"`
	PageInfo PageInfo               `json:"pageInfo"`
}

type IncidentMessageDelta struct {
	Delta   *Delta           `json:"delta,omitempty"`
	Payload *IncidentMessage `json:"payload,omitempty"`
}

type IncidentMessageEdge struct {
	Cursor *string          `json:"cursor,omitempty"`
	Node   *IncidentMessage `json:"node,omitempty"`
}

type Installation struct {
	AcmeKeyID    *string                 `json:"acmeKeyId,omitempty"`
	AcmeSecret   *string                 `json:"acmeSecret,omitempty"`
	AutoUpgrade  *bool                   `json:"autoUpgrade,omitempty"`
	Context      map[string]interface{}  `json:"context,omitempty"`
	ID           string                  `json:"id"`
	InsertedAt   *string                 `json:"insertedAt,omitempty"`
	License      *string                 `json:"license,omitempty"`
	LicenseKey   *string                 `json:"licenseKey,omitempty"`
	OidcProvider *OidcProvider           `json:"oidcProvider,omitempty"`
	Repository   *Repository             `json:"repository,omitempty"`
	Subscription *RepositorySubscription `json:"subscription,omitempty"`
	TrackTag     string                  `json:"trackTag"`
	UpdatedAt    *string                 `json:"updatedAt,omitempty"`
	User         *User                   `json:"user,omitempty"`
}

type InstallationAttributes struct {
	AutoUpgrade *bool   `json:"autoUpgrade,omitempty"`
	Context     *string `json:"context,omitempty"`
	TrackTag    *string `json:"trackTag,omitempty"`
}

type InstallationConnection struct {
	Edges    []*InstallationEdge `json:"edges,omitempty"`
	PageInfo PageInfo            `json:"pageInfo"`
}

type InstallationEdge struct {
	Cursor *string       `json:"cursor,omitempty"`
	Node   *Installation `json:"node,omitempty"`
}

type Integration struct {
	Description *string                `json:"description,omitempty"`
	Icon        *string                `json:"icon,omitempty"`
	ID          string                 `json:"id"`
	InsertedAt  *string                `json:"insertedAt,omitempty"`
	Name        string                 `json:"name"`
	Publisher   *Publisher             `json:"publisher,omitempty"`
	Repository  *Repository            `json:"repository,omitempty"`
	SourceURL   *string                `json:"sourceUrl,omitempty"`
	Spec        map[string]interface{} `json:"spec,omitempty"`
	Tags        []*Tag                 `json:"tags,omitempty"`
	Type        *string                `json:"type,omitempty"`
	UpdatedAt   *string                `json:"updatedAt,omitempty"`
}

type IntegrationAttributes struct {
	Description *string          `json:"description,omitempty"`
	Icon        *string          `json:"icon,omitempty"`
	Name        string           `json:"name"`
	SourceURL   *string          `json:"sourceUrl,omitempty"`
	Spec        *string          `json:"spec,omitempty"`
	Tags        []*TagAttributes `json:"tags,omitempty"`
	Type        *string          `json:"type,omitempty"`
}

type IntegrationConnection struct {
	Edges    []*IntegrationEdge `json:"edges,omitempty"`
	PageInfo PageInfo           `json:"pageInfo"`
}

type IntegrationEdge struct {
	Cursor *string      `json:"cursor,omitempty"`
	Node   *Integration `json:"node,omitempty"`
}

type IntegrationWebhook struct {
	Account    *Account              `json:"account,omitempty"`
	Actions    []*string             `json:"actions,omitempty"`
	ID         string                `json:"id"`
	InsertedAt *string               `json:"insertedAt,omitempty"`
	Logs       *WebhookLogConnection `json:"logs,omitempty"`
	Name       string                `json:"name"`
	Secret     string                `json:"secret"`
	UpdatedAt  *string               `json:"updatedAt,omitempty"`
	URL        string                `json:"url"`
}

type IntegrationWebhookAttributes struct {
	Actions []*string `json:"actions,omitempty"`
	Name    string    `json:"name"`
	URL     string    `json:"url"`
}

type IntegrationWebhookConnection struct {
	Edges    []*IntegrationWebhookEdge `json:"edges,omitempty"`
	PageInfo PageInfo                  `json:"pageInfo"`
}

type IntegrationWebhookEdge struct {
	Cursor *string             `json:"cursor,omitempty"`
	Node   *IntegrationWebhook `json:"node,omitempty"`
}

type Invite struct {
	Account    *Account `json:"account,omitempty"`
	Email      *string  `json:"email,omitempty"`
	ID         string   `json:"id"`
	InsertedAt *string  `json:"insertedAt,omitempty"`
	SecureID   string   `json:"secureId"`
	UpdatedAt  *string  `json:"updatedAt,omitempty"`
	User       *User    `json:"user,omitempty"`
}

type InviteAttributes struct {
	Email *string `json:"email,omitempty"`
}

type InviteConnection struct {
	Edges    []*InviteEdge `json:"edges,omitempty"`
	PageInfo PageInfo      `json:"pageInfo"`
}

type InviteEdge struct {
	Cursor *string `json:"cursor,omitempty"`
	Node   *Invite `json:"node,omitempty"`
}

type Invoice struct {
	AmountDue        int64          `json:"amountDue"`
	AmountPaid       int64          `json:"amountPaid"`
	CreatedAt        *string        `json:"createdAt,omitempty"`
	Currency         string         `json:"currency"`
	HostedInvoiceURL *string        `json:"hostedInvoiceUrl,omitempty"`
	Lines            []*InvoiceItem `json:"lines,omitempty"`
	Number           string         `json:"number"`
	Status           *string        `json:"status,omitempty"`
}

type InvoiceConnection struct {
	Edges    []*InvoiceEdge `json:"edges,omitempty"`
	PageInfo PageInfo       `json:"pageInfo"`
}

type InvoiceEdge struct {
	Cursor *string  `json:"cursor,omitempty"`
	Node   *Invoice `json:"node,omitempty"`
}

type InvoiceItem struct {
	Amount      int64   `json:"amount"`
	Currency    string  `json:"currency"`
	Description *string `json:"description,omitempty"`
}

type License struct {
	Name *string `json:"name,omitempty"`
	URL  *string `json:"url,omitempty"`
}

type Limit struct {
	Dimension string `json:"dimension"`
	Quantity  int64  `json:"quantity"`
}

type LimitAttributes struct {
	Dimension string `json:"dimension"`
	Quantity  int64  `json:"quantity"`
}

type LineItem struct {
	Cost      int64     `json:"cost"`
	Dimension string    `json:"dimension"`
	Name      string    `json:"name"`
	Period    *string   `json:"period,omitempty"`
	Type      *PlanType `json:"type,omitempty"`
}

type LineItemAttributes struct {
	Cost      int64     `json:"cost"`
	Dimension string    `json:"dimension"`
	Name      string    `json:"name"`
	Period    string    `json:"period"`
	Type      *PlanType `json:"type,omitempty"`
}

type LockAttributes struct {
	Lock string `json:"lock"`
}

type LoginMethodResponse struct {
	AuthorizeURL *string     `json:"authorizeUrl,omitempty"`
	LoginMethod  LoginMethod `json:"loginMethod"`
	Token        *string     `json:"token,omitempty"`
}

type LoginRequest struct {
	RequestedScope []*string `json:"requestedScope,omitempty"`
	Subject        *string   `json:"subject,omitempty"`
}

type MeetingAttributes struct {
	IncidentID *string `json:"incidentId,omitempty"`
	Topic      string  `json:"topic"`
}

type MessageEntity struct {
	EndIndex   *int64            `json:"endIndex,omitempty"`
	ID         string            `json:"id"`
	InsertedAt *string           `json:"insertedAt,omitempty"`
	StartIndex *int64            `json:"startIndex,omitempty"`
	Text       *string           `json:"text,omitempty"`
	Type       MessageEntityType `json:"type"`
	UpdatedAt  *string           `json:"updatedAt,omitempty"`
	User       *User             `json:"user,omitempty"`
}

type Metric struct {
	Name   string         `json:"name"`
	Tags   []*MetricTag   `json:"tags,omitempty"`
	Values []*MetricValue `json:"values,omitempty"`
}

type MetricTag struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

type MetricValue struct {
	Time  *string `json:"time,omitempty"`
	Value *int64  `json:"value,omitempty"`
}

type Notification struct {
	Actor      User             `json:"actor"`
	ID         string           `json:"id"`
	Incident   *Incident        `json:"incident,omitempty"`
	InsertedAt *string          `json:"insertedAt,omitempty"`
	Message    *IncidentMessage `json:"message,omitempty"`
	Msg        *string          `json:"msg,omitempty"`
	Repository *Repository      `json:"repository,omitempty"`
	Type       NotificationType `json:"type"`
	UpdatedAt  *string          `json:"updatedAt,omitempty"`
	User       User             `json:"user"`
}

type NotificationConnection struct {
	Edges    []*NotificationEdge `json:"edges,omitempty"`
	PageInfo PageInfo            `json:"pageInfo"`
}

type NotificationEdge struct {
	Cursor *string       `json:"cursor,omitempty"`
	Node   *Notification `json:"node,omitempty"`
}

type NotificationPreferences struct {
	IncidentUpdate *bool `json:"incidentUpdate,omitempty"`
	Mention        *bool `json:"mention,omitempty"`
	Message        *bool `json:"message,omitempty"`
}

type NotificationPreferencesAttributes struct {
	IncidentUpdate bool `json:"incidentUpdate"`
	Mention        bool `json:"mention"`
	Message        bool `json:"message"`
}

type OauthAttributes struct {
	Code        *string       `json:"code,omitempty"`
	RedirectURI *string       `json:"redirectUri,omitempty"`
	Service     *OauthService `json:"service,omitempty"`
}

type OauthInfo struct {
	AuthorizeURL string        `json:"authorizeUrl"`
	Provider     OauthProvider `json:"provider"`
}

type OauthIntegration struct {
	Account    *Account     `json:"account,omitempty"`
	ID         string       `json:"id"`
	InsertedAt *string      `json:"insertedAt,omitempty"`
	Service    OauthService `json:"service"`
	UpdatedAt  *string      `json:"updatedAt,omitempty"`
}

type OauthResponse struct {
	RedirectTo string `json:"redirectTo"`
}

type OauthSettings struct {
	AuthMethod OidcAuthMethod `json:"authMethod"`
	URIFormat  string         `json:"uriFormat"`
}

type OauthSettingsAttributes struct {
	AuthMethod OidcAuthMethod `json:"authMethod"`
	URIFormat  string         `json:"uriFormat"`
}

type OidcAttributes struct {
	AuthMethod   OidcAuthMethod       `json:"authMethod"`
	Bindings     []*BindingAttributes `json:"bindings,omitempty"`
	RedirectUris []*string            `json:"redirectUris,omitempty"`
}

type OidcLogin struct {
	City       *string     `json:"city,omitempty"`
	Country    *string     `json:"country,omitempty"`
	ID         string      `json:"id"`
	InsertedAt *string     `json:"insertedAt,omitempty"`
	IP         *string     `json:"ip,omitempty"`
	Latitude   *string     `json:"latitude,omitempty"`
	Longitude  *string     `json:"longitude,omitempty"`
	Owner      *User       `json:"owner,omitempty"`
	Repository *Repository `json:"repository,omitempty"`
	UpdatedAt  *string     `json:"updatedAt,omitempty"`
	User       *User       `json:"user,omitempty"`
}

type OidcLoginConnection struct {
	Edges    []*OidcLoginEdge `json:"edges,omitempty"`
	PageInfo PageInfo         `json:"pageInfo"`
}

type OidcLoginEdge struct {
	Cursor *string    `json:"cursor,omitempty"`
	Node   *OidcLogin `json:"node,omitempty"`
}

type OidcProvider struct {
	AuthMethod    OidcAuthMethod         `json:"authMethod"`
	Bindings      []*OidcProviderBinding `json:"bindings,omitempty"`
	ClientID      string                 `json:"clientId"`
	ClientSecret  string                 `json:"clientSecret"`
	Configuration *OuathConfiguration    `json:"configuration,omitempty"`
	Consent       *ConsentRequest        `json:"consent,omitempty"`
	ID            string                 `json:"id"`
	InsertedAt    *string                `json:"insertedAt,omitempty"`
	RedirectUris  []*string              `json:"redirectUris,omitempty"`
	UpdatedAt     *string                `json:"updatedAt,omitempty"`
}

type OidcProviderBinding struct {
	Group      *Group  `json:"group,omitempty"`
	ID         string  `json:"id"`
	InsertedAt *string `json:"insertedAt,omitempty"`
	UpdatedAt  *string `json:"updatedAt,omitempty"`
	User       *User   `json:"user,omitempty"`
}

type OidcSettings struct {
	AuthMethod OidcAuthMethod `json:"authMethod"`
	DomainKey  *string        `json:"domainKey,omitempty"`
	Subdomain  *bool          `json:"subdomain,omitempty"`
	URIFormat  *string        `json:"uriFormat,omitempty"`
	URIFormats []*string      `json:"uriFormats,omitempty"`
}

type OidcSettingsAttributes struct {
	AuthMethod OidcAuthMethod `json:"authMethod"`
	DomainKey  *string        `json:"domainKey,omitempty"`
	Subdomain  *bool          `json:"subdomain,omitempty"`
	URIFormat  *string        `json:"uriFormat,omitempty"`
	URIFormats []*string      `json:"uriFormats,omitempty"`
}

type OidcStepResponse struct {
	Consent    *ConsentRequest `json:"consent,omitempty"`
	Login      *LoginRequest   `json:"login,omitempty"`
	Repository *Repository     `json:"repository,omitempty"`
}

type OuathConfiguration struct {
	AuthorizationEndpoint *string `json:"authorizationEndpoint,omitempty"`
	Issuer                *string `json:"issuer,omitempty"`
	JwksURI               *string `json:"jwksUri,omitempty"`
	TokenEndpoint         *string `json:"tokenEndpoint,omitempty"`
	UserinfoEndpoint      *string `json:"userinfoEndpoint,omitempty"`
}

type PackageScan struct {
	Errors     []*ScanError     `json:"errors,omitempty"`
	Grade      *ImageGrade      `json:"grade,omitempty"`
	ID         string           `json:"id"`
	InsertedAt *string          `json:"insertedAt,omitempty"`
	UpdatedAt  *string          `json:"updatedAt,omitempty"`
	Violations []*ScanViolation `json:"violations,omitempty"`
}

type PageInfo struct {
	// When paginating forwards, the cursor to continue.
	EndCursor *string `json:"endCursor,omitempty"`
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
	// When paginating backwards, are there more items?
	HasPreviousPage bool `json:"hasPreviousPage"`
	// When paginating backwards, the cursor to continue.
	StartCursor *string `json:"startCursor,omitempty"`
}

type PersistedToken struct {
	Audits     *PersistedTokenAuditConnection `json:"audits,omitempty"`
	ID         *string                        `json:"id,omitempty"`
	InsertedAt *string                        `json:"insertedAt,omitempty"`
	Metrics    []*GeoMetric                   `json:"metrics,omitempty"`
	Token      *string                        `json:"token,omitempty"`
	UpdatedAt  *string                        `json:"updatedAt,omitempty"`
}

type PersistedTokenAudit struct {
	City       *string `json:"city,omitempty"`
	Count      *int64  `json:"count,omitempty"`
	Country    *string `json:"country,omitempty"`
	ID         *string `json:"id,omitempty"`
	InsertedAt *string `json:"insertedAt,omitempty"`
	IP         *string `json:"ip,omitempty"`
	Latitude   *string `json:"latitude,omitempty"`
	Longitude  *string `json:"longitude,omitempty"`
	Timestamp  *string `json:"timestamp,omitempty"`
	UpdatedAt  *string `json:"updatedAt,omitempty"`
}

type PersistedTokenAuditConnection struct {
	Edges    []*PersistedTokenAuditEdge `json:"edges,omitempty"`
	PageInfo PageInfo                   `json:"pageInfo"`
}

type PersistedTokenAuditEdge struct {
	Cursor *string              `json:"cursor,omitempty"`
	Node   *PersistedTokenAudit `json:"node,omitempty"`
}

type PersistedTokenConnection struct {
	Edges    []*PersistedTokenEdge `json:"edges,omitempty"`
	PageInfo PageInfo              `json:"pageInfo"`
}

type PersistedTokenEdge struct {
	Cursor *string         `json:"cursor,omitempty"`
	Node   *PersistedToken `json:"node,omitempty"`
}

type Plan struct {
	Cost          int64           `json:"cost"`
	Default       *bool           `json:"default,omitempty"`
	ID            string          `json:"id"`
	InsertedAt    *string         `json:"insertedAt,omitempty"`
	LineItems     *PlanLineItems  `json:"lineItems,omitempty"`
	Metadata      *PlanMetadata   `json:"metadata,omitempty"`
	Name          string          `json:"name"`
	Period        *string         `json:"period,omitempty"`
	ServiceLevels []*ServiceLevel `json:"serviceLevels,omitempty"`
	UpdatedAt     *string         `json:"updatedAt,omitempty"`
	Visible       bool            `json:"visible"`
}

type PlanAttributes struct {
	Cost          int64                     `json:"cost"`
	Default       *bool                     `json:"default,omitempty"`
	LineItems     *PlanLineItemAttributes   `json:"lineItems,omitempty"`
	Metadata      *PlanMetadataAttributes   `json:"metadata,omitempty"`
	Name          string                    `json:"name"`
	Period        string                    `json:"period"`
	ServiceLevels []*ServiceLevelAttributes `json:"serviceLevels,omitempty"`
}

type PlanFeature struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

type PlanFeatureAttributes struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

type PlanLineItemAttributes struct {
	Included []*LimitAttributes    `json:"included,omitempty"`
	Items    []*LineItemAttributes `json:"items,omitempty"`
}

type PlanLineItems struct {
	Included []*Limit    `json:"included,omitempty"`
	Items    []*LineItem `json:"items,omitempty"`
}

type PlanMetadata struct {
	Features []*PlanFeature         `json:"features,omitempty"`
	Freeform map[string]interface{} `json:"freeform,omitempty"`
}

type PlanMetadataAttributes struct {
	Features []*PlanFeatureAttributes `json:"features,omitempty"`
	Freeform *string                  `json:"freeform,omitempty"`
}

type PlatformMetrics struct {
	Clusters     *int64 `json:"clusters,omitempty"`
	Publishers   *int64 `json:"publishers,omitempty"`
	Repositories *int64 `json:"repositories,omitempty"`
	Rollouts     *int64 `json:"rollouts,omitempty"`
}

type PluralConfiguration struct {
	GitCommit            *string `json:"gitCommit,omitempty"`
	Registry             *string `json:"registry,omitempty"`
	StripeConnectID      *string `json:"stripeConnectId,omitempty"`
	StripePublishableKey *string `json:"stripePublishableKey,omitempty"`
}

type PolicyBinding struct {
	Group      *Group  `json:"group,omitempty"`
	ID         string  `json:"id"`
	InsertedAt *string `json:"insertedAt,omitempty"`
	UpdatedAt  *string `json:"updatedAt,omitempty"`
	User       *User   `json:"user,omitempty"`
}

type Postmortem struct {
	ActionItems []*ActionItem `json:"actionItems,omitempty"`
	Content     string        `json:"content"`
	Creator     User          `json:"creator"`
	ID          string        `json:"id"`
	InsertedAt  *string       `json:"insertedAt,omitempty"`
	UpdatedAt   *string       `json:"updatedAt,omitempty"`
}

type PostmortemAttributes struct {
	ActionItems []*ActionItemAttributes `json:"actionItems,omitempty"`
	Content     string                  `json:"content"`
}

type PublicKey struct {
	Content    string  `json:"content"`
	Digest     string  `json:"digest"`
	ID         string  `json:"id"`
	InsertedAt *string `json:"insertedAt,omitempty"`
	Name       string  `json:"name"`
	UpdatedAt  *string `json:"updatedAt,omitempty"`
	User       User    `json:"user"`
}

type PublicKeyAttributes struct {
	Content string `json:"content"`
	Name    string `json:"name"`
}

type PublicKeyConnection struct {
	Edges    []*PublicKeyEdge `json:"edges,omitempty"`
	PageInfo PageInfo         `json:"pageInfo"`
}

type PublicKeyEdge struct {
	Cursor *string    `json:"cursor,omitempty"`
	Node   *PublicKey `json:"node,omitempty"`
}

type Publisher struct {
	Address          *Address      `json:"address,omitempty"`
	Avatar           *string       `json:"avatar,omitempty"`
	BackgroundColor  *string       `json:"backgroundColor,omitempty"`
	BillingAccountID *string       `json:"billingAccountId,omitempty"`
	Description      *string       `json:"description,omitempty"`
	ID               *string       `json:"id,omitempty"`
	InsertedAt       *string       `json:"insertedAt,omitempty"`
	Name             string        `json:"name"`
	Owner            *User         `json:"owner,omitempty"`
	Phone            *string       `json:"phone,omitempty"`
	Repositories     []*Repository `json:"repositories,omitempty"`
	UpdatedAt        *string       `json:"updatedAt,omitempty"`
}

type PublisherAttributes struct {
	Address     *AddressAttributes `json:"address,omitempty"`
	Avatar      *string            `json:"avatar,omitempty"`
	Description *string            `json:"description,omitempty"`
	Name        *string            `json:"name,omitempty"`
	Phone       *string            `json:"phone,omitempty"`
}

type PublisherConnection struct {
	Edges    []*PublisherEdge `json:"edges,omitempty"`
	PageInfo PageInfo         `json:"pageInfo"`
}

type PublisherEdge struct {
	Cursor *string    `json:"cursor,omitempty"`
	Node   *Publisher `json:"node,omitempty"`
}

type Reaction struct {
	Creator    User            `json:"creator"`
	InsertedAt *string         `json:"insertedAt,omitempty"`
	Message    IncidentMessage `json:"message"`
	Name       string          `json:"name"`
	UpdatedAt  *string         `json:"updatedAt,omitempty"`
}

type Recipe struct {
	Description        *string          `json:"description,omitempty"`
	ID                 string           `json:"id"`
	InsertedAt         *string          `json:"insertedAt,omitempty"`
	Name               string           `json:"name"`
	OidcSettings       *OidcSettings    `json:"oidcSettings,omitempty"`
	Private            *bool            `json:"private,omitempty"`
	Provider           *Provider        `json:"provider,omitempty"`
	RecipeDependencies []*Recipe        `json:"recipeDependencies,omitempty"`
	RecipeSections     []*RecipeSection `json:"recipeSections,omitempty"`
	Repository         *Repository      `json:"repository,omitempty"`
	Restricted         *bool            `json:"restricted,omitempty"`
	Tests              []*RecipeTest    `json:"tests,omitempty"`
	UpdatedAt          *string          `json:"updatedAt,omitempty"`
}

type RecipeAttributes struct {
	Dependencies []*RecipeDependencyAttributes `json:"dependencies,omitempty"`
	Description  *string                       `json:"description,omitempty"`
	Name         string                        `json:"name"`
	OidcSettings *OidcSettingsAttributes       `json:"oidcSettings,omitempty"`
	Private      *bool                         `json:"private,omitempty"`
	Provider     *Provider                     `json:"provider,omitempty"`
	Restricted   *bool                         `json:"restricted,omitempty"`
	Sections     []*RecipeSectionAttributes    `json:"sections,omitempty"`
	Tests        []*RecipeTestAttributes       `json:"tests,omitempty"`
}

type RecipeCondition struct {
	Field     string    `json:"field"`
	Operation Operation `json:"operation"`
	Value     *string   `json:"value,omitempty"`
}

type RecipeConditionAttributes struct {
	Field     string    `json:"field"`
	Operation Operation `json:"operation"`
	Value     *string   `json:"value,omitempty"`
}

type RecipeConfiguration struct {
	Args          []*string         `json:"args,omitempty"`
	Condition     *RecipeCondition  `json:"condition,omitempty"`
	Default       *string           `json:"default,omitempty"`
	Documentation *string           `json:"documentation,omitempty"`
	FunctionName  *string           `json:"functionName,omitempty"`
	Longform      *string           `json:"longform,omitempty"`
	Name          *string           `json:"name,omitempty"`
	Optional      *bool             `json:"optional,omitempty"`
	Placeholder   *string           `json:"placeholder,omitempty"`
	Type          *Datatype         `json:"type,omitempty"`
	Validation    *RecipeValidation `json:"validation,omitempty"`
}

type RecipeConfigurationAttributes struct {
	Condition     *RecipeConditionAttributes  `json:"condition,omitempty"`
	Default       *string                     `json:"default,omitempty"`
	Documentation *string                     `json:"documentation,omitempty"`
	FunctionName  *string                     `json:"functionName,omitempty"`
	Longform      *string                     `json:"longform,omitempty"`
	Name          string                      `json:"name"`
	Optional      *bool                       `json:"optional,omitempty"`
	Placeholder   *string                     `json:"placeholder,omitempty"`
	Type          Datatype                    `json:"type"`
	Validation    *RecipeValidationAttributes `json:"validation,omitempty"`
}

type RecipeConnection struct {
	Edges    []*RecipeEdge `json:"edges,omitempty"`
	PageInfo PageInfo      `json:"pageInfo"`
}

type RecipeDependencyAttributes struct {
	Name string `json:"name"`
	Repo string `json:"repo"`
}

type RecipeEdge struct {
	Cursor *string `json:"cursor,omitempty"`
	Node   *Recipe `json:"node,omitempty"`
}

type RecipeItem struct {
	Chart         *Chart                 `json:"chart,omitempty"`
	Configuration []*RecipeConfiguration `json:"configuration,omitempty"`
	ID            *string                `json:"id,omitempty"`
	InsertedAt    *string                `json:"insertedAt,omitempty"`
	RecipeSection *RecipeSection         `json:"recipeSection,omitempty"`
	Terraform     *Terraform             `json:"terraform,omitempty"`
	UpdatedAt     *string                `json:"updatedAt,omitempty"`
}

type RecipeItemAttributes struct {
	Configuration []*RecipeConfigurationAttributes `json:"configuration,omitempty"`
	Name          string                           `json:"name"`
	Type          RecipeItemType                   `json:"type"`
}

type RecipeSection struct {
	Configuration []*RecipeConfiguration `json:"configuration,omitempty"`
	ID            *string                `json:"id,omitempty"`
	Index         *int64                 `json:"index,omitempty"`
	InsertedAt    *string                `json:"insertedAt,omitempty"`
	Recipe        *Recipe                `json:"recipe,omitempty"`
	RecipeItems   []*RecipeItem          `json:"recipeItems,omitempty"`
	Repository    *Repository            `json:"repository,omitempty"`
	UpdatedAt     *string                `json:"updatedAt,omitempty"`
}

type RecipeSectionAttributes struct {
	Configuration []*RecipeConfigurationAttributes `json:"configuration,omitempty"`
	Items         []*RecipeItemAttributes          `json:"items,omitempty"`
	Name          string                           `json:"name"`
}

type RecipeTest struct {
	Args    []*TestArgument `json:"args,omitempty"`
	Message *string         `json:"message,omitempty"`
	Name    string          `json:"name"`
	Type    TestType        `json:"type"`
}

type RecipeTestAttributes struct {
	Args    []*TestArgumentAttributes `json:"args,omitempty"`
	Message *string                   `json:"message,omitempty"`
	Name    string                    `json:"name"`
	Type    TestType                  `json:"type"`
}

type RecipeValidation struct {
	Message string         `json:"message"`
	Regex   *string        `json:"regex,omitempty"`
	Type    ValidationType `json:"type"`
}

type RecipeValidationAttributes struct {
	Message string         `json:"message"`
	Regex   *string        `json:"regex,omitempty"`
	Type    ValidationType `json:"type"`
}

type Repository struct {
	Artifacts     []*Artifact            `json:"artifacts,omitempty"`
	Category      *Category              `json:"category,omitempty"`
	DarkIcon      *string                `json:"darkIcon,omitempty"`
	DefaultTag    *string                `json:"defaultTag,omitempty"`
	Description   *string                `json:"description,omitempty"`
	Documentation *string                `json:"documentation,omitempty"`
	Editable      *bool                  `json:"editable,omitempty"`
	GitURL        *string                `json:"gitUrl,omitempty"`
	Homepage      *string                `json:"homepage,omitempty"`
	Icon          *string                `json:"icon,omitempty"`
	ID            string                 `json:"id"`
	InsertedAt    *string                `json:"insertedAt,omitempty"`
	Installation  *Installation          `json:"installation,omitempty"`
	License       *License               `json:"license,omitempty"`
	Name          string                 `json:"name"`
	Notes         *string                `json:"notes,omitempty"`
	OauthSettings *OauthSettings         `json:"oauthSettings,omitempty"`
	Plans         []*Plan                `json:"plans,omitempty"`
	Private       *bool                  `json:"private,omitempty"`
	PublicKey     *string                `json:"publicKey,omitempty"`
	Publisher     *Publisher             `json:"publisher,omitempty"`
	Readme        *string                `json:"readme,omitempty"`
	Recipes       []*Recipe              `json:"recipes,omitempty"`
	Secrets       map[string]interface{} `json:"secrets,omitempty"`
	Tags          []*Tag                 `json:"tags,omitempty"`
	UpdatedAt     *string                `json:"updatedAt,omitempty"`
	Verified      *bool                  `json:"verified,omitempty"`
}

type RepositoryAttributes struct {
	Category                      *Category                     `json:"category,omitempty"`
	DarkIcon                      *string                       `json:"darkIcon,omitempty"`
	DefaultTag                    *string                       `json:"defaultTag,omitempty"`
	Description                   *string                       `json:"description,omitempty"`
	Documentation                 *string                       `json:"documentation,omitempty"`
	GitURL                        *string                       `json:"gitUrl,omitempty"`
	Homepage                      *string                       `json:"homepage,omitempty"`
	Icon                          *string                       `json:"icon,omitempty"`
	IntegrationResourceDefinition *ResourceDefinitionAttributes `json:"integrationResourceDefinition,omitempty"`
	Name                          *string                       `json:"name,omitempty"`
	Notes                         *string                       `json:"notes,omitempty"`
	OauthSettings                 *OauthSettingsAttributes      `json:"oauthSettings,omitempty"`
	Private                       *bool                         `json:"private,omitempty"`
	Readme                        *string                       `json:"readme,omitempty"`
	Secrets                       *string                       `json:"secrets,omitempty"`
	Tags                          []*TagAttributes              `json:"tags,omitempty"`
	Verified                      *bool                         `json:"verified,omitempty"`
}

type RepositoryConnection struct {
	Edges    []*RepositoryEdge `json:"edges,omitempty"`
	PageInfo PageInfo          `json:"pageInfo"`
}

type RepositoryEdge struct {
	Cursor *string     `json:"cursor,omitempty"`
	Node   *Repository `json:"node,omitempty"`
}

type RepositorySubscription struct {
	CustomerID   *string                `json:"customerId,omitempty"`
	ExternalID   *string                `json:"externalId,omitempty"`
	ID           string                 `json:"id"`
	Installation *Installation          `json:"installation,omitempty"`
	Invoices     *InvoiceConnection     `json:"invoices,omitempty"`
	LineItems    *SubscriptionLineItems `json:"lineItems,omitempty"`
	Plan         *Plan                  `json:"plan,omitempty"`
}

type RepositorySubscriptionConnection struct {
	Edges    []*RepositorySubscriptionEdge `json:"edges,omitempty"`
	PageInfo PageInfo                      `json:"pageInfo"`
}

type RepositorySubscriptionEdge struct {
	Cursor *string                 `json:"cursor,omitempty"`
	Node   *RepositorySubscription `json:"node,omitempty"`
}

type ResetToken struct {
	Email      string         `json:"email"`
	ExternalID string         `json:"externalId"`
	ID         string         `json:"id"`
	InsertedAt *string        `json:"insertedAt,omitempty"`
	Type       ResetTokenType `json:"type"`
	UpdatedAt  *string        `json:"updatedAt,omitempty"`
	User       User           `json:"user"`
}

type ResetTokenAttributes struct {
	Email *string        `json:"email,omitempty"`
	Type  ResetTokenType `json:"type"`
}

type ResetTokenRealization struct {
	Password *string `json:"password,omitempty"`
}

type ResourceDefinitionAttributes struct {
	Name string                     `json:"name"`
	Spec []*SpecificationAttributes `json:"spec,omitempty"`
}

type Role struct {
	Account      *Account       `json:"account,omitempty"`
	Description  *string        `json:"description,omitempty"`
	ID           string         `json:"id"`
	InsertedAt   *string        `json:"insertedAt,omitempty"`
	Name         string         `json:"name"`
	Permissions  []*Permission  `json:"permissions,omitempty"`
	Repositories []*string      `json:"repositories,omitempty"`
	RoleBindings []*RoleBinding `json:"roleBindings,omitempty"`
	UpdatedAt    *string        `json:"updatedAt,omitempty"`
}

type RoleAttributes struct {
	Description  *string              `json:"description,omitempty"`
	Name         *string              `json:"name,omitempty"`
	Permissions  []*Permission        `json:"permissions,omitempty"`
	Repositories []*string            `json:"repositories,omitempty"`
	RoleBindings []*BindingAttributes `json:"roleBindings,omitempty"`
}

type RoleBinding struct {
	Group      *Group  `json:"group,omitempty"`
	ID         string  `json:"id"`
	InsertedAt *string `json:"insertedAt,omitempty"`
	UpdatedAt  *string `json:"updatedAt,omitempty"`
	User       *User   `json:"user,omitempty"`
}

type RoleConnection struct {
	Edges    []*RoleEdge `json:"edges,omitempty"`
	PageInfo PageInfo    `json:"pageInfo"`
}

type RoleEdge struct {
	Cursor *string `json:"cursor,omitempty"`
	Node   *Role   `json:"node,omitempty"`
}

type Roles struct {
	Admin *bool `json:"admin,omitempty"`
}

type RolesAttributes struct {
	Admin *bool `json:"admin,omitempty"`
}

type Rollout struct {
	Count      *int64        `json:"count,omitempty"`
	Cursor     *string       `json:"cursor,omitempty"`
	Event      *string       `json:"event,omitempty"`
	Heartbeat  *string       `json:"heartbeat,omitempty"`
	ID         string        `json:"id"`
	InsertedAt *string       `json:"insertedAt,omitempty"`
	Repository *Repository   `json:"repository,omitempty"`
	Status     RolloutStatus `json:"status"`
	UpdatedAt  *string       `json:"updatedAt,omitempty"`
}

type RolloutConnection struct {
	Edges    []*RolloutEdge `json:"edges,omitempty"`
	PageInfo PageInfo       `json:"pageInfo"`
}

type RolloutDelta struct {
	Delta   *Delta   `json:"delta,omitempty"`
	Payload *Rollout `json:"payload,omitempty"`
}

type RolloutEdge struct {
	Cursor *string  `json:"cursor,omitempty"`
	Node   *Rollout `json:"node,omitempty"`
}

type RootSubscriptionType struct {
	IncidentDelta        *IncidentDelta        `json:"incidentDelta,omitempty"`
	IncidentMessageDelta *IncidentMessageDelta `json:"incidentMessageDelta,omitempty"`
	Notification         *Notification         `json:"notification,omitempty"`
	RolloutDelta         *RolloutDelta         `json:"rolloutDelta,omitempty"`
	TestDelta            *TestDelta            `json:"testDelta,omitempty"`
	TestLogs             *StepLogs             `json:"testLogs,omitempty"`
	Upgrade              *Upgrade              `json:"upgrade,omitempty"`
	UpgradeQueueDelta    *UpgradeQueueDelta    `json:"upgradeQueueDelta,omitempty"`
}

type ScaffoldFile struct {
	Content *string `json:"content,omitempty"`
	Path    *string `json:"path,omitempty"`
}

type ScanError struct {
	Message *string `json:"message,omitempty"`
}

type ScanViolation struct {
	Category     *string    `json:"category,omitempty"`
	Description  *string    `json:"description,omitempty"`
	File         *string    `json:"file,omitempty"`
	InsertedAt   *string    `json:"insertedAt,omitempty"`
	Line         *int64     `json:"line,omitempty"`
	ResourceName *string    `json:"resourceName,omitempty"`
	ResourceType *string    `json:"resourceType,omitempty"`
	RuleID       *string    `json:"ruleId,omitempty"`
	RuleName     *string    `json:"ruleName,omitempty"`
	Severity     *VulnGrade `json:"severity,omitempty"`
	UpdatedAt    *string    `json:"updatedAt,omitempty"`
}

type ScmAttributes struct {
	Name     string       `json:"name"`
	Org      *string      `json:"org,omitempty"`
	Provider *ScmProvider `json:"provider,omitempty"`
	Token    string       `json:"token"`
}

type ServiceAccountAttributes struct {
	Email               *string                        `json:"email,omitempty"`
	ImpersonationPolicy *ImpersonationPolicyAttributes `json:"impersonationPolicy,omitempty"`
	Name                *string                        `json:"name,omitempty"`
}

type ServiceLevel struct {
	MaxSeverity  *int64 `json:"maxSeverity,omitempty"`
	MinSeverity  *int64 `json:"minSeverity,omitempty"`
	ResponseTime *int64 `json:"responseTime,omitempty"`
}

type ServiceLevelAttributes struct {
	MaxSeverity  *int64 `json:"maxSeverity,omitempty"`
	MinSeverity  *int64 `json:"minSeverity,omitempty"`
	ResponseTime *int64 `json:"responseTime,omitempty"`
}

type ShellCredentialsAttributes struct {
	Aws *AwsShellCredentialsAttributes `json:"aws,omitempty"`
	Gcp *GcpShellCredentialsAttributes `json:"gcp,omitempty"`
}

type ShellStatus struct {
	ContainersReady *bool `json:"containersReady,omitempty"`
	Initialized     *bool `json:"initialized,omitempty"`
	PodScheduled    *bool `json:"podScheduled,omitempty"`
	Ready           *bool `json:"ready,omitempty"`
}

type SlimSubscription struct {
	ID        string                 `json:"id"`
	LineItems *SubscriptionLineItems `json:"lineItems,omitempty"`
	Plan      *Plan                  `json:"plan,omitempty"`
}

type SpecificationAttributes struct {
	Inner    *SpecDatatype              `json:"inner,omitempty"`
	Name     string                     `json:"name"`
	Required *bool                      `json:"required,omitempty"`
	Spec     []*SpecificationAttributes `json:"spec,omitempty"`
	Type     SpecDatatype               `json:"type"`
}

type StepLogs struct {
	Logs []*string `json:"logs,omitempty"`
	Step *TestStep `json:"step,omitempty"`
}

type SubscriptionAttributes struct {
	LineItems *SubscriptionLineItemAttributes `json:"lineItems,omitempty"`
}

type SubscriptionLineItemAttributes struct {
	Items []*LimitAttributes `json:"items,omitempty"`
}

type SubscriptionLineItems struct {
	Items []*Limit `json:"items,omitempty"`
}

type Tag struct {
	ID  string `json:"id"`
	Tag string `json:"tag"`
}

type TagAttributes struct {
	Tag string `json:"tag"`
}

type Terraform struct {
	Dependencies   *Dependencies          `json:"dependencies,omitempty"`
	Description    *string                `json:"description,omitempty"`
	Editable       *bool                  `json:"editable,omitempty"`
	ID             *string                `json:"id,omitempty"`
	InsertedAt     *string                `json:"insertedAt,omitempty"`
	Installation   *TerraformInstallation `json:"installation,omitempty"`
	LatestVersion  *string                `json:"latestVersion,omitempty"`
	Name           *string                `json:"name,omitempty"`
	Package        *string                `json:"package,omitempty"`
	Readme         *string                `json:"readme,omitempty"`
	Repository     *Repository            `json:"repository,omitempty"`
	UpdatedAt      *string                `json:"updatedAt,omitempty"`
	ValuesTemplate *string                `json:"valuesTemplate,omitempty"`
}

type TerraformAttributes struct {
	Dependencies *string `json:"dependencies,omitempty"`
	Description  *string `json:"description,omitempty"`
	Name         *string `json:"name,omitempty"`
	Package      *string `json:"package,omitempty"`
	Version      *string `json:"version,omitempty"`
}

type TerraformConnection struct {
	Edges    []*TerraformEdge `json:"edges,omitempty"`
	PageInfo PageInfo         `json:"pageInfo"`
}

type TerraformEdge struct {
	Cursor *string    `json:"cursor,omitempty"`
	Node   *Terraform `json:"node,omitempty"`
}

type TerraformInstallation struct {
	ID           *string       `json:"id,omitempty"`
	InsertedAt   *string       `json:"insertedAt,omitempty"`
	Installation *Installation `json:"installation,omitempty"`
	Terraform    *Terraform    `json:"terraform,omitempty"`
	UpdatedAt    *string       `json:"updatedAt,omitempty"`
	Version      *Version      `json:"version,omitempty"`
}

type TerraformInstallationAttributes struct {
	TerraformID *string `json:"terraformId,omitempty"`
	VersionID   *string `json:"versionId,omitempty"`
}

type TerraformInstallationConnection struct {
	Edges    []*TerraformInstallationEdge `json:"edges,omitempty"`
	PageInfo PageInfo                     `json:"pageInfo"`
}

type TerraformInstallationEdge struct {
	Cursor *string                `json:"cursor,omitempty"`
	Node   *TerraformInstallation `json:"node,omitempty"`
}

type TerraformProvider struct {
	Content *string   `json:"content,omitempty"`
	Name    *Provider `json:"name,omitempty"`
}

type Test struct {
	Creator    *User       `json:"creator,omitempty"`
	ID         string      `json:"id"`
	InsertedAt *string     `json:"insertedAt,omitempty"`
	Name       *string     `json:"name,omitempty"`
	PromoteTag string      `json:"promoteTag"`
	Repository *Repository `json:"repository,omitempty"`
	SourceTag  string      `json:"sourceTag"`
	Status     TestStatus  `json:"status"`
	Steps      []*TestStep `json:"steps,omitempty"`
	UpdatedAt  *string     `json:"updatedAt,omitempty"`
}

type TestArgument struct {
	Key  string `json:"key"`
	Name string `json:"name"`
	Repo string `json:"repo"`
}

type TestArgumentAttributes struct {
	Key  string `json:"key"`
	Name string `json:"name"`
	Repo string `json:"repo"`
}

type TestAttributes struct {
	Name       *string               `json:"name,omitempty"`
	PromoteTag *string               `json:"promoteTag,omitempty"`
	Status     *TestStatus           `json:"status,omitempty"`
	Steps      []*TestStepAttributes `json:"steps,omitempty"`
}

type TestConnection struct {
	Edges    []*TestEdge `json:"edges,omitempty"`
	PageInfo PageInfo    `json:"pageInfo"`
}

type TestDelta struct {
	Delta   *Delta `json:"delta,omitempty"`
	Payload *Test  `json:"payload,omitempty"`
}

type TestEdge struct {
	Cursor *string `json:"cursor,omitempty"`
	Node   *Test   `json:"node,omitempty"`
}

type TestStep struct {
	Description string     `json:"description"`
	HasLogs     *bool      `json:"hasLogs,omitempty"`
	ID          string     `json:"id"`
	InsertedAt  *string    `json:"insertedAt,omitempty"`
	Name        string     `json:"name"`
	Status      TestStatus `json:"status"`
	UpdatedAt   *string    `json:"updatedAt,omitempty"`
}

type TestStepAttributes struct {
	Description *string     `json:"description,omitempty"`
	ID          *string     `json:"id,omitempty"`
	Logs        *string     `json:"logs,omitempty"`
	Name        *string     `json:"name,omitempty"`
	Status      *TestStatus `json:"status,omitempty"`
}

type UpdatablePlanAttributes struct {
	Default       *bool                     `json:"default,omitempty"`
	ServiceLevels []*ServiceLevelAttributes `json:"serviceLevels,omitempty"`
}

type Upgrade struct {
	ID         string       `json:"id"`
	InsertedAt *string      `json:"insertedAt,omitempty"`
	Message    *string      `json:"message,omitempty"`
	Repository *Repository  `json:"repository,omitempty"`
	Type       *UpgradeType `json:"type,omitempty"`
	UpdatedAt  *string      `json:"updatedAt,omitempty"`
}

type UpgradeConnection struct {
	Edges    []*UpgradeEdge `json:"edges,omitempty"`
	PageInfo PageInfo       `json:"pageInfo"`
}

type UpgradeEdge struct {
	Cursor *string  `json:"cursor,omitempty"`
	Node   *Upgrade `json:"node,omitempty"`
}

type UpgradeQueue struct {
	Acked      *string            `json:"acked,omitempty"`
	Domain     *string            `json:"domain,omitempty"`
	Git        *string            `json:"git,omitempty"`
	ID         string             `json:"id"`
	InsertedAt *string            `json:"insertedAt,omitempty"`
	Name       *string            `json:"name,omitempty"`
	PingedAt   *string            `json:"pingedAt,omitempty"`
	Provider   *Provider          `json:"provider,omitempty"`
	UpdatedAt  *string            `json:"updatedAt,omitempty"`
	Upgrades   *UpgradeConnection `json:"upgrades,omitempty"`
	User       User               `json:"user"`
}

type UpgradeQueueAttributes struct {
	Domain   *string   `json:"domain,omitempty"`
	Git      *string   `json:"git,omitempty"`
	Name     string    `json:"name"`
	Provider *Provider `json:"provider,omitempty"`
}

type UpgradeQueueDelta struct {
	Delta   *Delta        `json:"delta,omitempty"`
	Payload *UpgradeQueue `json:"payload,omitempty"`
}

type User struct {
	Account             *Account             `json:"account,omitempty"`
	Address             *Address             `json:"address,omitempty"`
	Avatar              *string              `json:"avatar,omitempty"`
	BackgroundColor     *string              `json:"backgroundColor,omitempty"`
	Cards               *CardConnection      `json:"cards,omitempty"`
	DefaultQueueID      *string              `json:"defaultQueueId,omitempty"`
	Email               string               `json:"email"`
	EmailConfirmBy      *string              `json:"emailConfirmBy,omitempty"`
	EmailConfirmed      *bool                `json:"emailConfirmed,omitempty"`
	HasInstallations    *bool                `json:"hasInstallations,omitempty"`
	ID                  string               `json:"id"`
	ImpersonationPolicy *ImpersonationPolicy `json:"impersonationPolicy,omitempty"`
	InsertedAt          *string              `json:"insertedAt,omitempty"`
	Jwt                 *string              `json:"jwt,omitempty"`
	LoginMethod         *LoginMethod         `json:"loginMethod,omitempty"`
	Name                string               `json:"name"`
	Onboarding          *OnboardingState     `json:"onboarding,omitempty"`
	Phone               *string              `json:"phone,omitempty"`
	Provider            *Provider            `json:"provider,omitempty"`
	Publisher           *Publisher           `json:"publisher,omitempty"`
	Roles               *Roles               `json:"roles,omitempty"`
	ServiceAccount      *bool                `json:"serviceAccount,omitempty"`
	UpdatedAt           *string              `json:"updatedAt,omitempty"`
}

type UserAttributes struct {
	Avatar      *string          `json:"avatar,omitempty"`
	Email       *string          `json:"email,omitempty"`
	LoginMethod *LoginMethod     `json:"loginMethod,omitempty"`
	Name        *string          `json:"name,omitempty"`
	Onboarding  *OnboardingState `json:"onboarding,omitempty"`
	Password    *string          `json:"password,omitempty"`
	Roles       *RolesAttributes `json:"roles,omitempty"`
}

type UserConnection struct {
	Edges    []*UserEdge `json:"edges,omitempty"`
	PageInfo PageInfo    `json:"pageInfo"`
}

type UserEdge struct {
	Cursor *string `json:"cursor,omitempty"`
	Node   *User   `json:"node,omitempty"`
}

type UserEventAttributes struct {
	Data   *string          `json:"data,omitempty"`
	Event  string           `json:"event"`
	Status *UserEventStatus `json:"status,omitempty"`
}

type Version struct {
	Chart             *Chart                 `json:"chart,omitempty"`
	Crds              []*Crd                 `json:"crds,omitempty"`
	Dependencies      *Dependencies          `json:"dependencies,omitempty"`
	Helm              map[string]interface{} `json:"helm,omitempty"`
	ID                string                 `json:"id"`
	ImageDependencies []*ImageDependency     `json:"imageDependencies,omitempty"`
	InsertedAt        *string                `json:"insertedAt,omitempty"`
	Package           *string                `json:"package,omitempty"`
	Readme            *string                `json:"readme,omitempty"`
	Scan              *PackageScan           `json:"scan,omitempty"`
	Tags              []*VersionTag          `json:"tags,omitempty"`
	Terraform         *Terraform             `json:"terraform,omitempty"`
	UpdatedAt         *string                `json:"updatedAt,omitempty"`
	ValuesTemplate    *string                `json:"valuesTemplate,omitempty"`
	Version           string                 `json:"version"`
}

type VersionAttributes struct {
	Tags []*VersionTagAttributes `json:"tags,omitempty"`
}

type VersionConnection struct {
	Edges    []*VersionEdge `json:"edges,omitempty"`
	PageInfo PageInfo       `json:"pageInfo"`
}

type VersionEdge struct {
	Cursor *string  `json:"cursor,omitempty"`
	Node   *Version `json:"node,omitempty"`
}

type VersionSpec struct {
	Chart      *string `json:"chart,omitempty"`
	Repository *string `json:"repository,omitempty"`
	Terraform  *string `json:"terraform,omitempty"`
	Version    *string `json:"version,omitempty"`
}

type VersionTag struct {
	Chart      *Chart   `json:"chart,omitempty"`
	ID         string   `json:"id"`
	InsertedAt *string  `json:"insertedAt,omitempty"`
	Tag        string   `json:"tag"`
	UpdatedAt  *string  `json:"updatedAt,omitempty"`
	Version    *Version `json:"version,omitempty"`
}

type VersionTagAttributes struct {
	Tag       string  `json:"tag"`
	VersionID *string `json:"versionId,omitempty"`
}

type Vulnerability struct {
	Cvss             *Cvss       `json:"cvss,omitempty"`
	Description      *string     `json:"description,omitempty"`
	FixedVersion     *string     `json:"fixedVersion,omitempty"`
	ID               string      `json:"id"`
	InsertedAt       *string     `json:"insertedAt,omitempty"`
	InstalledVersion *string     `json:"installedVersion,omitempty"`
	Layer            *ImageLayer `json:"layer,omitempty"`
	Package          *string     `json:"package,omitempty"`
	Score            *float64    `json:"score,omitempty"`
	Severity         *VulnGrade  `json:"severity,omitempty"`
	Source           *string     `json:"source,omitempty"`
	Title            *string     `json:"title,omitempty"`
	UpdatedAt        *string     `json:"updatedAt,omitempty"`
	URL              *string     `json:"url,omitempty"`
	VulnerabilityID  *string     `json:"vulnerabilityId,omitempty"`
}

type Webhook struct {
	ID         *string `json:"id,omitempty"`
	InsertedAt *string `json:"insertedAt,omitempty"`
	Secret     *string `json:"secret,omitempty"`
	UpdatedAt  *string `json:"updatedAt,omitempty"`
	URL        *string `json:"url,omitempty"`
	User       *User   `json:"user,omitempty"`
}

type WebhookAttributes struct {
	URL string `json:"url"`
}

type WebhookConnection struct {
	Edges    []*WebhookEdge `json:"edges,omitempty"`
	PageInfo PageInfo       `json:"pageInfo"`
}

type WebhookEdge struct {
	Cursor *string  `json:"cursor,omitempty"`
	Node   *Webhook `json:"node,omitempty"`
}

type WebhookLog struct {
	ID         string                 `json:"id"`
	InsertedAt *string                `json:"insertedAt,omitempty"`
	Payload    map[string]interface{} `json:"payload,omitempty"`
	Response   *string                `json:"response,omitempty"`
	State      WebhookLogState        `json:"state"`
	Status     *int64                 `json:"status,omitempty"`
	UpdatedAt  *string                `json:"updatedAt,omitempty"`
	Webhook    *IntegrationWebhook    `json:"webhook,omitempty"`
}

type WebhookLogConnection struct {
	Edges    []*WebhookLogEdge `json:"edges,omitempty"`
	PageInfo PageInfo          `json:"pageInfo"`
}

type WebhookLogEdge struct {
	Cursor *string     `json:"cursor,omitempty"`
	Node   *WebhookLog `json:"node,omitempty"`
}

type WebhookResponse struct {
	Body       *string                `json:"body,omitempty"`
	Headers    map[string]interface{} `json:"headers,omitempty"`
	StatusCode int64                  `json:"statusCode"`
}

type Wirings struct {
	Helm      map[string]interface{} `json:"helm,omitempty"`
	Terraform map[string]interface{} `json:"terraform,omitempty"`
}

type WorkspaceAttributes struct {
	BucketPrefix string  `json:"bucketPrefix"`
	Cluster      string  `json:"cluster"`
	Project      *string `json:"project,omitempty"`
	Region       string  `json:"region"`
	Subdomain    string  `json:"subdomain"`
}

type ZoomMeeting struct {
	JoinURL  string  `json:"joinUrl"`
	Password *string `json:"password,omitempty"`
}

type ActionItemType string

const (
	ActionItemTypeBlog  ActionItemType = "BLOG"
	ActionItemTypeIssue ActionItemType = "ISSUE"
	ActionItemTypePull  ActionItemType = "PULL"
)

var AllActionItemType = []ActionItemType{
	ActionItemTypeBlog,
	ActionItemTypeIssue,
	ActionItemTypePull,
}

func (e ActionItemType) IsValid() bool {
	switch e {
	case ActionItemTypeBlog, ActionItemTypeIssue, ActionItemTypePull:
		return true
	}
	return false
}

func (e ActionItemType) String() string {
	return string(e)
}

func (e *ActionItemType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ActionItemType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ActionItemType", str)
	}
	return nil
}

func (e ActionItemType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ArtifactPlatform string

const (
	ArtifactPlatformAndroid ArtifactPlatform = "ANDROID"
	ArtifactPlatformFreebsd ArtifactPlatform = "FREEBSD"
	ArtifactPlatformLinux   ArtifactPlatform = "LINUX"
	ArtifactPlatformMac     ArtifactPlatform = "MAC"
	ArtifactPlatformOpenbsd ArtifactPlatform = "OPENBSD"
	ArtifactPlatformSolaris ArtifactPlatform = "SOLARIS"
	ArtifactPlatformWindows ArtifactPlatform = "WINDOWS"
)

var AllArtifactPlatform = []ArtifactPlatform{
	ArtifactPlatformAndroid,
	ArtifactPlatformFreebsd,
	ArtifactPlatformLinux,
	ArtifactPlatformMac,
	ArtifactPlatformOpenbsd,
	ArtifactPlatformSolaris,
	ArtifactPlatformWindows,
}

func (e ArtifactPlatform) IsValid() bool {
	switch e {
	case ArtifactPlatformAndroid, ArtifactPlatformFreebsd, ArtifactPlatformLinux, ArtifactPlatformMac, ArtifactPlatformOpenbsd, ArtifactPlatformSolaris, ArtifactPlatformWindows:
		return true
	}
	return false
}

func (e ArtifactPlatform) String() string {
	return string(e)
}

func (e *ArtifactPlatform) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ArtifactPlatform(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ArtifactPlatform", str)
	}
	return nil
}

func (e ArtifactPlatform) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ArtifactType string

const (
	ArtifactTypeCli     ArtifactType = "CLI"
	ArtifactTypeDesktop ArtifactType = "DESKTOP"
	ArtifactTypeMobile  ArtifactType = "MOBILE"
)

var AllArtifactType = []ArtifactType{
	ArtifactTypeCli,
	ArtifactTypeDesktop,
	ArtifactTypeMobile,
}

func (e ArtifactType) IsValid() bool {
	switch e {
	case ArtifactTypeCli, ArtifactTypeDesktop, ArtifactTypeMobile:
		return true
	}
	return false
}

func (e ArtifactType) String() string {
	return string(e)
}

func (e *ArtifactType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ArtifactType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ArtifactType", str)
	}
	return nil
}

func (e ArtifactType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Category string

const (
	CategoryData         Category = "DATA"
	CategoryDatabase     Category = "DATABASE"
	CategoryDevops       Category = "DEVOPS"
	CategoryMessaging    Category = "MESSAGING"
	CategoryNetwork      Category = "NETWORK"
	CategoryProductivity Category = "PRODUCTIVITY"
	CategorySecurity     Category = "SECURITY"
	CategoryStorage      Category = "STORAGE"
)

var AllCategory = []Category{
	CategoryData,
	CategoryDatabase,
	CategoryDevops,
	CategoryMessaging,
	CategoryNetwork,
	CategoryProductivity,
	CategorySecurity,
	CategoryStorage,
}

func (e Category) IsValid() bool {
	switch e {
	case CategoryData, CategoryDatabase, CategoryDevops, CategoryMessaging, CategoryNetwork, CategoryProductivity, CategorySecurity, CategoryStorage:
		return true
	}
	return false
}

func (e Category) String() string {
	return string(e)
}

func (e *Category) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Category(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Category", str)
	}
	return nil
}

func (e Category) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Datatype string

const (
	DatatypeBool     Datatype = "BOOL"
	DatatypeBucket   Datatype = "BUCKET"
	DatatypeDomain   Datatype = "DOMAIN"
	DatatypeFile     Datatype = "FILE"
	DatatypeFunction Datatype = "FUNCTION"
	DatatypeInt      Datatype = "INT"
	DatatypePassword Datatype = "PASSWORD"
	DatatypeString   Datatype = "STRING"
)

var AllDatatype = []Datatype{
	DatatypeBool,
	DatatypeBucket,
	DatatypeDomain,
	DatatypeFile,
	DatatypeFunction,
	DatatypeInt,
	DatatypePassword,
	DatatypeString,
}

func (e Datatype) IsValid() bool {
	switch e {
	case DatatypeBool, DatatypeBucket, DatatypeDomain, DatatypeFile, DatatypeFunction, DatatypeInt, DatatypePassword, DatatypeString:
		return true
	}
	return false
}

func (e Datatype) String() string {
	return string(e)
}

func (e *Datatype) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Datatype(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Datatype", str)
	}
	return nil
}

func (e Datatype) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Delta string

const (
	DeltaCreate Delta = "CREATE"
	DeltaDelete Delta = "DELETE"
	DeltaUpdate Delta = "UPDATE"
)

var AllDelta = []Delta{
	DeltaCreate,
	DeltaDelete,
	DeltaUpdate,
}

func (e Delta) IsValid() bool {
	switch e {
	case DeltaCreate, DeltaDelete, DeltaUpdate:
		return true
	}
	return false
}

func (e Delta) String() string {
	return string(e)
}

func (e *Delta) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Delta(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Delta", str)
	}
	return nil
}

func (e Delta) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DemoProjectState string

const (
	DemoProjectStateCreated DemoProjectState = "CREATED"
	DemoProjectStateEnabled DemoProjectState = "ENABLED"
	DemoProjectStateReady   DemoProjectState = "READY"
)

var AllDemoProjectState = []DemoProjectState{
	DemoProjectStateCreated,
	DemoProjectStateEnabled,
	DemoProjectStateReady,
}

func (e DemoProjectState) IsValid() bool {
	switch e {
	case DemoProjectStateCreated, DemoProjectStateEnabled, DemoProjectStateReady:
		return true
	}
	return false
}

func (e DemoProjectState) String() string {
	return string(e)
}

func (e *DemoProjectState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DemoProjectState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DemoProjectState", str)
	}
	return nil
}

func (e DemoProjectState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DependencyType string

const (
	DependencyTypeHelm      DependencyType = "HELM"
	DependencyTypeTerraform DependencyType = "TERRAFORM"
)

var AllDependencyType = []DependencyType{
	DependencyTypeHelm,
	DependencyTypeTerraform,
}

func (e DependencyType) IsValid() bool {
	switch e {
	case DependencyTypeHelm, DependencyTypeTerraform:
		return true
	}
	return false
}

func (e DependencyType) String() string {
	return string(e)
}

func (e *DependencyType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DependencyType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DependencyType", str)
	}
	return nil
}

func (e DependencyType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DNSRecordType string

const (
	DNSRecordTypeA     DNSRecordType = "A"
	DNSRecordTypeAaaa  DNSRecordType = "AAAA"
	DNSRecordTypeCname DNSRecordType = "CNAME"
	DNSRecordTypeTxt   DNSRecordType = "TXT"
)

var AllDNSRecordType = []DNSRecordType{
	DNSRecordTypeA,
	DNSRecordTypeAaaa,
	DNSRecordTypeCname,
	DNSRecordTypeTxt,
}

func (e DNSRecordType) IsValid() bool {
	switch e {
	case DNSRecordTypeA, DNSRecordTypeAaaa, DNSRecordTypeCname, DNSRecordTypeTxt:
		return true
	}
	return false
}

func (e DNSRecordType) String() string {
	return string(e)
}

func (e *DNSRecordType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DNSRecordType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DnsRecordType", str)
	}
	return nil
}

func (e DNSRecordType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ImageGrade string

const (
	ImageGradeA ImageGrade = "A"
	ImageGradeB ImageGrade = "B"
	ImageGradeC ImageGrade = "C"
	ImageGradeD ImageGrade = "D"
	ImageGradeF ImageGrade = "F"
)

var AllImageGrade = []ImageGrade{
	ImageGradeA,
	ImageGradeB,
	ImageGradeC,
	ImageGradeD,
	ImageGradeF,
}

func (e ImageGrade) IsValid() bool {
	switch e {
	case ImageGradeA, ImageGradeB, ImageGradeC, ImageGradeD, ImageGradeF:
		return true
	}
	return false
}

func (e ImageGrade) String() string {
	return string(e)
}

func (e *ImageGrade) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ImageGrade(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ImageGrade", str)
	}
	return nil
}

func (e ImageGrade) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type IncidentAction string

const (
	IncidentActionAccept   IncidentAction = "ACCEPT"
	IncidentActionComplete IncidentAction = "COMPLETE"
	IncidentActionCreate   IncidentAction = "CREATE"
	IncidentActionEdit     IncidentAction = "EDIT"
	IncidentActionSeverity IncidentAction = "SEVERITY"
	IncidentActionStatus   IncidentAction = "STATUS"
)

var AllIncidentAction = []IncidentAction{
	IncidentActionAccept,
	IncidentActionComplete,
	IncidentActionCreate,
	IncidentActionEdit,
	IncidentActionSeverity,
	IncidentActionStatus,
}

func (e IncidentAction) IsValid() bool {
	switch e {
	case IncidentActionAccept, IncidentActionComplete, IncidentActionCreate, IncidentActionEdit, IncidentActionSeverity, IncidentActionStatus:
		return true
	}
	return false
}

func (e IncidentAction) String() string {
	return string(e)
}

func (e *IncidentAction) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = IncidentAction(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid IncidentAction", str)
	}
	return nil
}

func (e IncidentAction) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type IncidentFilterType string

const (
	IncidentFilterTypeFollowing     IncidentFilterType = "FOLLOWING"
	IncidentFilterTypeNotifications IncidentFilterType = "NOTIFICATIONS"
	IncidentFilterTypeStatus        IncidentFilterType = "STATUS"
	IncidentFilterTypeTag           IncidentFilterType = "TAG"
)

var AllIncidentFilterType = []IncidentFilterType{
	IncidentFilterTypeFollowing,
	IncidentFilterTypeNotifications,
	IncidentFilterTypeStatus,
	IncidentFilterTypeTag,
}

func (e IncidentFilterType) IsValid() bool {
	switch e {
	case IncidentFilterTypeFollowing, IncidentFilterTypeNotifications, IncidentFilterTypeStatus, IncidentFilterTypeTag:
		return true
	}
	return false
}

func (e IncidentFilterType) String() string {
	return string(e)
}

func (e *IncidentFilterType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = IncidentFilterType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid IncidentFilterType", str)
	}
	return nil
}

func (e IncidentFilterType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type IncidentSort string

const (
	IncidentSortInsertedAt IncidentSort = "INSERTED_AT"
	IncidentSortSeverity   IncidentSort = "SEVERITY"
	IncidentSortStatus     IncidentSort = "STATUS"
	IncidentSortTitle      IncidentSort = "TITLE"
)

var AllIncidentSort = []IncidentSort{
	IncidentSortInsertedAt,
	IncidentSortSeverity,
	IncidentSortStatus,
	IncidentSortTitle,
}

func (e IncidentSort) IsValid() bool {
	switch e {
	case IncidentSortInsertedAt, IncidentSortSeverity, IncidentSortStatus, IncidentSortTitle:
		return true
	}
	return false
}

func (e IncidentSort) String() string {
	return string(e)
}

func (e *IncidentSort) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = IncidentSort(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid IncidentSort", str)
	}
	return nil
}

func (e IncidentSort) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type IncidentStatus string

const (
	IncidentStatusComplete   IncidentStatus = "COMPLETE"
	IncidentStatusInProgress IncidentStatus = "IN_PROGRESS"
	IncidentStatusOpen       IncidentStatus = "OPEN"
	IncidentStatusResolved   IncidentStatus = "RESOLVED"
)

var AllIncidentStatus = []IncidentStatus{
	IncidentStatusComplete,
	IncidentStatusInProgress,
	IncidentStatusOpen,
	IncidentStatusResolved,
}

func (e IncidentStatus) IsValid() bool {
	switch e {
	case IncidentStatusComplete, IncidentStatusInProgress, IncidentStatusOpen, IncidentStatusResolved:
		return true
	}
	return false
}

func (e IncidentStatus) String() string {
	return string(e)
}

func (e *IncidentStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = IncidentStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid IncidentStatus", str)
	}
	return nil
}

func (e IncidentStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type LoginMethod string

const (
	LoginMethodGithub       LoginMethod = "GITHUB"
	LoginMethodGoogle       LoginMethod = "GOOGLE"
	LoginMethodPassword     LoginMethod = "PASSWORD"
	LoginMethodPasswordless LoginMethod = "PASSWORDLESS"
	LoginMethodSso          LoginMethod = "SSO"
)

var AllLoginMethod = []LoginMethod{
	LoginMethodGithub,
	LoginMethodGoogle,
	LoginMethodPassword,
	LoginMethodPasswordless,
	LoginMethodSso,
}

func (e LoginMethod) IsValid() bool {
	switch e {
	case LoginMethodGithub, LoginMethodGoogle, LoginMethodPassword, LoginMethodPasswordless, LoginMethodSso:
		return true
	}
	return false
}

func (e LoginMethod) String() string {
	return string(e)
}

func (e *LoginMethod) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LoginMethod(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LoginMethod", str)
	}
	return nil
}

func (e LoginMethod) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MediaType string

const (
	MediaTypeAudio MediaType = "AUDIO"
	MediaTypeImage MediaType = "IMAGE"
	MediaTypeOther MediaType = "OTHER"
	MediaTypePDF   MediaType = "PDF"
	MediaTypeVideo MediaType = "VIDEO"
)

var AllMediaType = []MediaType{
	MediaTypeAudio,
	MediaTypeImage,
	MediaTypeOther,
	MediaTypePDF,
	MediaTypeVideo,
}

func (e MediaType) IsValid() bool {
	switch e {
	case MediaTypeAudio, MediaTypeImage, MediaTypeOther, MediaTypePDF, MediaTypeVideo:
		return true
	}
	return false
}

func (e MediaType) String() string {
	return string(e)
}

func (e *MediaType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MediaType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MediaType", str)
	}
	return nil
}

func (e MediaType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MessageEntityType string

const (
	MessageEntityTypeEmoji   MessageEntityType = "EMOJI"
	MessageEntityTypeMention MessageEntityType = "MENTION"
)

var AllMessageEntityType = []MessageEntityType{
	MessageEntityTypeEmoji,
	MessageEntityTypeMention,
}

func (e MessageEntityType) IsValid() bool {
	switch e {
	case MessageEntityTypeEmoji, MessageEntityTypeMention:
		return true
	}
	return false
}

func (e MessageEntityType) String() string {
	return string(e)
}

func (e *MessageEntityType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MessageEntityType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MessageEntityType", str)
	}
	return nil
}

func (e MessageEntityType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type NotificationType string

const (
	NotificationTypeIncidentUpdate NotificationType = "INCIDENT_UPDATE"
	NotificationTypeLocked         NotificationType = "LOCKED"
	NotificationTypeMention        NotificationType = "MENTION"
	NotificationTypeMessage        NotificationType = "MESSAGE"
)

var AllNotificationType = []NotificationType{
	NotificationTypeIncidentUpdate,
	NotificationTypeLocked,
	NotificationTypeMention,
	NotificationTypeMessage,
}

func (e NotificationType) IsValid() bool {
	switch e {
	case NotificationTypeIncidentUpdate, NotificationTypeLocked, NotificationTypeMention, NotificationTypeMessage:
		return true
	}
	return false
}

func (e NotificationType) String() string {
	return string(e)
}

func (e *NotificationType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = NotificationType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid NotificationType", str)
	}
	return nil
}

func (e NotificationType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OauthProvider string

const (
	OauthProviderGithub OauthProvider = "GITHUB"
	OauthProviderGitlab OauthProvider = "GITLAB"
	OauthProviderGoogle OauthProvider = "GOOGLE"
)

var AllOauthProvider = []OauthProvider{
	OauthProviderGithub,
	OauthProviderGitlab,
	OauthProviderGoogle,
}

func (e OauthProvider) IsValid() bool {
	switch e {
	case OauthProviderGithub, OauthProviderGitlab, OauthProviderGoogle:
		return true
	}
	return false
}

func (e OauthProvider) String() string {
	return string(e)
}

func (e *OauthProvider) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OauthProvider(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OauthProvider", str)
	}
	return nil
}

func (e OauthProvider) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OauthService string

const (
	OauthServiceZoom OauthService = "ZOOM"
)

var AllOauthService = []OauthService{
	OauthServiceZoom,
}

func (e OauthService) IsValid() bool {
	switch e {
	case OauthServiceZoom:
		return true
	}
	return false
}

func (e OauthService) String() string {
	return string(e)
}

func (e *OauthService) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OauthService(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OauthService", str)
	}
	return nil
}

func (e OauthService) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OidcAuthMethod string

const (
	OidcAuthMethodBasic OidcAuthMethod = "BASIC"
	OidcAuthMethodPost  OidcAuthMethod = "POST"
)

var AllOidcAuthMethod = []OidcAuthMethod{
	OidcAuthMethodBasic,
	OidcAuthMethodPost,
}

func (e OidcAuthMethod) IsValid() bool {
	switch e {
	case OidcAuthMethodBasic, OidcAuthMethodPost:
		return true
	}
	return false
}

func (e OidcAuthMethod) String() string {
	return string(e)
}

func (e *OidcAuthMethod) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OidcAuthMethod(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OidcAuthMethod", str)
	}
	return nil
}

func (e OidcAuthMethod) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OnboardingState string

const (
	OnboardingStateActive    OnboardingState = "ACTIVE"
	OnboardingStateInstalled OnboardingState = "INSTALLED"
	OnboardingStateNew       OnboardingState = "NEW"
	OnboardingStateOnboarded OnboardingState = "ONBOARDED"
)

var AllOnboardingState = []OnboardingState{
	OnboardingStateActive,
	OnboardingStateInstalled,
	OnboardingStateNew,
	OnboardingStateOnboarded,
}

func (e OnboardingState) IsValid() bool {
	switch e {
	case OnboardingStateActive, OnboardingStateInstalled, OnboardingStateNew, OnboardingStateOnboarded:
		return true
	}
	return false
}

func (e OnboardingState) String() string {
	return string(e)
}

func (e *OnboardingState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OnboardingState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OnboardingState", str)
	}
	return nil
}

func (e OnboardingState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Operation string

const (
	OperationEq     Operation = "EQ"
	OperationGt     Operation = "GT"
	OperationGte    Operation = "GTE"
	OperationLt     Operation = "LT"
	OperationLte    Operation = "LTE"
	OperationNot    Operation = "NOT"
	OperationPrefix Operation = "PREFIX"
	OperationSuffix Operation = "SUFFIX"
)

var AllOperation = []Operation{
	OperationEq,
	OperationGt,
	OperationGte,
	OperationLt,
	OperationLte,
	OperationNot,
	OperationPrefix,
	OperationSuffix,
}

func (e Operation) IsValid() bool {
	switch e {
	case OperationEq, OperationGt, OperationGte, OperationLt, OperationLte, OperationNot, OperationPrefix, OperationSuffix:
		return true
	}
	return false
}

func (e Operation) String() string {
	return string(e)
}

func (e *Operation) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Operation(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Operation", str)
	}
	return nil
}

func (e Operation) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Order string

const (
	OrderAsc  Order = "ASC"
	OrderDesc Order = "DESC"
)

var AllOrder = []Order{
	OrderAsc,
	OrderDesc,
}

func (e Order) IsValid() bool {
	switch e {
	case OrderAsc, OrderDesc:
		return true
	}
	return false
}

func (e Order) String() string {
	return string(e)
}

func (e *Order) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Order(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Order", str)
	}
	return nil
}

func (e Order) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Permission string

const (
	PermissionBilling      Permission = "BILLING"
	PermissionInstall      Permission = "INSTALL"
	PermissionIntegrations Permission = "INTEGRATIONS"
	PermissionPublish      Permission = "PUBLISH"
	PermissionSupport      Permission = "SUPPORT"
	PermissionUsers        Permission = "USERS"
)

var AllPermission = []Permission{
	PermissionBilling,
	PermissionInstall,
	PermissionIntegrations,
	PermissionPublish,
	PermissionSupport,
	PermissionUsers,
}

func (e Permission) IsValid() bool {
	switch e {
	case PermissionBilling, PermissionInstall, PermissionIntegrations, PermissionPublish, PermissionSupport, PermissionUsers:
		return true
	}
	return false
}

func (e Permission) String() string {
	return string(e)
}

func (e *Permission) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Permission(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Permission", str)
	}
	return nil
}

func (e Permission) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PlanType string

const (
	PlanTypeLicensed PlanType = "LICENSED"
	PlanTypeMetered  PlanType = "METERED"
)

var AllPlanType = []PlanType{
	PlanTypeLicensed,
	PlanTypeMetered,
}

func (e PlanType) IsValid() bool {
	switch e {
	case PlanTypeLicensed, PlanTypeMetered:
		return true
	}
	return false
}

func (e PlanType) String() string {
	return string(e)
}

func (e *PlanType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PlanType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PlanType", str)
	}
	return nil
}

func (e PlanType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Provider string

const (
	ProviderAws        Provider = "AWS"
	ProviderAzure      Provider = "AZURE"
	ProviderCustom     Provider = "CUSTOM"
	ProviderEquinix    Provider = "EQUINIX"
	ProviderGcp        Provider = "GCP"
	ProviderKind       Provider = "KIND"
	ProviderKubernetes Provider = "KUBERNETES"
)

var AllProvider = []Provider{
	ProviderAws,
	ProviderAzure,
	ProviderCustom,
	ProviderEquinix,
	ProviderGcp,
	ProviderKind,
	ProviderKubernetes,
}

func (e Provider) IsValid() bool {
	switch e {
	case ProviderAws, ProviderAzure, ProviderCustom, ProviderEquinix, ProviderGcp, ProviderKind, ProviderKubernetes:
		return true
	}
	return false
}

func (e Provider) String() string {
	return string(e)
}

func (e *Provider) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Provider(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Provider", str)
	}
	return nil
}

func (e Provider) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RecipeItemType string

const (
	RecipeItemTypeHelm      RecipeItemType = "HELM"
	RecipeItemTypeTerraform RecipeItemType = "TERRAFORM"
)

var AllRecipeItemType = []RecipeItemType{
	RecipeItemTypeHelm,
	RecipeItemTypeTerraform,
}

func (e RecipeItemType) IsValid() bool {
	switch e {
	case RecipeItemTypeHelm, RecipeItemTypeTerraform:
		return true
	}
	return false
}

func (e RecipeItemType) String() string {
	return string(e)
}

func (e *RecipeItemType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RecipeItemType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RecipeItemType", str)
	}
	return nil
}

func (e RecipeItemType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ResetTokenType string

const (
	ResetTokenTypeEmail    ResetTokenType = "EMAIL"
	ResetTokenTypePassword ResetTokenType = "PASSWORD"
)

var AllResetTokenType = []ResetTokenType{
	ResetTokenTypeEmail,
	ResetTokenTypePassword,
}

func (e ResetTokenType) IsValid() bool {
	switch e {
	case ResetTokenTypeEmail, ResetTokenTypePassword:
		return true
	}
	return false
}

func (e ResetTokenType) String() string {
	return string(e)
}

func (e *ResetTokenType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ResetTokenType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ResetTokenType", str)
	}
	return nil
}

func (e ResetTokenType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RolloutStatus string

const (
	RolloutStatusFinished RolloutStatus = "FINISHED"
	RolloutStatusQueued   RolloutStatus = "QUEUED"
	RolloutStatusRunning  RolloutStatus = "RUNNING"
)

var AllRolloutStatus = []RolloutStatus{
	RolloutStatusFinished,
	RolloutStatusQueued,
	RolloutStatusRunning,
}

func (e RolloutStatus) IsValid() bool {
	switch e {
	case RolloutStatusFinished, RolloutStatusQueued, RolloutStatusRunning:
		return true
	}
	return false
}

func (e RolloutStatus) String() string {
	return string(e)
}

func (e *RolloutStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RolloutStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RolloutStatus", str)
	}
	return nil
}

func (e RolloutStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ScmProvider string

const (
	ScmProviderGithub ScmProvider = "GITHUB"
	ScmProviderGitlab ScmProvider = "GITLAB"
)

var AllScmProvider = []ScmProvider{
	ScmProviderGithub,
	ScmProviderGitlab,
}

func (e ScmProvider) IsValid() bool {
	switch e {
	case ScmProviderGithub, ScmProviderGitlab:
		return true
	}
	return false
}

func (e ScmProvider) String() string {
	return string(e)
}

func (e *ScmProvider) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ScmProvider(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ScmProvider", str)
	}
	return nil
}

func (e ScmProvider) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SpecDatatype string

const (
	SpecDatatypeBool   SpecDatatype = "BOOL"
	SpecDatatypeFloat  SpecDatatype = "FLOAT"
	SpecDatatypeInt    SpecDatatype = "INT"
	SpecDatatypeList   SpecDatatype = "LIST"
	SpecDatatypeObject SpecDatatype = "OBJECT"
	SpecDatatypeString SpecDatatype = "STRING"
)

var AllSpecDatatype = []SpecDatatype{
	SpecDatatypeBool,
	SpecDatatypeFloat,
	SpecDatatypeInt,
	SpecDatatypeList,
	SpecDatatypeObject,
	SpecDatatypeString,
}

func (e SpecDatatype) IsValid() bool {
	switch e {
	case SpecDatatypeBool, SpecDatatypeFloat, SpecDatatypeInt, SpecDatatypeList, SpecDatatypeObject, SpecDatatypeString:
		return true
	}
	return false
}

func (e SpecDatatype) String() string {
	return string(e)
}

func (e *SpecDatatype) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SpecDatatype(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SpecDatatype", str)
	}
	return nil
}

func (e SpecDatatype) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TagGroup string

const (
	TagGroupIntegrations TagGroup = "INTEGRATIONS"
	TagGroupRepositories TagGroup = "REPOSITORIES"
)

var AllTagGroup = []TagGroup{
	TagGroupIntegrations,
	TagGroupRepositories,
}

func (e TagGroup) IsValid() bool {
	switch e {
	case TagGroupIntegrations, TagGroupRepositories:
		return true
	}
	return false
}

func (e TagGroup) String() string {
	return string(e)
}

func (e *TagGroup) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TagGroup(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TagGroup", str)
	}
	return nil
}

func (e TagGroup) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TestStatus string

const (
	TestStatusFailed    TestStatus = "FAILED"
	TestStatusQueued    TestStatus = "QUEUED"
	TestStatusRunning   TestStatus = "RUNNING"
	TestStatusSucceeded TestStatus = "SUCCEEDED"
)

var AllTestStatus = []TestStatus{
	TestStatusFailed,
	TestStatusQueued,
	TestStatusRunning,
	TestStatusSucceeded,
}

func (e TestStatus) IsValid() bool {
	switch e {
	case TestStatusFailed, TestStatusQueued, TestStatusRunning, TestStatusSucceeded:
		return true
	}
	return false
}

func (e TestStatus) String() string {
	return string(e)
}

func (e *TestStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TestStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TestStatus", str)
	}
	return nil
}

func (e TestStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TestType string

const (
	TestTypeGit TestType = "GIT"
)

var AllTestType = []TestType{
	TestTypeGit,
}

func (e TestType) IsValid() bool {
	switch e {
	case TestTypeGit:
		return true
	}
	return false
}

func (e TestType) String() string {
	return string(e)
}

func (e *TestType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TestType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TestType", str)
	}
	return nil
}

func (e TestType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UpgradeType string

const (
	UpgradeTypeApproval UpgradeType = "APPROVAL"
	UpgradeTypeBounce   UpgradeType = "BOUNCE"
	UpgradeTypeDeploy   UpgradeType = "DEPLOY"
)

var AllUpgradeType = []UpgradeType{
	UpgradeTypeApproval,
	UpgradeTypeBounce,
	UpgradeTypeDeploy,
}

func (e UpgradeType) IsValid() bool {
	switch e {
	case UpgradeTypeApproval, UpgradeTypeBounce, UpgradeTypeDeploy:
		return true
	}
	return false
}

func (e UpgradeType) String() string {
	return string(e)
}

func (e *UpgradeType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UpgradeType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UpgradeType", str)
	}
	return nil
}

func (e UpgradeType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UserEventStatus string

const (
	UserEventStatusError UserEventStatus = "ERROR"
	UserEventStatusOk    UserEventStatus = "OK"
)

var AllUserEventStatus = []UserEventStatus{
	UserEventStatusError,
	UserEventStatusOk,
}

func (e UserEventStatus) IsValid() bool {
	switch e {
	case UserEventStatusError, UserEventStatusOk:
		return true
	}
	return false
}

func (e UserEventStatus) String() string {
	return string(e)
}

func (e *UserEventStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserEventStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserEventStatus", str)
	}
	return nil
}

func (e UserEventStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ValidationType string

const (
	ValidationTypeRegex ValidationType = "REGEX"
)

var AllValidationType = []ValidationType{
	ValidationTypeRegex,
}

func (e ValidationType) IsValid() bool {
	switch e {
	case ValidationTypeRegex:
		return true
	}
	return false
}

func (e ValidationType) String() string {
	return string(e)
}

func (e *ValidationType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ValidationType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ValidationType", str)
	}
	return nil
}

func (e ValidationType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type VulnGrade string

const (
	VulnGradeCritical VulnGrade = "CRITICAL"
	VulnGradeHigh     VulnGrade = "HIGH"
	VulnGradeLow      VulnGrade = "LOW"
	VulnGradeMedium   VulnGrade = "MEDIUM"
	VulnGradeNone     VulnGrade = "NONE"
)

var AllVulnGrade = []VulnGrade{
	VulnGradeCritical,
	VulnGradeHigh,
	VulnGradeLow,
	VulnGradeMedium,
	VulnGradeNone,
}

func (e VulnGrade) IsValid() bool {
	switch e {
	case VulnGradeCritical, VulnGradeHigh, VulnGradeLow, VulnGradeMedium, VulnGradeNone:
		return true
	}
	return false
}

func (e VulnGrade) String() string {
	return string(e)
}

func (e *VulnGrade) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VulnGrade(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid VulnGrade", str)
	}
	return nil
}

func (e VulnGrade) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type VulnRequirement string

const (
	VulnRequirementNone     VulnRequirement = "NONE"
	VulnRequirementRequired VulnRequirement = "REQUIRED"
)

var AllVulnRequirement = []VulnRequirement{
	VulnRequirementNone,
	VulnRequirementRequired,
}

func (e VulnRequirement) IsValid() bool {
	switch e {
	case VulnRequirementNone, VulnRequirementRequired:
		return true
	}
	return false
}

func (e VulnRequirement) String() string {
	return string(e)
}

func (e *VulnRequirement) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VulnRequirement(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid VulnRequirement", str)
	}
	return nil
}

func (e VulnRequirement) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type VulnVector string

const (
	VulnVectorAdjacent VulnVector = "ADJACENT"
	VulnVectorLocal    VulnVector = "LOCAL"
	VulnVectorNetwork  VulnVector = "NETWORK"
	VulnVectorPhysical VulnVector = "PHYSICAL"
)

var AllVulnVector = []VulnVector{
	VulnVectorAdjacent,
	VulnVectorLocal,
	VulnVectorNetwork,
	VulnVectorPhysical,
}

func (e VulnVector) IsValid() bool {
	switch e {
	case VulnVectorAdjacent, VulnVectorLocal, VulnVectorNetwork, VulnVectorPhysical:
		return true
	}
	return false
}

func (e VulnVector) String() string {
	return string(e)
}

func (e *VulnVector) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VulnVector(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid VulnVector", str)
	}
	return nil
}

func (e VulnVector) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type WebhookLogState string

const (
	WebhookLogStateDelivered WebhookLogState = "DELIVERED"
	WebhookLogStateFailed    WebhookLogState = "FAILED"
	WebhookLogStateSending   WebhookLogState = "SENDING"
)

var AllWebhookLogState = []WebhookLogState{
	WebhookLogStateDelivered,
	WebhookLogStateFailed,
	WebhookLogStateSending,
}

func (e WebhookLogState) IsValid() bool {
	switch e {
	case WebhookLogStateDelivered, WebhookLogStateFailed, WebhookLogStateSending:
		return true
	}
	return false
}

func (e WebhookLogState) String() string {
	return string(e)
}

func (e *WebhookLogState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = WebhookLogState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid WebhookLogState", str)
	}
	return nil
}

func (e WebhookLogState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
