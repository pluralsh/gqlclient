// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package gqlclient

import (
	"context"
	"encoding/json"

	"github.com/Khan/genqlient/graphql"
)

// AcquireLockAcquireLockApplyLock includes the requested fields of the GraphQL type ApplyLock.
type AcquireLockAcquireLockApplyLock struct {
	ApplyLockFragment `json:"-"`
}

// GetId returns AcquireLockAcquireLockApplyLock.Id, and is useful for accessing the field via an interface.
func (v *AcquireLockAcquireLockApplyLock) GetId() string { return v.ApplyLockFragment.Id }

// GetLock returns AcquireLockAcquireLockApplyLock.Lock, and is useful for accessing the field via an interface.
func (v *AcquireLockAcquireLockApplyLock) GetLock() string { return v.ApplyLockFragment.Lock }

func (v *AcquireLockAcquireLockApplyLock) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AcquireLockAcquireLockApplyLock
		graphql.NoUnmarshalJSON
	}
	firstPass.AcquireLockAcquireLockApplyLock = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ApplyLockFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAcquireLockAcquireLockApplyLock struct {
	Id string `json:"id"`

	Lock string `json:"lock"`
}

func (v *AcquireLockAcquireLockApplyLock) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AcquireLockAcquireLockApplyLock) __premarshalJSON() (*__premarshalAcquireLockAcquireLockApplyLock, error) {
	var retval __premarshalAcquireLockAcquireLockApplyLock

	retval.Id = v.ApplyLockFragment.Id
	retval.Lock = v.ApplyLockFragment.Lock
	return &retval, nil
}

// AcquireLockResponse is returned by AcquireLock on success.
type AcquireLockResponse struct {
	AcquireLock AcquireLockAcquireLockApplyLock `json:"acquireLock"`
}

// GetAcquireLock returns AcquireLockResponse.AcquireLock, and is useful for accessing the field via an interface.
func (v *AcquireLockResponse) GetAcquireLock() AcquireLockAcquireLockApplyLock { return v.AcquireLock }

// ApplyLockFragment includes the GraphQL fields of ApplyLock requested by the fragment ApplyLockFragment.
type ApplyLockFragment struct {
	Id   string `json:"id"`
	Lock string `json:"lock"`
}

// GetId returns ApplyLockFragment.Id, and is useful for accessing the field via an interface.
func (v *ApplyLockFragment) GetId() string { return v.Id }

// GetLock returns ApplyLockFragment.Lock, and is useful for accessing the field via an interface.
func (v *ApplyLockFragment) GetLock() string { return v.Lock }

// ArtifactFragment includes the GraphQL fields of Artifact requested by the fragment ArtifactFragment.
type ArtifactFragment struct {
	Id       string           `json:"id"`
	Name     string           `json:"name"`
	Readme   string           `json:"readme"`
	Platform ArtifactPlatform `json:"platform"`
	Arch     string           `json:"arch"`
	Blob     string           `json:"blob"`
	Sha      string           `json:"sha"`
	Filesize int              `json:"filesize"`
}

// GetId returns ArtifactFragment.Id, and is useful for accessing the field via an interface.
func (v *ArtifactFragment) GetId() string { return v.Id }

// GetName returns ArtifactFragment.Name, and is useful for accessing the field via an interface.
func (v *ArtifactFragment) GetName() string { return v.Name }

// GetReadme returns ArtifactFragment.Readme, and is useful for accessing the field via an interface.
func (v *ArtifactFragment) GetReadme() string { return v.Readme }

// GetPlatform returns ArtifactFragment.Platform, and is useful for accessing the field via an interface.
func (v *ArtifactFragment) GetPlatform() ArtifactPlatform { return v.Platform }

// GetArch returns ArtifactFragment.Arch, and is useful for accessing the field via an interface.
func (v *ArtifactFragment) GetArch() string { return v.Arch }

// GetBlob returns ArtifactFragment.Blob, and is useful for accessing the field via an interface.
func (v *ArtifactFragment) GetBlob() string { return v.Blob }

// GetSha returns ArtifactFragment.Sha, and is useful for accessing the field via an interface.
func (v *ArtifactFragment) GetSha() string { return v.Sha }

// GetFilesize returns ArtifactFragment.Filesize, and is useful for accessing the field via an interface.
func (v *ArtifactFragment) GetFilesize() int { return v.Filesize }

type ArtifactPlatform string

const (
	ArtifactPlatformAndroid ArtifactPlatform = "ANDROID"
	ArtifactPlatformFreebsd ArtifactPlatform = "FREEBSD"
	ArtifactPlatformLinux   ArtifactPlatform = "LINUX"
	ArtifactPlatformMac     ArtifactPlatform = "MAC"
	ArtifactPlatformOpenbsd ArtifactPlatform = "OPENBSD"
	ArtifactPlatformSolaris ArtifactPlatform = "SOLARIS"
	ArtifactPlatformWindows ArtifactPlatform = "WINDOWS"
)

type BindingAttributes struct {
	GroupId string `json:"groupId"`
	Id      string `json:"id"`
	UserId  string `json:"userId"`
}

// GetGroupId returns BindingAttributes.GroupId, and is useful for accessing the field via an interface.
func (v *BindingAttributes) GetGroupId() string { return v.GroupId }

// GetId returns BindingAttributes.Id, and is useful for accessing the field via an interface.
func (v *BindingAttributes) GetId() string { return v.Id }

// GetUserId returns BindingAttributes.UserId, and is useful for accessing the field via an interface.
func (v *BindingAttributes) GetUserId() string { return v.UserId }

type Category string

const (
	CategoryData         Category = "DATA"
	CategoryDatabase     Category = "DATABASE"
	CategoryDevops       Category = "DEVOPS"
	CategoryMessaging    Category = "MESSAGING"
	CategoryNetwork      Category = "NETWORK"
	CategoryProductivity Category = "PRODUCTIVITY"
	CategorySecurity     Category = "SECURITY"
	CategoryStorage      Category = "STORAGE"
)

// ChartFragment includes the GraphQL fields of Chart requested by the fragment ChartFragment.
type ChartFragment struct {
	Id            string `json:"id"`
	Name          string `json:"name"`
	Description   string `json:"description"`
	LatestVersion string `json:"latestVersion"`
}

// GetId returns ChartFragment.Id, and is useful for accessing the field via an interface.
func (v *ChartFragment) GetId() string { return v.Id }

// GetName returns ChartFragment.Name, and is useful for accessing the field via an interface.
func (v *ChartFragment) GetName() string { return v.Name }

// GetDescription returns ChartFragment.Description, and is useful for accessing the field via an interface.
func (v *ChartFragment) GetDescription() string { return v.Description }

// GetLatestVersion returns ChartFragment.LatestVersion, and is useful for accessing the field via an interface.
func (v *ChartFragment) GetLatestVersion() string { return v.LatestVersion }

// ChartInstallationFragment includes the GraphQL fields of ChartInstallation requested by the fragment ChartInstallationFragment.
type ChartInstallationFragment struct {
	Id      string                           `json:"id"`
	Chart   ChartInstallationFragmentChart   `json:"chart"`
	Version ChartInstallationFragmentVersion `json:"version"`
}

// GetId returns ChartInstallationFragment.Id, and is useful for accessing the field via an interface.
func (v *ChartInstallationFragment) GetId() string { return v.Id }

// GetChart returns ChartInstallationFragment.Chart, and is useful for accessing the field via an interface.
func (v *ChartInstallationFragment) GetChart() ChartInstallationFragmentChart { return v.Chart }

// GetVersion returns ChartInstallationFragment.Version, and is useful for accessing the field via an interface.
func (v *ChartInstallationFragment) GetVersion() ChartInstallationFragmentVersion { return v.Version }

// ChartInstallationFragmentChart includes the requested fields of the GraphQL type Chart.
type ChartInstallationFragmentChart struct {
	ChartFragment `json:"-"`
	Dependencies  ChartInstallationFragmentChartDependencies `json:"dependencies"`
}

// GetDependencies returns ChartInstallationFragmentChart.Dependencies, and is useful for accessing the field via an interface.
func (v *ChartInstallationFragmentChart) GetDependencies() ChartInstallationFragmentChartDependencies {
	return v.Dependencies
}

// GetId returns ChartInstallationFragmentChart.Id, and is useful for accessing the field via an interface.
func (v *ChartInstallationFragmentChart) GetId() string { return v.ChartFragment.Id }

// GetName returns ChartInstallationFragmentChart.Name, and is useful for accessing the field via an interface.
func (v *ChartInstallationFragmentChart) GetName() string { return v.ChartFragment.Name }

// GetDescription returns ChartInstallationFragmentChart.Description, and is useful for accessing the field via an interface.
func (v *ChartInstallationFragmentChart) GetDescription() string { return v.ChartFragment.Description }

// GetLatestVersion returns ChartInstallationFragmentChart.LatestVersion, and is useful for accessing the field via an interface.
func (v *ChartInstallationFragmentChart) GetLatestVersion() string {
	return v.ChartFragment.LatestVersion
}

func (v *ChartInstallationFragmentChart) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ChartInstallationFragmentChart
		graphql.NoUnmarshalJSON
	}
	firstPass.ChartInstallationFragmentChart = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ChartFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalChartInstallationFragmentChart struct {
	Dependencies ChartInstallationFragmentChartDependencies `json:"dependencies"`

	Id string `json:"id"`

	Name string `json:"name"`

	Description string `json:"description"`

	LatestVersion string `json:"latestVersion"`
}

func (v *ChartInstallationFragmentChart) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ChartInstallationFragmentChart) __premarshalJSON() (*__premarshalChartInstallationFragmentChart, error) {
	var retval __premarshalChartInstallationFragmentChart

	retval.Dependencies = v.Dependencies
	retval.Id = v.ChartFragment.Id
	retval.Name = v.ChartFragment.Name
	retval.Description = v.ChartFragment.Description
	retval.LatestVersion = v.ChartFragment.LatestVersion
	return &retval, nil
}

// ChartInstallationFragmentChartDependencies includes the requested fields of the GraphQL type Dependencies.
type ChartInstallationFragmentChartDependencies struct {
	DependenciesFragment `json:"-"`
}

// GetDependencies returns ChartInstallationFragmentChartDependencies.Dependencies, and is useful for accessing the field via an interface.
func (v *ChartInstallationFragmentChartDependencies) GetDependencies() []DependenciesFragmentDependenciesDependency {
	return v.DependenciesFragment.Dependencies
}

// GetWait returns ChartInstallationFragmentChartDependencies.Wait, and is useful for accessing the field via an interface.
func (v *ChartInstallationFragmentChartDependencies) GetWait() bool {
	return v.DependenciesFragment.Wait
}

// GetApplication returns ChartInstallationFragmentChartDependencies.Application, and is useful for accessing the field via an interface.
func (v *ChartInstallationFragmentChartDependencies) GetApplication() bool {
	return v.DependenciesFragment.Application
}

// GetProviders returns ChartInstallationFragmentChartDependencies.Providers, and is useful for accessing the field via an interface.
func (v *ChartInstallationFragmentChartDependencies) GetProviders() []Provider {
	return v.DependenciesFragment.Providers
}

// GetSecrets returns ChartInstallationFragmentChartDependencies.Secrets, and is useful for accessing the field via an interface.
func (v *ChartInstallationFragmentChartDependencies) GetSecrets() []string {
	return v.DependenciesFragment.Secrets
}

// GetWirings returns ChartInstallationFragmentChartDependencies.Wirings, and is useful for accessing the field via an interface.
func (v *ChartInstallationFragmentChartDependencies) GetWirings() DependenciesFragmentWirings {
	return v.DependenciesFragment.Wirings
}

// GetProviderWirings returns ChartInstallationFragmentChartDependencies.ProviderWirings, and is useful for accessing the field via an interface.
func (v *ChartInstallationFragmentChartDependencies) GetProviderWirings() map[string]interface{} {
	return v.DependenciesFragment.ProviderWirings
}

// GetOutputs returns ChartInstallationFragmentChartDependencies.Outputs, and is useful for accessing the field via an interface.
func (v *ChartInstallationFragmentChartDependencies) GetOutputs() map[string]interface{} {
	return v.DependenciesFragment.Outputs
}

func (v *ChartInstallationFragmentChartDependencies) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ChartInstallationFragmentChartDependencies
		graphql.NoUnmarshalJSON
	}
	firstPass.ChartInstallationFragmentChartDependencies = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DependenciesFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalChartInstallationFragmentChartDependencies struct {
	Dependencies []DependenciesFragmentDependenciesDependency `json:"dependencies"`

	Wait bool `json:"wait"`

	Application bool `json:"application"`

	Providers []Provider `json:"providers"`

	Secrets []string `json:"secrets"`

	Wirings DependenciesFragmentWirings `json:"wirings"`

	ProviderWirings map[string]interface{} `json:"providerWirings"`

	Outputs map[string]interface{} `json:"outputs"`
}

func (v *ChartInstallationFragmentChartDependencies) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ChartInstallationFragmentChartDependencies) __premarshalJSON() (*__premarshalChartInstallationFragmentChartDependencies, error) {
	var retval __premarshalChartInstallationFragmentChartDependencies

	retval.Dependencies = v.DependenciesFragment.Dependencies
	retval.Wait = v.DependenciesFragment.Wait
	retval.Application = v.DependenciesFragment.Application
	retval.Providers = v.DependenciesFragment.Providers
	retval.Secrets = v.DependenciesFragment.Secrets
	retval.Wirings = v.DependenciesFragment.Wirings
	retval.ProviderWirings = v.DependenciesFragment.ProviderWirings
	retval.Outputs = v.DependenciesFragment.Outputs
	return &retval, nil
}

// ChartInstallationFragmentVersion includes the requested fields of the GraphQL type Version.
type ChartInstallationFragmentVersion struct {
	VersionFragment `json:"-"`
}

// GetId returns ChartInstallationFragmentVersion.Id, and is useful for accessing the field via an interface.
func (v *ChartInstallationFragmentVersion) GetId() string { return v.VersionFragment.Id }

// GetReadme returns ChartInstallationFragmentVersion.Readme, and is useful for accessing the field via an interface.
func (v *ChartInstallationFragmentVersion) GetReadme() string { return v.VersionFragment.Readme }

// GetVersion returns ChartInstallationFragmentVersion.Version, and is useful for accessing the field via an interface.
func (v *ChartInstallationFragmentVersion) GetVersion() string { return v.VersionFragment.Version }

// GetValuesTemplate returns ChartInstallationFragmentVersion.ValuesTemplate, and is useful for accessing the field via an interface.
func (v *ChartInstallationFragmentVersion) GetValuesTemplate() string {
	return v.VersionFragment.ValuesTemplate
}

// GetPackage returns ChartInstallationFragmentVersion.Package, and is useful for accessing the field via an interface.
func (v *ChartInstallationFragmentVersion) GetPackage() string { return v.VersionFragment.Package }

// GetCrds returns ChartInstallationFragmentVersion.Crds, and is useful for accessing the field via an interface.
func (v *ChartInstallationFragmentVersion) GetCrds() []VersionFragmentCrdsCrd {
	return v.VersionFragment.Crds
}

// GetDependencies returns ChartInstallationFragmentVersion.Dependencies, and is useful for accessing the field via an interface.
func (v *ChartInstallationFragmentVersion) GetDependencies() VersionFragmentDependencies {
	return v.VersionFragment.Dependencies
}

func (v *ChartInstallationFragmentVersion) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ChartInstallationFragmentVersion
		graphql.NoUnmarshalJSON
	}
	firstPass.ChartInstallationFragmentVersion = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.VersionFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalChartInstallationFragmentVersion struct {
	Id string `json:"id"`

	Readme string `json:"readme"`

	Version string `json:"version"`

	ValuesTemplate string `json:"valuesTemplate"`

	Package string `json:"package"`

	Crds []VersionFragmentCrdsCrd `json:"crds"`

	Dependencies VersionFragmentDependencies `json:"dependencies"`
}

func (v *ChartInstallationFragmentVersion) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ChartInstallationFragmentVersion) __premarshalJSON() (*__premarshalChartInstallationFragmentVersion, error) {
	var retval __premarshalChartInstallationFragmentVersion

	retval.Id = v.VersionFragment.Id
	retval.Readme = v.VersionFragment.Readme
	retval.Version = v.VersionFragment.Version
	retval.ValuesTemplate = v.VersionFragment.ValuesTemplate
	retval.Package = v.VersionFragment.Package
	retval.Crds = v.VersionFragment.Crds
	retval.Dependencies = v.VersionFragment.Dependencies
	return &retval, nil
}

type ChartName struct {
	Chart string `json:"chart"`
	Repo  string `json:"repo"`
}

// GetChart returns ChartName.Chart, and is useful for accessing the field via an interface.
func (v *ChartName) GetChart() string { return v.Chart }

// GetRepo returns ChartName.Repo, and is useful for accessing the field via an interface.
func (v *ChartName) GetRepo() string { return v.Repo }

// CloudShellFragment includes the GraphQL fields of CloudShell requested by the fragment CloudShellFragment.
type CloudShellFragment struct {
	Id     string `json:"id"`
	AesKey string `json:"aesKey"`
	GitUrl string `json:"gitUrl"`
}

// GetId returns CloudShellFragment.Id, and is useful for accessing the field via an interface.
func (v *CloudShellFragment) GetId() string { return v.Id }

// GetAesKey returns CloudShellFragment.AesKey, and is useful for accessing the field via an interface.
func (v *CloudShellFragment) GetAesKey() string { return v.AesKey }

// GetGitUrl returns CloudShellFragment.GitUrl, and is useful for accessing the field via an interface.
func (v *CloudShellFragment) GetGitUrl() string { return v.GitUrl }

// CrdFragment includes the GraphQL fields of Crd requested by the fragment CrdFragment.
type CrdFragment struct {
	Id   string `json:"id"`
	Name string `json:"name"`
	Blob string `json:"blob"`
}

// GetId returns CrdFragment.Id, and is useful for accessing the field via an interface.
func (v *CrdFragment) GetId() string { return v.Id }

// GetName returns CrdFragment.Name, and is useful for accessing the field via an interface.
func (v *CrdFragment) GetName() string { return v.Name }

// GetBlob returns CrdFragment.Blob, and is useful for accessing the field via an interface.
func (v *CrdFragment) GetBlob() string { return v.Blob }

// CreateAccessTokenCreateTokenPersistedToken includes the requested fields of the GraphQL type PersistedToken.
type CreateAccessTokenCreateTokenPersistedToken struct {
	Token string `json:"token"`
}

// GetToken returns CreateAccessTokenCreateTokenPersistedToken.Token, and is useful for accessing the field via an interface.
func (v *CreateAccessTokenCreateTokenPersistedToken) GetToken() string { return v.Token }

// CreateAccessTokenResponse is returned by CreateAccessToken on success.
type CreateAccessTokenResponse struct {
	CreateToken CreateAccessTokenCreateTokenPersistedToken `json:"createToken"`
}

// GetCreateToken returns CreateAccessTokenResponse.CreateToken, and is useful for accessing the field via an interface.
func (v *CreateAccessTokenResponse) GetCreateToken() CreateAccessTokenCreateTokenPersistedToken {
	return v.CreateToken
}

// CreateArtifactCreateArtifact includes the requested fields of the GraphQL type Artifact.
type CreateArtifactCreateArtifact struct {
	ArtifactFragment `json:"-"`
}

// GetId returns CreateArtifactCreateArtifact.Id, and is useful for accessing the field via an interface.
func (v *CreateArtifactCreateArtifact) GetId() string { return v.ArtifactFragment.Id }

// GetName returns CreateArtifactCreateArtifact.Name, and is useful for accessing the field via an interface.
func (v *CreateArtifactCreateArtifact) GetName() string { return v.ArtifactFragment.Name }

// GetReadme returns CreateArtifactCreateArtifact.Readme, and is useful for accessing the field via an interface.
func (v *CreateArtifactCreateArtifact) GetReadme() string { return v.ArtifactFragment.Readme }

// GetPlatform returns CreateArtifactCreateArtifact.Platform, and is useful for accessing the field via an interface.
func (v *CreateArtifactCreateArtifact) GetPlatform() ArtifactPlatform {
	return v.ArtifactFragment.Platform
}

// GetArch returns CreateArtifactCreateArtifact.Arch, and is useful for accessing the field via an interface.
func (v *CreateArtifactCreateArtifact) GetArch() string { return v.ArtifactFragment.Arch }

// GetBlob returns CreateArtifactCreateArtifact.Blob, and is useful for accessing the field via an interface.
func (v *CreateArtifactCreateArtifact) GetBlob() string { return v.ArtifactFragment.Blob }

// GetSha returns CreateArtifactCreateArtifact.Sha, and is useful for accessing the field via an interface.
func (v *CreateArtifactCreateArtifact) GetSha() string { return v.ArtifactFragment.Sha }

// GetFilesize returns CreateArtifactCreateArtifact.Filesize, and is useful for accessing the field via an interface.
func (v *CreateArtifactCreateArtifact) GetFilesize() int { return v.ArtifactFragment.Filesize }

func (v *CreateArtifactCreateArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateArtifactCreateArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateArtifactCreateArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ArtifactFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateArtifactCreateArtifact struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Readme string `json:"readme"`

	Platform ArtifactPlatform `json:"platform"`

	Arch string `json:"arch"`

	Blob string `json:"blob"`

	Sha string `json:"sha"`

	Filesize int `json:"filesize"`
}

func (v *CreateArtifactCreateArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateArtifactCreateArtifact) __premarshalJSON() (*__premarshalCreateArtifactCreateArtifact, error) {
	var retval __premarshalCreateArtifactCreateArtifact

	retval.Id = v.ArtifactFragment.Id
	retval.Name = v.ArtifactFragment.Name
	retval.Readme = v.ArtifactFragment.Readme
	retval.Platform = v.ArtifactFragment.Platform
	retval.Arch = v.ArtifactFragment.Arch
	retval.Blob = v.ArtifactFragment.Blob
	retval.Sha = v.ArtifactFragment.Sha
	retval.Filesize = v.ArtifactFragment.Filesize
	return &retval, nil
}

// CreateArtifactResponse is returned by CreateArtifact on success.
type CreateArtifactResponse struct {
	CreateArtifact CreateArtifactCreateArtifact `json:"createArtifact"`
}

// GetCreateArtifact returns CreateArtifactResponse.CreateArtifact, and is useful for accessing the field via an interface.
func (v *CreateArtifactResponse) GetCreateArtifact() CreateArtifactCreateArtifact {
	return v.CreateArtifact
}

// CreateCrdCreateCrd includes the requested fields of the GraphQL type Crd.
type CreateCrdCreateCrd struct {
	Id string `json:"id"`
}

// GetId returns CreateCrdCreateCrd.Id, and is useful for accessing the field via an interface.
func (v *CreateCrdCreateCrd) GetId() string { return v.Id }

// CreateCrdResponse is returned by CreateCrd on success.
type CreateCrdResponse struct {
	CreateCrd CreateCrdCreateCrd `json:"createCrd"`
}

// GetCreateCrd returns CreateCrdResponse.CreateCrd, and is useful for accessing the field via an interface.
func (v *CreateCrdResponse) GetCreateCrd() CreateCrdCreateCrd { return v.CreateCrd }

// CreateDomainProvisionDomainDnsDomain includes the requested fields of the GraphQL type DnsDomain.
type CreateDomainProvisionDomainDnsDomain struct {
	DnsDomainFragment `json:"-"`
}

// GetId returns CreateDomainProvisionDomainDnsDomain.Id, and is useful for accessing the field via an interface.
func (v *CreateDomainProvisionDomainDnsDomain) GetId() string { return v.DnsDomainFragment.Id }

// GetName returns CreateDomainProvisionDomainDnsDomain.Name, and is useful for accessing the field via an interface.
func (v *CreateDomainProvisionDomainDnsDomain) GetName() string { return v.DnsDomainFragment.Name }

func (v *CreateDomainProvisionDomainDnsDomain) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateDomainProvisionDomainDnsDomain
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateDomainProvisionDomainDnsDomain = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DnsDomainFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateDomainProvisionDomainDnsDomain struct {
	Id string `json:"id"`

	Name string `json:"name"`
}

func (v *CreateDomainProvisionDomainDnsDomain) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateDomainProvisionDomainDnsDomain) __premarshalJSON() (*__premarshalCreateDomainProvisionDomainDnsDomain, error) {
	var retval __premarshalCreateDomainProvisionDomainDnsDomain

	retval.Id = v.DnsDomainFragment.Id
	retval.Name = v.DnsDomainFragment.Name
	return &retval, nil
}

// CreateDomainResponse is returned by CreateDomain on success.
type CreateDomainResponse struct {
	ProvisionDomain CreateDomainProvisionDomainDnsDomain `json:"provisionDomain"`
}

// GetProvisionDomain returns CreateDomainResponse.ProvisionDomain, and is useful for accessing the field via an interface.
func (v *CreateDomainResponse) GetProvisionDomain() CreateDomainProvisionDomainDnsDomain {
	return v.ProvisionDomain
}

// CreateEventResponse is returned by CreateEvent on success.
type CreateEventResponse struct {
	CreateUserEvent bool `json:"createUserEvent"`
}

// GetCreateUserEvent returns CreateEventResponse.CreateUserEvent, and is useful for accessing the field via an interface.
func (v *CreateEventResponse) GetCreateUserEvent() bool { return v.CreateUserEvent }

// CreateIntegrationCreateIntegration includes the requested fields of the GraphQL type Integration.
type CreateIntegrationCreateIntegration struct {
	Id string `json:"id"`
}

// GetId returns CreateIntegrationCreateIntegration.Id, and is useful for accessing the field via an interface.
func (v *CreateIntegrationCreateIntegration) GetId() string { return v.Id }

// CreateIntegrationResponse is returned by CreateIntegration on success.
type CreateIntegrationResponse struct {
	CreateIntegration CreateIntegrationCreateIntegration `json:"createIntegration"`
}

// GetCreateIntegration returns CreateIntegrationResponse.CreateIntegration, and is useful for accessing the field via an interface.
func (v *CreateIntegrationResponse) GetCreateIntegration() CreateIntegrationCreateIntegration {
	return v.CreateIntegration
}

// CreateKeyCreatePublicKey includes the requested fields of the GraphQL type PublicKey.
type CreateKeyCreatePublicKey struct {
	Id string `json:"id"`
}

// GetId returns CreateKeyCreatePublicKey.Id, and is useful for accessing the field via an interface.
func (v *CreateKeyCreatePublicKey) GetId() string { return v.Id }

// CreateKeyResponse is returned by CreateKey on success.
type CreateKeyResponse struct {
	CreatePublicKey CreateKeyCreatePublicKey `json:"createPublicKey"`
}

// GetCreatePublicKey returns CreateKeyResponse.CreatePublicKey, and is useful for accessing the field via an interface.
func (v *CreateKeyResponse) GetCreatePublicKey() CreateKeyCreatePublicKey { return v.CreatePublicKey }

// CreateRecipeCreateRecipe includes the requested fields of the GraphQL type Recipe.
type CreateRecipeCreateRecipe struct {
	Id string `json:"id"`
}

// GetId returns CreateRecipeCreateRecipe.Id, and is useful for accessing the field via an interface.
func (v *CreateRecipeCreateRecipe) GetId() string { return v.Id }

// CreateRecipeResponse is returned by CreateRecipe on success.
type CreateRecipeResponse struct {
	CreateRecipe CreateRecipeCreateRecipe `json:"createRecipe"`
}

// GetCreateRecipe returns CreateRecipeResponse.CreateRecipe, and is useful for accessing the field via an interface.
func (v *CreateRecipeResponse) GetCreateRecipe() CreateRecipeCreateRecipe { return v.CreateRecipe }

// CreateRepositoryResponse is returned by CreateRepository on success.
type CreateRepositoryResponse struct {
	UpsertRepository CreateRepositoryUpsertRepository `json:"upsertRepository"`
}

// GetUpsertRepository returns CreateRepositoryResponse.UpsertRepository, and is useful for accessing the field via an interface.
func (v *CreateRepositoryResponse) GetUpsertRepository() CreateRepositoryUpsertRepository {
	return v.UpsertRepository
}

// CreateRepositoryUpsertRepository includes the requested fields of the GraphQL type Repository.
type CreateRepositoryUpsertRepository struct {
	Id string `json:"id"`
}

// GetId returns CreateRepositoryUpsertRepository.Id, and is useful for accessing the field via an interface.
func (v *CreateRepositoryUpsertRepository) GetId() string { return v.Id }

// CreateResourceDefinitionResponse is returned by CreateResourceDefinition on success.
type CreateResourceDefinitionResponse struct {
	UpdateRepository CreateResourceDefinitionUpdateRepository `json:"updateRepository"`
}

// GetUpdateRepository returns CreateResourceDefinitionResponse.UpdateRepository, and is useful for accessing the field via an interface.
func (v *CreateResourceDefinitionResponse) GetUpdateRepository() CreateResourceDefinitionUpdateRepository {
	return v.UpdateRepository
}

// CreateResourceDefinitionUpdateRepository includes the requested fields of the GraphQL type Repository.
type CreateResourceDefinitionUpdateRepository struct {
	Id string `json:"id"`
}

// GetId returns CreateResourceDefinitionUpdateRepository.Id, and is useful for accessing the field via an interface.
func (v *CreateResourceDefinitionUpdateRepository) GetId() string { return v.Id }

type Datatype string

const (
	DatatypeBool     Datatype = "BOOL"
	DatatypeBucket   Datatype = "BUCKET"
	DatatypeDomain   Datatype = "DOMAIN"
	DatatypeFile     Datatype = "FILE"
	DatatypeFunction Datatype = "FUNCTION"
	DatatypeInt      Datatype = "INT"
	DatatypePassword Datatype = "PASSWORD"
	DatatypeString   Datatype = "STRING"
)

// DeleteEabCredentialDeleteEabKeyEabCredential includes the requested fields of the GraphQL type EabCredential.
type DeleteEabCredentialDeleteEabKeyEabCredential struct {
	Id string `json:"id"`
}

// GetId returns DeleteEabCredentialDeleteEabKeyEabCredential.Id, and is useful for accessing the field via an interface.
func (v *DeleteEabCredentialDeleteEabKeyEabCredential) GetId() string { return v.Id }

// DeleteEabCredentialResponse is returned by DeleteEabCredential on success.
type DeleteEabCredentialResponse struct {
	DeleteEabKey DeleteEabCredentialDeleteEabKeyEabCredential `json:"deleteEabKey"`
}

// GetDeleteEabKey returns DeleteEabCredentialResponse.DeleteEabKey, and is useful for accessing the field via an interface.
func (v *DeleteEabCredentialResponse) GetDeleteEabKey() DeleteEabCredentialDeleteEabKeyEabCredential {
	return v.DeleteEabKey
}

// DeleteShellDeleteShellCloudShell includes the requested fields of the GraphQL type CloudShell.
type DeleteShellDeleteShellCloudShell struct {
	CloudShellFragment `json:"-"`
}

// GetId returns DeleteShellDeleteShellCloudShell.Id, and is useful for accessing the field via an interface.
func (v *DeleteShellDeleteShellCloudShell) GetId() string { return v.CloudShellFragment.Id }

// GetAesKey returns DeleteShellDeleteShellCloudShell.AesKey, and is useful for accessing the field via an interface.
func (v *DeleteShellDeleteShellCloudShell) GetAesKey() string { return v.CloudShellFragment.AesKey }

// GetGitUrl returns DeleteShellDeleteShellCloudShell.GitUrl, and is useful for accessing the field via an interface.
func (v *DeleteShellDeleteShellCloudShell) GetGitUrl() string { return v.CloudShellFragment.GitUrl }

func (v *DeleteShellDeleteShellCloudShell) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DeleteShellDeleteShellCloudShell
		graphql.NoUnmarshalJSON
	}
	firstPass.DeleteShellDeleteShellCloudShell = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.CloudShellFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalDeleteShellDeleteShellCloudShell struct {
	Id string `json:"id"`

	AesKey string `json:"aesKey"`

	GitUrl string `json:"gitUrl"`
}

func (v *DeleteShellDeleteShellCloudShell) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DeleteShellDeleteShellCloudShell) __premarshalJSON() (*__premarshalDeleteShellDeleteShellCloudShell, error) {
	var retval __premarshalDeleteShellDeleteShellCloudShell

	retval.Id = v.CloudShellFragment.Id
	retval.AesKey = v.CloudShellFragment.AesKey
	retval.GitUrl = v.CloudShellFragment.GitUrl
	return &retval, nil
}

// DeleteShellResponse is returned by DeleteShell on success.
type DeleteShellResponse struct {
	DeleteShell DeleteShellDeleteShellCloudShell `json:"deleteShell"`
}

// GetDeleteShell returns DeleteShellResponse.DeleteShell, and is useful for accessing the field via an interface.
func (v *DeleteShellResponse) GetDeleteShell() DeleteShellDeleteShellCloudShell { return v.DeleteShell }

// DependenciesFragment includes the GraphQL fields of Dependencies requested by the fragment DependenciesFragment.
type DependenciesFragment struct {
	Dependencies    []DependenciesFragmentDependenciesDependency `json:"dependencies"`
	Wait            bool                                         `json:"wait"`
	Application     bool                                         `json:"application"`
	Providers       []Provider                                   `json:"providers"`
	Secrets         []string                                     `json:"secrets"`
	Wirings         DependenciesFragmentWirings                  `json:"wirings"`
	ProviderWirings map[string]interface{}                       `json:"providerWirings"`
	Outputs         map[string]interface{}                       `json:"outputs"`
}

// GetDependencies returns DependenciesFragment.Dependencies, and is useful for accessing the field via an interface.
func (v *DependenciesFragment) GetDependencies() []DependenciesFragmentDependenciesDependency {
	return v.Dependencies
}

// GetWait returns DependenciesFragment.Wait, and is useful for accessing the field via an interface.
func (v *DependenciesFragment) GetWait() bool { return v.Wait }

// GetApplication returns DependenciesFragment.Application, and is useful for accessing the field via an interface.
func (v *DependenciesFragment) GetApplication() bool { return v.Application }

// GetProviders returns DependenciesFragment.Providers, and is useful for accessing the field via an interface.
func (v *DependenciesFragment) GetProviders() []Provider { return v.Providers }

// GetSecrets returns DependenciesFragment.Secrets, and is useful for accessing the field via an interface.
func (v *DependenciesFragment) GetSecrets() []string { return v.Secrets }

// GetWirings returns DependenciesFragment.Wirings, and is useful for accessing the field via an interface.
func (v *DependenciesFragment) GetWirings() DependenciesFragmentWirings { return v.Wirings }

// GetProviderWirings returns DependenciesFragment.ProviderWirings, and is useful for accessing the field via an interface.
func (v *DependenciesFragment) GetProviderWirings() map[string]interface{} { return v.ProviderWirings }

// GetOutputs returns DependenciesFragment.Outputs, and is useful for accessing the field via an interface.
func (v *DependenciesFragment) GetOutputs() map[string]interface{} { return v.Outputs }

// DependenciesFragmentDependenciesDependency includes the requested fields of the GraphQL type Dependency.
type DependenciesFragmentDependenciesDependency struct {
	Type DependencyType `json:"type"`
	Name string         `json:"name"`
	Repo string         `json:"repo"`
}

// GetType returns DependenciesFragmentDependenciesDependency.Type, and is useful for accessing the field via an interface.
func (v *DependenciesFragmentDependenciesDependency) GetType() DependencyType { return v.Type }

// GetName returns DependenciesFragmentDependenciesDependency.Name, and is useful for accessing the field via an interface.
func (v *DependenciesFragmentDependenciesDependency) GetName() string { return v.Name }

// GetRepo returns DependenciesFragmentDependenciesDependency.Repo, and is useful for accessing the field via an interface.
func (v *DependenciesFragmentDependenciesDependency) GetRepo() string { return v.Repo }

// DependenciesFragmentWirings includes the requested fields of the GraphQL type Wirings.
type DependenciesFragmentWirings struct {
	Terraform map[string]interface{} `json:"terraform"`
	Helm      map[string]interface{} `json:"helm"`
}

// GetTerraform returns DependenciesFragmentWirings.Terraform, and is useful for accessing the field via an interface.
func (v *DependenciesFragmentWirings) GetTerraform() map[string]interface{} { return v.Terraform }

// GetHelm returns DependenciesFragmentWirings.Helm, and is useful for accessing the field via an interface.
func (v *DependenciesFragmentWirings) GetHelm() map[string]interface{} { return v.Helm }

type DependencyType string

const (
	DependencyTypeHelm      DependencyType = "HELM"
	DependencyTypeTerraform DependencyType = "TERRAFORM"
)

// DeviceLoginDeviceLogin includes the requested fields of the GraphQL type DeviceLogin.
type DeviceLoginDeviceLogin struct {
	LoginUrl    string `json:"loginUrl"`
	DeviceToken string `json:"deviceToken"`
}

// GetLoginUrl returns DeviceLoginDeviceLogin.LoginUrl, and is useful for accessing the field via an interface.
func (v *DeviceLoginDeviceLogin) GetLoginUrl() string { return v.LoginUrl }

// GetDeviceToken returns DeviceLoginDeviceLogin.DeviceToken, and is useful for accessing the field via an interface.
func (v *DeviceLoginDeviceLogin) GetDeviceToken() string { return v.DeviceToken }

// DeviceLoginResponse is returned by DeviceLogin on success.
type DeviceLoginResponse struct {
	DeviceLogin DeviceLoginDeviceLogin `json:"deviceLogin"`
}

// GetDeviceLogin returns DeviceLoginResponse.DeviceLogin, and is useful for accessing the field via an interface.
func (v *DeviceLoginResponse) GetDeviceLogin() DeviceLoginDeviceLogin { return v.DeviceLogin }

// DnsDomainFragment includes the GraphQL fields of DnsDomain requested by the fragment DnsDomainFragment.
type DnsDomainFragment struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

// GetId returns DnsDomainFragment.Id, and is useful for accessing the field via an interface.
func (v *DnsDomainFragment) GetId() string { return v.Id }

// GetName returns DnsDomainFragment.Name, and is useful for accessing the field via an interface.
func (v *DnsDomainFragment) GetName() string { return v.Name }

// EabCredentialFragment includes the GraphQL fields of EabCredential requested by the fragment EabCredentialFragment.
type EabCredentialFragment struct {
	Id       string   `json:"id"`
	KeyId    string   `json:"keyId"`
	HmacKey  string   `json:"hmacKey"`
	Cluster  string   `json:"cluster"`
	Provider Provider `json:"provider"`
}

// GetId returns EabCredentialFragment.Id, and is useful for accessing the field via an interface.
func (v *EabCredentialFragment) GetId() string { return v.Id }

// GetKeyId returns EabCredentialFragment.KeyId, and is useful for accessing the field via an interface.
func (v *EabCredentialFragment) GetKeyId() string { return v.KeyId }

// GetHmacKey returns EabCredentialFragment.HmacKey, and is useful for accessing the field via an interface.
func (v *EabCredentialFragment) GetHmacKey() string { return v.HmacKey }

// GetCluster returns EabCredentialFragment.Cluster, and is useful for accessing the field via an interface.
func (v *EabCredentialFragment) GetCluster() string { return v.Cluster }

// GetProvider returns EabCredentialFragment.Provider, and is useful for accessing the field via an interface.
func (v *EabCredentialFragment) GetProvider() Provider { return v.Provider }

// GetChartInstallationsChartInstallationsChartInstallationConnection includes the requested fields of the GraphQL type ChartInstallationConnection.
type GetChartInstallationsChartInstallationsChartInstallationConnection struct {
	Edges []GetChartInstallationsChartInstallationsChartInstallationConnectionEdgesChartInstallationEdge `json:"edges"`
}

// GetEdges returns GetChartInstallationsChartInstallationsChartInstallationConnection.Edges, and is useful for accessing the field via an interface.
func (v *GetChartInstallationsChartInstallationsChartInstallationConnection) GetEdges() []GetChartInstallationsChartInstallationsChartInstallationConnectionEdgesChartInstallationEdge {
	return v.Edges
}

// GetChartInstallationsChartInstallationsChartInstallationConnectionEdgesChartInstallationEdge includes the requested fields of the GraphQL type ChartInstallationEdge.
type GetChartInstallationsChartInstallationsChartInstallationConnectionEdgesChartInstallationEdge struct {
	Node GetChartInstallationsChartInstallationsChartInstallationConnectionEdgesChartInstallationEdgeNodeChartInstallation `json:"node"`
}

// GetNode returns GetChartInstallationsChartInstallationsChartInstallationConnectionEdgesChartInstallationEdge.Node, and is useful for accessing the field via an interface.
func (v *GetChartInstallationsChartInstallationsChartInstallationConnectionEdgesChartInstallationEdge) GetNode() GetChartInstallationsChartInstallationsChartInstallationConnectionEdgesChartInstallationEdgeNodeChartInstallation {
	return v.Node
}

// GetChartInstallationsChartInstallationsChartInstallationConnectionEdgesChartInstallationEdgeNodeChartInstallation includes the requested fields of the GraphQL type ChartInstallation.
type GetChartInstallationsChartInstallationsChartInstallationConnectionEdgesChartInstallationEdgeNodeChartInstallation struct {
	ChartInstallationFragment `json:"-"`
}

// GetId returns GetChartInstallationsChartInstallationsChartInstallationConnectionEdgesChartInstallationEdgeNodeChartInstallation.Id, and is useful for accessing the field via an interface.
func (v *GetChartInstallationsChartInstallationsChartInstallationConnectionEdgesChartInstallationEdgeNodeChartInstallation) GetId() string {
	return v.ChartInstallationFragment.Id
}

// GetChart returns GetChartInstallationsChartInstallationsChartInstallationConnectionEdgesChartInstallationEdgeNodeChartInstallation.Chart, and is useful for accessing the field via an interface.
func (v *GetChartInstallationsChartInstallationsChartInstallationConnectionEdgesChartInstallationEdgeNodeChartInstallation) GetChart() ChartInstallationFragmentChart {
	return v.ChartInstallationFragment.Chart
}

// GetVersion returns GetChartInstallationsChartInstallationsChartInstallationConnectionEdgesChartInstallationEdgeNodeChartInstallation.Version, and is useful for accessing the field via an interface.
func (v *GetChartInstallationsChartInstallationsChartInstallationConnectionEdgesChartInstallationEdgeNodeChartInstallation) GetVersion() ChartInstallationFragmentVersion {
	return v.ChartInstallationFragment.Version
}

func (v *GetChartInstallationsChartInstallationsChartInstallationConnectionEdgesChartInstallationEdgeNodeChartInstallation) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetChartInstallationsChartInstallationsChartInstallationConnectionEdgesChartInstallationEdgeNodeChartInstallation
		graphql.NoUnmarshalJSON
	}
	firstPass.GetChartInstallationsChartInstallationsChartInstallationConnectionEdgesChartInstallationEdgeNodeChartInstallation = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ChartInstallationFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetChartInstallationsChartInstallationsChartInstallationConnectionEdgesChartInstallationEdgeNodeChartInstallation struct {
	Id string `json:"id"`

	Chart ChartInstallationFragmentChart `json:"chart"`

	Version ChartInstallationFragmentVersion `json:"version"`
}

func (v *GetChartInstallationsChartInstallationsChartInstallationConnectionEdgesChartInstallationEdgeNodeChartInstallation) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetChartInstallationsChartInstallationsChartInstallationConnectionEdgesChartInstallationEdgeNodeChartInstallation) __premarshalJSON() (*__premarshalGetChartInstallationsChartInstallationsChartInstallationConnectionEdgesChartInstallationEdgeNodeChartInstallation, error) {
	var retval __premarshalGetChartInstallationsChartInstallationsChartInstallationConnectionEdgesChartInstallationEdgeNodeChartInstallation

	retval.Id = v.ChartInstallationFragment.Id
	retval.Chart = v.ChartInstallationFragment.Chart
	retval.Version = v.ChartInstallationFragment.Version
	return &retval, nil
}

// GetChartInstallationsResponse is returned by GetChartInstallations on success.
type GetChartInstallationsResponse struct {
	ChartInstallations GetChartInstallationsChartInstallationsChartInstallationConnection `json:"chartInstallations"`
}

// GetChartInstallations returns GetChartInstallationsResponse.ChartInstallations, and is useful for accessing the field via an interface.
func (v *GetChartInstallationsResponse) GetChartInstallations() GetChartInstallationsChartInstallationsChartInstallationConnection {
	return v.ChartInstallations
}

// GetChartsChartsChartConnection includes the requested fields of the GraphQL type ChartConnection.
type GetChartsChartsChartConnection struct {
	Edges []GetChartsChartsChartConnectionEdgesChartEdge `json:"edges"`
}

// GetEdges returns GetChartsChartsChartConnection.Edges, and is useful for accessing the field via an interface.
func (v *GetChartsChartsChartConnection) GetEdges() []GetChartsChartsChartConnectionEdgesChartEdge {
	return v.Edges
}

// GetChartsChartsChartConnectionEdgesChartEdge includes the requested fields of the GraphQL type ChartEdge.
type GetChartsChartsChartConnectionEdgesChartEdge struct {
	Node GetChartsChartsChartConnectionEdgesChartEdgeNodeChart `json:"node"`
}

// GetNode returns GetChartsChartsChartConnectionEdgesChartEdge.Node, and is useful for accessing the field via an interface.
func (v *GetChartsChartsChartConnectionEdgesChartEdge) GetNode() GetChartsChartsChartConnectionEdgesChartEdgeNodeChart {
	return v.Node
}

// GetChartsChartsChartConnectionEdgesChartEdgeNodeChart includes the requested fields of the GraphQL type Chart.
type GetChartsChartsChartConnectionEdgesChartEdgeNodeChart struct {
	ChartFragment `json:"-"`
}

// GetId returns GetChartsChartsChartConnectionEdgesChartEdgeNodeChart.Id, and is useful for accessing the field via an interface.
func (v *GetChartsChartsChartConnectionEdgesChartEdgeNodeChart) GetId() string {
	return v.ChartFragment.Id
}

// GetName returns GetChartsChartsChartConnectionEdgesChartEdgeNodeChart.Name, and is useful for accessing the field via an interface.
func (v *GetChartsChartsChartConnectionEdgesChartEdgeNodeChart) GetName() string {
	return v.ChartFragment.Name
}

// GetDescription returns GetChartsChartsChartConnectionEdgesChartEdgeNodeChart.Description, and is useful for accessing the field via an interface.
func (v *GetChartsChartsChartConnectionEdgesChartEdgeNodeChart) GetDescription() string {
	return v.ChartFragment.Description
}

// GetLatestVersion returns GetChartsChartsChartConnectionEdgesChartEdgeNodeChart.LatestVersion, and is useful for accessing the field via an interface.
func (v *GetChartsChartsChartConnectionEdgesChartEdgeNodeChart) GetLatestVersion() string {
	return v.ChartFragment.LatestVersion
}

func (v *GetChartsChartsChartConnectionEdgesChartEdgeNodeChart) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetChartsChartsChartConnectionEdgesChartEdgeNodeChart
		graphql.NoUnmarshalJSON
	}
	firstPass.GetChartsChartsChartConnectionEdgesChartEdgeNodeChart = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ChartFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetChartsChartsChartConnectionEdgesChartEdgeNodeChart struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Description string `json:"description"`

	LatestVersion string `json:"latestVersion"`
}

func (v *GetChartsChartsChartConnectionEdgesChartEdgeNodeChart) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetChartsChartsChartConnectionEdgesChartEdgeNodeChart) __premarshalJSON() (*__premarshalGetChartsChartsChartConnectionEdgesChartEdgeNodeChart, error) {
	var retval __premarshalGetChartsChartsChartConnectionEdgesChartEdgeNodeChart

	retval.Id = v.ChartFragment.Id
	retval.Name = v.ChartFragment.Name
	retval.Description = v.ChartFragment.Description
	retval.LatestVersion = v.ChartFragment.LatestVersion
	return &retval, nil
}

// GetChartsResponse is returned by GetCharts on success.
type GetChartsResponse struct {
	Charts GetChartsChartsChartConnection `json:"charts"`
}

// GetCharts returns GetChartsResponse.Charts, and is useful for accessing the field via an interface.
func (v *GetChartsResponse) GetCharts() GetChartsChartsChartConnection { return v.Charts }

// GetEabCredentialEabCredential includes the requested fields of the GraphQL type EabCredential.
type GetEabCredentialEabCredential struct {
	EabCredentialFragment `json:"-"`
}

// GetId returns GetEabCredentialEabCredential.Id, and is useful for accessing the field via an interface.
func (v *GetEabCredentialEabCredential) GetId() string { return v.EabCredentialFragment.Id }

// GetKeyId returns GetEabCredentialEabCredential.KeyId, and is useful for accessing the field via an interface.
func (v *GetEabCredentialEabCredential) GetKeyId() string { return v.EabCredentialFragment.KeyId }

// GetHmacKey returns GetEabCredentialEabCredential.HmacKey, and is useful for accessing the field via an interface.
func (v *GetEabCredentialEabCredential) GetHmacKey() string { return v.EabCredentialFragment.HmacKey }

// GetCluster returns GetEabCredentialEabCredential.Cluster, and is useful for accessing the field via an interface.
func (v *GetEabCredentialEabCredential) GetCluster() string { return v.EabCredentialFragment.Cluster }

// GetProvider returns GetEabCredentialEabCredential.Provider, and is useful for accessing the field via an interface.
func (v *GetEabCredentialEabCredential) GetProvider() Provider {
	return v.EabCredentialFragment.Provider
}

func (v *GetEabCredentialEabCredential) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetEabCredentialEabCredential
		graphql.NoUnmarshalJSON
	}
	firstPass.GetEabCredentialEabCredential = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.EabCredentialFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetEabCredentialEabCredential struct {
	Id string `json:"id"`

	KeyId string `json:"keyId"`

	HmacKey string `json:"hmacKey"`

	Cluster string `json:"cluster"`

	Provider Provider `json:"provider"`
}

func (v *GetEabCredentialEabCredential) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetEabCredentialEabCredential) __premarshalJSON() (*__premarshalGetEabCredentialEabCredential, error) {
	var retval __premarshalGetEabCredentialEabCredential

	retval.Id = v.EabCredentialFragment.Id
	retval.KeyId = v.EabCredentialFragment.KeyId
	retval.HmacKey = v.EabCredentialFragment.HmacKey
	retval.Cluster = v.EabCredentialFragment.Cluster
	retval.Provider = v.EabCredentialFragment.Provider
	return &retval, nil
}

// GetEabCredentialResponse is returned by GetEabCredential on success.
type GetEabCredentialResponse struct {
	EabCredential GetEabCredentialEabCredential `json:"eabCredential"`
}

// GetEabCredential returns GetEabCredentialResponse.EabCredential, and is useful for accessing the field via an interface.
func (v *GetEabCredentialResponse) GetEabCredential() GetEabCredentialEabCredential {
	return v.EabCredential
}

// GetInstallationByIdInstallation includes the requested fields of the GraphQL type Installation.
type GetInstallationByIdInstallation struct {
	InstallationFragment `json:"-"`
}

// GetId returns GetInstallationByIdInstallation.Id, and is useful for accessing the field via an interface.
func (v *GetInstallationByIdInstallation) GetId() string { return v.InstallationFragment.Id }

// GetContext returns GetInstallationByIdInstallation.Context, and is useful for accessing the field via an interface.
func (v *GetInstallationByIdInstallation) GetContext() map[string]interface{} {
	return v.InstallationFragment.Context
}

// GetLicenseKey returns GetInstallationByIdInstallation.LicenseKey, and is useful for accessing the field via an interface.
func (v *GetInstallationByIdInstallation) GetLicenseKey() string {
	return v.InstallationFragment.LicenseKey
}

// GetAcmeKeyId returns GetInstallationByIdInstallation.AcmeKeyId, and is useful for accessing the field via an interface.
func (v *GetInstallationByIdInstallation) GetAcmeKeyId() string {
	return v.InstallationFragment.AcmeKeyId
}

// GetAcmeSecret returns GetInstallationByIdInstallation.AcmeSecret, and is useful for accessing the field via an interface.
func (v *GetInstallationByIdInstallation) GetAcmeSecret() string {
	return v.InstallationFragment.AcmeSecret
}

// GetRepository returns GetInstallationByIdInstallation.Repository, and is useful for accessing the field via an interface.
func (v *GetInstallationByIdInstallation) GetRepository() InstallationFragmentRepository {
	return v.InstallationFragment.Repository
}

// GetOidcProvider returns GetInstallationByIdInstallation.OidcProvider, and is useful for accessing the field via an interface.
func (v *GetInstallationByIdInstallation) GetOidcProvider() InstallationFragmentOidcProvider {
	return v.InstallationFragment.OidcProvider
}

func (v *GetInstallationByIdInstallation) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetInstallationByIdInstallation
		graphql.NoUnmarshalJSON
	}
	firstPass.GetInstallationByIdInstallation = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.InstallationFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetInstallationByIdInstallation struct {
	Id string `json:"id"`

	Context map[string]interface{} `json:"context"`

	LicenseKey string `json:"licenseKey"`

	AcmeKeyId string `json:"acmeKeyId"`

	AcmeSecret string `json:"acmeSecret"`

	Repository InstallationFragmentRepository `json:"repository"`

	OidcProvider InstallationFragmentOidcProvider `json:"oidcProvider"`
}

func (v *GetInstallationByIdInstallation) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetInstallationByIdInstallation) __premarshalJSON() (*__premarshalGetInstallationByIdInstallation, error) {
	var retval __premarshalGetInstallationByIdInstallation

	retval.Id = v.InstallationFragment.Id
	retval.Context = v.InstallationFragment.Context
	retval.LicenseKey = v.InstallationFragment.LicenseKey
	retval.AcmeKeyId = v.InstallationFragment.AcmeKeyId
	retval.AcmeSecret = v.InstallationFragment.AcmeSecret
	retval.Repository = v.InstallationFragment.Repository
	retval.OidcProvider = v.InstallationFragment.OidcProvider
	return &retval, nil
}

// GetInstallationByIdResponse is returned by GetInstallationById on success.
type GetInstallationByIdResponse struct {
	Installation GetInstallationByIdInstallation `json:"installation"`
}

// GetInstallation returns GetInstallationByIdResponse.Installation, and is useful for accessing the field via an interface.
func (v *GetInstallationByIdResponse) GetInstallation() GetInstallationByIdInstallation {
	return v.Installation
}

// GetInstallationInstallation includes the requested fields of the GraphQL type Installation.
type GetInstallationInstallation struct {
	InstallationFragment `json:"-"`
}

// GetId returns GetInstallationInstallation.Id, and is useful for accessing the field via an interface.
func (v *GetInstallationInstallation) GetId() string { return v.InstallationFragment.Id }

// GetContext returns GetInstallationInstallation.Context, and is useful for accessing the field via an interface.
func (v *GetInstallationInstallation) GetContext() map[string]interface{} {
	return v.InstallationFragment.Context
}

// GetLicenseKey returns GetInstallationInstallation.LicenseKey, and is useful for accessing the field via an interface.
func (v *GetInstallationInstallation) GetLicenseKey() string {
	return v.InstallationFragment.LicenseKey
}

// GetAcmeKeyId returns GetInstallationInstallation.AcmeKeyId, and is useful for accessing the field via an interface.
func (v *GetInstallationInstallation) GetAcmeKeyId() string { return v.InstallationFragment.AcmeKeyId }

// GetAcmeSecret returns GetInstallationInstallation.AcmeSecret, and is useful for accessing the field via an interface.
func (v *GetInstallationInstallation) GetAcmeSecret() string {
	return v.InstallationFragment.AcmeSecret
}

// GetRepository returns GetInstallationInstallation.Repository, and is useful for accessing the field via an interface.
func (v *GetInstallationInstallation) GetRepository() InstallationFragmentRepository {
	return v.InstallationFragment.Repository
}

// GetOidcProvider returns GetInstallationInstallation.OidcProvider, and is useful for accessing the field via an interface.
func (v *GetInstallationInstallation) GetOidcProvider() InstallationFragmentOidcProvider {
	return v.InstallationFragment.OidcProvider
}

func (v *GetInstallationInstallation) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetInstallationInstallation
		graphql.NoUnmarshalJSON
	}
	firstPass.GetInstallationInstallation = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.InstallationFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetInstallationInstallation struct {
	Id string `json:"id"`

	Context map[string]interface{} `json:"context"`

	LicenseKey string `json:"licenseKey"`

	AcmeKeyId string `json:"acmeKeyId"`

	AcmeSecret string `json:"acmeSecret"`

	Repository InstallationFragmentRepository `json:"repository"`

	OidcProvider InstallationFragmentOidcProvider `json:"oidcProvider"`
}

func (v *GetInstallationInstallation) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetInstallationInstallation) __premarshalJSON() (*__premarshalGetInstallationInstallation, error) {
	var retval __premarshalGetInstallationInstallation

	retval.Id = v.InstallationFragment.Id
	retval.Context = v.InstallationFragment.Context
	retval.LicenseKey = v.InstallationFragment.LicenseKey
	retval.AcmeKeyId = v.InstallationFragment.AcmeKeyId
	retval.AcmeSecret = v.InstallationFragment.AcmeSecret
	retval.Repository = v.InstallationFragment.Repository
	retval.OidcProvider = v.InstallationFragment.OidcProvider
	return &retval, nil
}

// GetInstallationResponse is returned by GetInstallation on success.
type GetInstallationResponse struct {
	Installation GetInstallationInstallation `json:"installation"`
}

// GetInstallation returns GetInstallationResponse.Installation, and is useful for accessing the field via an interface.
func (v *GetInstallationResponse) GetInstallation() GetInstallationInstallation {
	return v.Installation
}

// GetInstallationsInstallationsInstallationConnection includes the requested fields of the GraphQL type InstallationConnection.
type GetInstallationsInstallationsInstallationConnection struct {
	Edges []GetInstallationsInstallationsInstallationConnectionEdgesInstallationEdge `json:"edges"`
}

// GetEdges returns GetInstallationsInstallationsInstallationConnection.Edges, and is useful for accessing the field via an interface.
func (v *GetInstallationsInstallationsInstallationConnection) GetEdges() []GetInstallationsInstallationsInstallationConnectionEdgesInstallationEdge {
	return v.Edges
}

// GetInstallationsInstallationsInstallationConnectionEdgesInstallationEdge includes the requested fields of the GraphQL type InstallationEdge.
type GetInstallationsInstallationsInstallationConnectionEdgesInstallationEdge struct {
	Node GetInstallationsInstallationsInstallationConnectionEdgesInstallationEdgeNodeInstallation `json:"node"`
}

// GetNode returns GetInstallationsInstallationsInstallationConnectionEdgesInstallationEdge.Node, and is useful for accessing the field via an interface.
func (v *GetInstallationsInstallationsInstallationConnectionEdgesInstallationEdge) GetNode() GetInstallationsInstallationsInstallationConnectionEdgesInstallationEdgeNodeInstallation {
	return v.Node
}

// GetInstallationsInstallationsInstallationConnectionEdgesInstallationEdgeNodeInstallation includes the requested fields of the GraphQL type Installation.
type GetInstallationsInstallationsInstallationConnectionEdgesInstallationEdgeNodeInstallation struct {
	InstallationFragment `json:"-"`
}

// GetId returns GetInstallationsInstallationsInstallationConnectionEdgesInstallationEdgeNodeInstallation.Id, and is useful for accessing the field via an interface.
func (v *GetInstallationsInstallationsInstallationConnectionEdgesInstallationEdgeNodeInstallation) GetId() string {
	return v.InstallationFragment.Id
}

// GetContext returns GetInstallationsInstallationsInstallationConnectionEdgesInstallationEdgeNodeInstallation.Context, and is useful for accessing the field via an interface.
func (v *GetInstallationsInstallationsInstallationConnectionEdgesInstallationEdgeNodeInstallation) GetContext() map[string]interface{} {
	return v.InstallationFragment.Context
}

// GetLicenseKey returns GetInstallationsInstallationsInstallationConnectionEdgesInstallationEdgeNodeInstallation.LicenseKey, and is useful for accessing the field via an interface.
func (v *GetInstallationsInstallationsInstallationConnectionEdgesInstallationEdgeNodeInstallation) GetLicenseKey() string {
	return v.InstallationFragment.LicenseKey
}

// GetAcmeKeyId returns GetInstallationsInstallationsInstallationConnectionEdgesInstallationEdgeNodeInstallation.AcmeKeyId, and is useful for accessing the field via an interface.
func (v *GetInstallationsInstallationsInstallationConnectionEdgesInstallationEdgeNodeInstallation) GetAcmeKeyId() string {
	return v.InstallationFragment.AcmeKeyId
}

// GetAcmeSecret returns GetInstallationsInstallationsInstallationConnectionEdgesInstallationEdgeNodeInstallation.AcmeSecret, and is useful for accessing the field via an interface.
func (v *GetInstallationsInstallationsInstallationConnectionEdgesInstallationEdgeNodeInstallation) GetAcmeSecret() string {
	return v.InstallationFragment.AcmeSecret
}

// GetRepository returns GetInstallationsInstallationsInstallationConnectionEdgesInstallationEdgeNodeInstallation.Repository, and is useful for accessing the field via an interface.
func (v *GetInstallationsInstallationsInstallationConnectionEdgesInstallationEdgeNodeInstallation) GetRepository() InstallationFragmentRepository {
	return v.InstallationFragment.Repository
}

// GetOidcProvider returns GetInstallationsInstallationsInstallationConnectionEdgesInstallationEdgeNodeInstallation.OidcProvider, and is useful for accessing the field via an interface.
func (v *GetInstallationsInstallationsInstallationConnectionEdgesInstallationEdgeNodeInstallation) GetOidcProvider() InstallationFragmentOidcProvider {
	return v.InstallationFragment.OidcProvider
}

func (v *GetInstallationsInstallationsInstallationConnectionEdgesInstallationEdgeNodeInstallation) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetInstallationsInstallationsInstallationConnectionEdgesInstallationEdgeNodeInstallation
		graphql.NoUnmarshalJSON
	}
	firstPass.GetInstallationsInstallationsInstallationConnectionEdgesInstallationEdgeNodeInstallation = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.InstallationFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetInstallationsInstallationsInstallationConnectionEdgesInstallationEdgeNodeInstallation struct {
	Id string `json:"id"`

	Context map[string]interface{} `json:"context"`

	LicenseKey string `json:"licenseKey"`

	AcmeKeyId string `json:"acmeKeyId"`

	AcmeSecret string `json:"acmeSecret"`

	Repository InstallationFragmentRepository `json:"repository"`

	OidcProvider InstallationFragmentOidcProvider `json:"oidcProvider"`
}

func (v *GetInstallationsInstallationsInstallationConnectionEdgesInstallationEdgeNodeInstallation) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetInstallationsInstallationsInstallationConnectionEdgesInstallationEdgeNodeInstallation) __premarshalJSON() (*__premarshalGetInstallationsInstallationsInstallationConnectionEdgesInstallationEdgeNodeInstallation, error) {
	var retval __premarshalGetInstallationsInstallationsInstallationConnectionEdgesInstallationEdgeNodeInstallation

	retval.Id = v.InstallationFragment.Id
	retval.Context = v.InstallationFragment.Context
	retval.LicenseKey = v.InstallationFragment.LicenseKey
	retval.AcmeKeyId = v.InstallationFragment.AcmeKeyId
	retval.AcmeSecret = v.InstallationFragment.AcmeSecret
	retval.Repository = v.InstallationFragment.Repository
	retval.OidcProvider = v.InstallationFragment.OidcProvider
	return &retval, nil
}

// GetInstallationsResponse is returned by GetInstallations on success.
type GetInstallationsResponse struct {
	Installations GetInstallationsInstallationsInstallationConnection `json:"installations"`
}

// GetInstallations returns GetInstallationsResponse.Installations, and is useful for accessing the field via an interface.
func (v *GetInstallationsResponse) GetInstallations() GetInstallationsInstallationsInstallationConnection {
	return v.Installations
}

// GetLoginMethodLoginMethodLoginMethodResponse includes the requested fields of the GraphQL type LoginMethodResponse.
type GetLoginMethodLoginMethodLoginMethodResponse struct {
	LoginMethod LoginMethod `json:"loginMethod"`
	Token       string      `json:"token"`
}

// GetLoginMethod returns GetLoginMethodLoginMethodLoginMethodResponse.LoginMethod, and is useful for accessing the field via an interface.
func (v *GetLoginMethodLoginMethodLoginMethodResponse) GetLoginMethod() LoginMethod {
	return v.LoginMethod
}

// GetToken returns GetLoginMethodLoginMethodLoginMethodResponse.Token, and is useful for accessing the field via an interface.
func (v *GetLoginMethodLoginMethodLoginMethodResponse) GetToken() string { return v.Token }

// GetLoginMethodResponse is returned by GetLoginMethod on success.
type GetLoginMethodResponse struct {
	LoginMethod GetLoginMethodLoginMethodLoginMethodResponse `json:"loginMethod"`
}

// GetLoginMethod returns GetLoginMethodResponse.LoginMethod, and is useful for accessing the field via an interface.
func (v *GetLoginMethodResponse) GetLoginMethod() GetLoginMethodLoginMethodLoginMethodResponse {
	return v.LoginMethod
}

// GetPackageInstallationsChartInstallationsChartInstallationConnection includes the requested fields of the GraphQL type ChartInstallationConnection.
type GetPackageInstallationsChartInstallationsChartInstallationConnection struct {
	Edges []GetPackageInstallationsChartInstallationsChartInstallationConnectionEdgesChartInstallationEdge `json:"edges"`
}

// GetEdges returns GetPackageInstallationsChartInstallationsChartInstallationConnection.Edges, and is useful for accessing the field via an interface.
func (v *GetPackageInstallationsChartInstallationsChartInstallationConnection) GetEdges() []GetPackageInstallationsChartInstallationsChartInstallationConnectionEdgesChartInstallationEdge {
	return v.Edges
}

// GetPackageInstallationsChartInstallationsChartInstallationConnectionEdgesChartInstallationEdge includes the requested fields of the GraphQL type ChartInstallationEdge.
type GetPackageInstallationsChartInstallationsChartInstallationConnectionEdgesChartInstallationEdge struct {
	Node GetPackageInstallationsChartInstallationsChartInstallationConnectionEdgesChartInstallationEdgeNodeChartInstallation `json:"node"`
}

// GetNode returns GetPackageInstallationsChartInstallationsChartInstallationConnectionEdgesChartInstallationEdge.Node, and is useful for accessing the field via an interface.
func (v *GetPackageInstallationsChartInstallationsChartInstallationConnectionEdgesChartInstallationEdge) GetNode() GetPackageInstallationsChartInstallationsChartInstallationConnectionEdgesChartInstallationEdgeNodeChartInstallation {
	return v.Node
}

// GetPackageInstallationsChartInstallationsChartInstallationConnectionEdgesChartInstallationEdgeNodeChartInstallation includes the requested fields of the GraphQL type ChartInstallation.
type GetPackageInstallationsChartInstallationsChartInstallationConnectionEdgesChartInstallationEdgeNodeChartInstallation struct {
	ChartInstallationFragment `json:"-"`
}

// GetId returns GetPackageInstallationsChartInstallationsChartInstallationConnectionEdgesChartInstallationEdgeNodeChartInstallation.Id, and is useful for accessing the field via an interface.
func (v *GetPackageInstallationsChartInstallationsChartInstallationConnectionEdgesChartInstallationEdgeNodeChartInstallation) GetId() string {
	return v.ChartInstallationFragment.Id
}

// GetChart returns GetPackageInstallationsChartInstallationsChartInstallationConnectionEdgesChartInstallationEdgeNodeChartInstallation.Chart, and is useful for accessing the field via an interface.
func (v *GetPackageInstallationsChartInstallationsChartInstallationConnectionEdgesChartInstallationEdgeNodeChartInstallation) GetChart() ChartInstallationFragmentChart {
	return v.ChartInstallationFragment.Chart
}

// GetVersion returns GetPackageInstallationsChartInstallationsChartInstallationConnectionEdgesChartInstallationEdgeNodeChartInstallation.Version, and is useful for accessing the field via an interface.
func (v *GetPackageInstallationsChartInstallationsChartInstallationConnectionEdgesChartInstallationEdgeNodeChartInstallation) GetVersion() ChartInstallationFragmentVersion {
	return v.ChartInstallationFragment.Version
}

func (v *GetPackageInstallationsChartInstallationsChartInstallationConnectionEdgesChartInstallationEdgeNodeChartInstallation) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetPackageInstallationsChartInstallationsChartInstallationConnectionEdgesChartInstallationEdgeNodeChartInstallation
		graphql.NoUnmarshalJSON
	}
	firstPass.GetPackageInstallationsChartInstallationsChartInstallationConnectionEdgesChartInstallationEdgeNodeChartInstallation = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ChartInstallationFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetPackageInstallationsChartInstallationsChartInstallationConnectionEdgesChartInstallationEdgeNodeChartInstallation struct {
	Id string `json:"id"`

	Chart ChartInstallationFragmentChart `json:"chart"`

	Version ChartInstallationFragmentVersion `json:"version"`
}

func (v *GetPackageInstallationsChartInstallationsChartInstallationConnectionEdgesChartInstallationEdgeNodeChartInstallation) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetPackageInstallationsChartInstallationsChartInstallationConnectionEdgesChartInstallationEdgeNodeChartInstallation) __premarshalJSON() (*__premarshalGetPackageInstallationsChartInstallationsChartInstallationConnectionEdgesChartInstallationEdgeNodeChartInstallation, error) {
	var retval __premarshalGetPackageInstallationsChartInstallationsChartInstallationConnectionEdgesChartInstallationEdgeNodeChartInstallation

	retval.Id = v.ChartInstallationFragment.Id
	retval.Chart = v.ChartInstallationFragment.Chart
	retval.Version = v.ChartInstallationFragment.Version
	return &retval, nil
}

// GetPackageInstallationsResponse is returned by GetPackageInstallations on success.
type GetPackageInstallationsResponse struct {
	ChartInstallations     GetPackageInstallationsChartInstallationsChartInstallationConnection         `json:"chartInstallations"`
	TerraformInstallations GetPackageInstallationsTerraformInstallationsTerraformInstallationConnection `json:"terraformInstallations"`
}

// GetChartInstallations returns GetPackageInstallationsResponse.ChartInstallations, and is useful for accessing the field via an interface.
func (v *GetPackageInstallationsResponse) GetChartInstallations() GetPackageInstallationsChartInstallationsChartInstallationConnection {
	return v.ChartInstallations
}

// GetTerraformInstallations returns GetPackageInstallationsResponse.TerraformInstallations, and is useful for accessing the field via an interface.
func (v *GetPackageInstallationsResponse) GetTerraformInstallations() GetPackageInstallationsTerraformInstallationsTerraformInstallationConnection {
	return v.TerraformInstallations
}

// GetPackageInstallationsTerraformInstallationsTerraformInstallationConnection includes the requested fields of the GraphQL type TerraformInstallationConnection.
type GetPackageInstallationsTerraformInstallationsTerraformInstallationConnection struct {
	Edges []GetPackageInstallationsTerraformInstallationsTerraformInstallationConnectionEdgesTerraformInstallationEdge `json:"edges"`
}

// GetEdges returns GetPackageInstallationsTerraformInstallationsTerraformInstallationConnection.Edges, and is useful for accessing the field via an interface.
func (v *GetPackageInstallationsTerraformInstallationsTerraformInstallationConnection) GetEdges() []GetPackageInstallationsTerraformInstallationsTerraformInstallationConnectionEdgesTerraformInstallationEdge {
	return v.Edges
}

// GetPackageInstallationsTerraformInstallationsTerraformInstallationConnectionEdgesTerraformInstallationEdge includes the requested fields of the GraphQL type TerraformInstallationEdge.
type GetPackageInstallationsTerraformInstallationsTerraformInstallationConnectionEdgesTerraformInstallationEdge struct {
	Node GetPackageInstallationsTerraformInstallationsTerraformInstallationConnectionEdgesTerraformInstallationEdgeNodeTerraformInstallation `json:"node"`
}

// GetNode returns GetPackageInstallationsTerraformInstallationsTerraformInstallationConnectionEdgesTerraformInstallationEdge.Node, and is useful for accessing the field via an interface.
func (v *GetPackageInstallationsTerraformInstallationsTerraformInstallationConnectionEdgesTerraformInstallationEdge) GetNode() GetPackageInstallationsTerraformInstallationsTerraformInstallationConnectionEdgesTerraformInstallationEdgeNodeTerraformInstallation {
	return v.Node
}

// GetPackageInstallationsTerraformInstallationsTerraformInstallationConnectionEdgesTerraformInstallationEdgeNodeTerraformInstallation includes the requested fields of the GraphQL type TerraformInstallation.
type GetPackageInstallationsTerraformInstallationsTerraformInstallationConnectionEdgesTerraformInstallationEdgeNodeTerraformInstallation struct {
	TerraformInstallationFragment `json:"-"`
}

// GetId returns GetPackageInstallationsTerraformInstallationsTerraformInstallationConnectionEdgesTerraformInstallationEdgeNodeTerraformInstallation.Id, and is useful for accessing the field via an interface.
func (v *GetPackageInstallationsTerraformInstallationsTerraformInstallationConnectionEdgesTerraformInstallationEdgeNodeTerraformInstallation) GetId() string {
	return v.TerraformInstallationFragment.Id
}

// GetTerraform returns GetPackageInstallationsTerraformInstallationsTerraformInstallationConnectionEdgesTerraformInstallationEdgeNodeTerraformInstallation.Terraform, and is useful for accessing the field via an interface.
func (v *GetPackageInstallationsTerraformInstallationsTerraformInstallationConnectionEdgesTerraformInstallationEdgeNodeTerraformInstallation) GetTerraform() TerraformInstallationFragmentTerraform {
	return v.TerraformInstallationFragment.Terraform
}

// GetVersion returns GetPackageInstallationsTerraformInstallationsTerraformInstallationConnectionEdgesTerraformInstallationEdgeNodeTerraformInstallation.Version, and is useful for accessing the field via an interface.
func (v *GetPackageInstallationsTerraformInstallationsTerraformInstallationConnectionEdgesTerraformInstallationEdgeNodeTerraformInstallation) GetVersion() TerraformInstallationFragmentVersion {
	return v.TerraformInstallationFragment.Version
}

func (v *GetPackageInstallationsTerraformInstallationsTerraformInstallationConnectionEdgesTerraformInstallationEdgeNodeTerraformInstallation) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetPackageInstallationsTerraformInstallationsTerraformInstallationConnectionEdgesTerraformInstallationEdgeNodeTerraformInstallation
		graphql.NoUnmarshalJSON
	}
	firstPass.GetPackageInstallationsTerraformInstallationsTerraformInstallationConnectionEdgesTerraformInstallationEdgeNodeTerraformInstallation = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.TerraformInstallationFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetPackageInstallationsTerraformInstallationsTerraformInstallationConnectionEdgesTerraformInstallationEdgeNodeTerraformInstallation struct {
	Id string `json:"id"`

	Terraform TerraformInstallationFragmentTerraform `json:"terraform"`

	Version TerraformInstallationFragmentVersion `json:"version"`
}

func (v *GetPackageInstallationsTerraformInstallationsTerraformInstallationConnectionEdgesTerraformInstallationEdgeNodeTerraformInstallation) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetPackageInstallationsTerraformInstallationsTerraformInstallationConnectionEdgesTerraformInstallationEdgeNodeTerraformInstallation) __premarshalJSON() (*__premarshalGetPackageInstallationsTerraformInstallationsTerraformInstallationConnectionEdgesTerraformInstallationEdgeNodeTerraformInstallation, error) {
	var retval __premarshalGetPackageInstallationsTerraformInstallationsTerraformInstallationConnectionEdgesTerraformInstallationEdgeNodeTerraformInstallation

	retval.Id = v.TerraformInstallationFragment.Id
	retval.Terraform = v.TerraformInstallationFragment.Terraform
	retval.Version = v.TerraformInstallationFragment.Version
	return &retval, nil
}

// GetRecipeRecipe includes the requested fields of the GraphQL type Recipe.
type GetRecipeRecipe struct {
	RecipeFragment     `json:"-"`
	RecipeSections     []GetRecipeRecipeRecipeSectionsRecipeSection `json:"recipeSections"`
	RecipeDependencies []GetRecipeRecipeRecipeDependenciesRecipe    `json:"recipeDependencies"`
}

// GetRecipeSections returns GetRecipeRecipe.RecipeSections, and is useful for accessing the field via an interface.
func (v *GetRecipeRecipe) GetRecipeSections() []GetRecipeRecipeRecipeSectionsRecipeSection {
	return v.RecipeSections
}

// GetRecipeDependencies returns GetRecipeRecipe.RecipeDependencies, and is useful for accessing the field via an interface.
func (v *GetRecipeRecipe) GetRecipeDependencies() []GetRecipeRecipeRecipeDependenciesRecipe {
	return v.RecipeDependencies
}

// GetId returns GetRecipeRecipe.Id, and is useful for accessing the field via an interface.
func (v *GetRecipeRecipe) GetId() string { return v.RecipeFragment.Id }

// GetName returns GetRecipeRecipe.Name, and is useful for accessing the field via an interface.
func (v *GetRecipeRecipe) GetName() string { return v.RecipeFragment.Name }

// GetDescription returns GetRecipeRecipe.Description, and is useful for accessing the field via an interface.
func (v *GetRecipeRecipe) GetDescription() string { return v.RecipeFragment.Description }

// GetRestricted returns GetRecipeRecipe.Restricted, and is useful for accessing the field via an interface.
func (v *GetRecipeRecipe) GetRestricted() bool { return v.RecipeFragment.Restricted }

// GetProvider returns GetRecipeRecipe.Provider, and is useful for accessing the field via an interface.
func (v *GetRecipeRecipe) GetProvider() Provider { return v.RecipeFragment.Provider }

// GetTests returns GetRecipeRecipe.Tests, and is useful for accessing the field via an interface.
func (v *GetRecipeRecipe) GetTests() []RecipeFragmentTestsRecipeTest { return v.RecipeFragment.Tests }

// GetRepository returns GetRecipeRecipe.Repository, and is useful for accessing the field via an interface.
func (v *GetRecipeRecipe) GetRepository() RecipeFragmentRepository {
	return v.RecipeFragment.Repository
}

// GetOidcSettings returns GetRecipeRecipe.OidcSettings, and is useful for accessing the field via an interface.
func (v *GetRecipeRecipe) GetOidcSettings() RecipeFragmentOidcSettings {
	return v.RecipeFragment.OidcSettings
}

func (v *GetRecipeRecipe) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetRecipeRecipe
		graphql.NoUnmarshalJSON
	}
	firstPass.GetRecipeRecipe = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RecipeFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetRecipeRecipe struct {
	RecipeSections []GetRecipeRecipeRecipeSectionsRecipeSection `json:"recipeSections"`

	RecipeDependencies []GetRecipeRecipeRecipeDependenciesRecipe `json:"recipeDependencies"`

	Id string `json:"id"`

	Name string `json:"name"`

	Description string `json:"description"`

	Restricted bool `json:"restricted"`

	Provider Provider `json:"provider"`

	Tests []RecipeFragmentTestsRecipeTest `json:"tests"`

	Repository RecipeFragmentRepository `json:"repository"`

	OidcSettings RecipeFragmentOidcSettings `json:"oidcSettings"`
}

func (v *GetRecipeRecipe) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetRecipeRecipe) __premarshalJSON() (*__premarshalGetRecipeRecipe, error) {
	var retval __premarshalGetRecipeRecipe

	retval.RecipeSections = v.RecipeSections
	retval.RecipeDependencies = v.RecipeDependencies
	retval.Id = v.RecipeFragment.Id
	retval.Name = v.RecipeFragment.Name
	retval.Description = v.RecipeFragment.Description
	retval.Restricted = v.RecipeFragment.Restricted
	retval.Provider = v.RecipeFragment.Provider
	retval.Tests = v.RecipeFragment.Tests
	retval.Repository = v.RecipeFragment.Repository
	retval.OidcSettings = v.RecipeFragment.OidcSettings
	return &retval, nil
}

// GetRecipeRecipeRecipeDependenciesRecipe includes the requested fields of the GraphQL type Recipe.
type GetRecipeRecipeRecipeDependenciesRecipe struct {
	RecipeFragment `json:"-"`
}

// GetId returns GetRecipeRecipeRecipeDependenciesRecipe.Id, and is useful for accessing the field via an interface.
func (v *GetRecipeRecipeRecipeDependenciesRecipe) GetId() string { return v.RecipeFragment.Id }

// GetName returns GetRecipeRecipeRecipeDependenciesRecipe.Name, and is useful for accessing the field via an interface.
func (v *GetRecipeRecipeRecipeDependenciesRecipe) GetName() string { return v.RecipeFragment.Name }

// GetDescription returns GetRecipeRecipeRecipeDependenciesRecipe.Description, and is useful for accessing the field via an interface.
func (v *GetRecipeRecipeRecipeDependenciesRecipe) GetDescription() string {
	return v.RecipeFragment.Description
}

// GetRestricted returns GetRecipeRecipeRecipeDependenciesRecipe.Restricted, and is useful for accessing the field via an interface.
func (v *GetRecipeRecipeRecipeDependenciesRecipe) GetRestricted() bool {
	return v.RecipeFragment.Restricted
}

// GetProvider returns GetRecipeRecipeRecipeDependenciesRecipe.Provider, and is useful for accessing the field via an interface.
func (v *GetRecipeRecipeRecipeDependenciesRecipe) GetProvider() Provider {
	return v.RecipeFragment.Provider
}

// GetTests returns GetRecipeRecipeRecipeDependenciesRecipe.Tests, and is useful for accessing the field via an interface.
func (v *GetRecipeRecipeRecipeDependenciesRecipe) GetTests() []RecipeFragmentTestsRecipeTest {
	return v.RecipeFragment.Tests
}

// GetRepository returns GetRecipeRecipeRecipeDependenciesRecipe.Repository, and is useful for accessing the field via an interface.
func (v *GetRecipeRecipeRecipeDependenciesRecipe) GetRepository() RecipeFragmentRepository {
	return v.RecipeFragment.Repository
}

// GetOidcSettings returns GetRecipeRecipeRecipeDependenciesRecipe.OidcSettings, and is useful for accessing the field via an interface.
func (v *GetRecipeRecipeRecipeDependenciesRecipe) GetOidcSettings() RecipeFragmentOidcSettings {
	return v.RecipeFragment.OidcSettings
}

func (v *GetRecipeRecipeRecipeDependenciesRecipe) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetRecipeRecipeRecipeDependenciesRecipe
		graphql.NoUnmarshalJSON
	}
	firstPass.GetRecipeRecipeRecipeDependenciesRecipe = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RecipeFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetRecipeRecipeRecipeDependenciesRecipe struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Description string `json:"description"`

	Restricted bool `json:"restricted"`

	Provider Provider `json:"provider"`

	Tests []RecipeFragmentTestsRecipeTest `json:"tests"`

	Repository RecipeFragmentRepository `json:"repository"`

	OidcSettings RecipeFragmentOidcSettings `json:"oidcSettings"`
}

func (v *GetRecipeRecipeRecipeDependenciesRecipe) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetRecipeRecipeRecipeDependenciesRecipe) __premarshalJSON() (*__premarshalGetRecipeRecipeRecipeDependenciesRecipe, error) {
	var retval __premarshalGetRecipeRecipeRecipeDependenciesRecipe

	retval.Id = v.RecipeFragment.Id
	retval.Name = v.RecipeFragment.Name
	retval.Description = v.RecipeFragment.Description
	retval.Restricted = v.RecipeFragment.Restricted
	retval.Provider = v.RecipeFragment.Provider
	retval.Tests = v.RecipeFragment.Tests
	retval.Repository = v.RecipeFragment.Repository
	retval.OidcSettings = v.RecipeFragment.OidcSettings
	return &retval, nil
}

// GetRecipeRecipeRecipeSectionsRecipeSection includes the requested fields of the GraphQL type RecipeSection.
type GetRecipeRecipeRecipeSectionsRecipeSection struct {
	RecipeSectionFragment `json:"-"`
}

// GetIndex returns GetRecipeRecipeRecipeSectionsRecipeSection.Index, and is useful for accessing the field via an interface.
func (v *GetRecipeRecipeRecipeSectionsRecipeSection) GetIndex() int {
	return v.RecipeSectionFragment.Index
}

// GetRepository returns GetRecipeRecipeRecipeSectionsRecipeSection.Repository, and is useful for accessing the field via an interface.
func (v *GetRecipeRecipeRecipeSectionsRecipeSection) GetRepository() RecipeSectionFragmentRepository {
	return v.RecipeSectionFragment.Repository
}

// GetRecipeItems returns GetRecipeRecipeRecipeSectionsRecipeSection.RecipeItems, and is useful for accessing the field via an interface.
func (v *GetRecipeRecipeRecipeSectionsRecipeSection) GetRecipeItems() []RecipeSectionFragmentRecipeItemsRecipeItem {
	return v.RecipeSectionFragment.RecipeItems
}

// GetConfiguration returns GetRecipeRecipeRecipeSectionsRecipeSection.Configuration, and is useful for accessing the field via an interface.
func (v *GetRecipeRecipeRecipeSectionsRecipeSection) GetConfiguration() []RecipeSectionFragmentConfigurationRecipeConfiguration {
	return v.RecipeSectionFragment.Configuration
}

func (v *GetRecipeRecipeRecipeSectionsRecipeSection) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetRecipeRecipeRecipeSectionsRecipeSection
		graphql.NoUnmarshalJSON
	}
	firstPass.GetRecipeRecipeRecipeSectionsRecipeSection = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RecipeSectionFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetRecipeRecipeRecipeSectionsRecipeSection struct {
	Index int `json:"index"`

	Repository RecipeSectionFragmentRepository `json:"repository"`

	RecipeItems []RecipeSectionFragmentRecipeItemsRecipeItem `json:"recipeItems"`

	Configuration []RecipeSectionFragmentConfigurationRecipeConfiguration `json:"configuration"`
}

func (v *GetRecipeRecipeRecipeSectionsRecipeSection) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetRecipeRecipeRecipeSectionsRecipeSection) __premarshalJSON() (*__premarshalGetRecipeRecipeRecipeSectionsRecipeSection, error) {
	var retval __premarshalGetRecipeRecipeRecipeSectionsRecipeSection

	retval.Index = v.RecipeSectionFragment.Index
	retval.Repository = v.RecipeSectionFragment.Repository
	retval.RecipeItems = v.RecipeSectionFragment.RecipeItems
	retval.Configuration = v.RecipeSectionFragment.Configuration
	return &retval, nil
}

// GetRecipeResponse is returned by GetRecipe on success.
type GetRecipeResponse struct {
	Recipe GetRecipeRecipe `json:"recipe"`
}

// GetRecipe returns GetRecipeResponse.Recipe, and is useful for accessing the field via an interface.
func (v *GetRecipeResponse) GetRecipe() GetRecipeRecipe { return v.Recipe }

// GetRepositoryRepository includes the requested fields of the GraphQL type Repository.
type GetRepositoryRepository struct {
	RepositoryFragment `json:"-"`
}

// GetId returns GetRepositoryRepository.Id, and is useful for accessing the field via an interface.
func (v *GetRepositoryRepository) GetId() string { return v.RepositoryFragment.Id }

// GetName returns GetRepositoryRepository.Name, and is useful for accessing the field via an interface.
func (v *GetRepositoryRepository) GetName() string { return v.RepositoryFragment.Name }

// GetNotes returns GetRepositoryRepository.Notes, and is useful for accessing the field via an interface.
func (v *GetRepositoryRepository) GetNotes() string { return v.RepositoryFragment.Notes }

// GetIcon returns GetRepositoryRepository.Icon, and is useful for accessing the field via an interface.
func (v *GetRepositoryRepository) GetIcon() string { return v.RepositoryFragment.Icon }

// GetDarkIcon returns GetRepositoryRepository.DarkIcon, and is useful for accessing the field via an interface.
func (v *GetRepositoryRepository) GetDarkIcon() string { return v.RepositoryFragment.DarkIcon }

// GetDescription returns GetRepositoryRepository.Description, and is useful for accessing the field via an interface.
func (v *GetRepositoryRepository) GetDescription() string { return v.RepositoryFragment.Description }

// GetPublisher returns GetRepositoryRepository.Publisher, and is useful for accessing the field via an interface.
func (v *GetRepositoryRepository) GetPublisher() RepositoryFragmentPublisher {
	return v.RepositoryFragment.Publisher
}

// GetRecipes returns GetRepositoryRepository.Recipes, and is useful for accessing the field via an interface.
func (v *GetRepositoryRepository) GetRecipes() []RepositoryFragmentRecipesRecipe {
	return v.RepositoryFragment.Recipes
}

func (v *GetRepositoryRepository) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetRepositoryRepository
		graphql.NoUnmarshalJSON
	}
	firstPass.GetRepositoryRepository = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepositoryFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetRepositoryRepository struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Notes string `json:"notes"`

	Icon string `json:"icon"`

	DarkIcon string `json:"darkIcon"`

	Description string `json:"description"`

	Publisher RepositoryFragmentPublisher `json:"publisher"`

	Recipes []RepositoryFragmentRecipesRecipe `json:"recipes"`
}

func (v *GetRepositoryRepository) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetRepositoryRepository) __premarshalJSON() (*__premarshalGetRepositoryRepository, error) {
	var retval __premarshalGetRepositoryRepository

	retval.Id = v.RepositoryFragment.Id
	retval.Name = v.RepositoryFragment.Name
	retval.Notes = v.RepositoryFragment.Notes
	retval.Icon = v.RepositoryFragment.Icon
	retval.DarkIcon = v.RepositoryFragment.DarkIcon
	retval.Description = v.RepositoryFragment.Description
	retval.Publisher = v.RepositoryFragment.Publisher
	retval.Recipes = v.RepositoryFragment.Recipes
	return &retval, nil
}

// GetRepositoryResponse is returned by GetRepository on success.
type GetRepositoryResponse struct {
	Repository GetRepositoryRepository `json:"repository"`
}

// GetRepository returns GetRepositoryResponse.Repository, and is useful for accessing the field via an interface.
func (v *GetRepositoryResponse) GetRepository() GetRepositoryRepository { return v.Repository }

// GetShellResponse is returned by GetShell on success.
type GetShellResponse struct {
	Shell GetShellShellCloudShell `json:"shell"`
}

// GetShell returns GetShellResponse.Shell, and is useful for accessing the field via an interface.
func (v *GetShellResponse) GetShell() GetShellShellCloudShell { return v.Shell }

// GetShellShellCloudShell includes the requested fields of the GraphQL type CloudShell.
type GetShellShellCloudShell struct {
	CloudShellFragment `json:"-"`
}

// GetId returns GetShellShellCloudShell.Id, and is useful for accessing the field via an interface.
func (v *GetShellShellCloudShell) GetId() string { return v.CloudShellFragment.Id }

// GetAesKey returns GetShellShellCloudShell.AesKey, and is useful for accessing the field via an interface.
func (v *GetShellShellCloudShell) GetAesKey() string { return v.CloudShellFragment.AesKey }

// GetGitUrl returns GetShellShellCloudShell.GitUrl, and is useful for accessing the field via an interface.
func (v *GetShellShellCloudShell) GetGitUrl() string { return v.CloudShellFragment.GitUrl }

func (v *GetShellShellCloudShell) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetShellShellCloudShell
		graphql.NoUnmarshalJSON
	}
	firstPass.GetShellShellCloudShell = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.CloudShellFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetShellShellCloudShell struct {
	Id string `json:"id"`

	AesKey string `json:"aesKey"`

	GitUrl string `json:"gitUrl"`
}

func (v *GetShellShellCloudShell) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetShellShellCloudShell) __premarshalJSON() (*__premarshalGetShellShellCloudShell, error) {
	var retval __premarshalGetShellShellCloudShell

	retval.Id = v.CloudShellFragment.Id
	retval.AesKey = v.CloudShellFragment.AesKey
	retval.GitUrl = v.CloudShellFragment.GitUrl
	return &retval, nil
}

// GetTerraformInstallationsResponse is returned by GetTerraformInstallations on success.
type GetTerraformInstallationsResponse struct {
	TerraformInstallations GetTerraformInstallationsTerraformInstallationsTerraformInstallationConnection `json:"terraformInstallations"`
}

// GetTerraformInstallations returns GetTerraformInstallationsResponse.TerraformInstallations, and is useful for accessing the field via an interface.
func (v *GetTerraformInstallationsResponse) GetTerraformInstallations() GetTerraformInstallationsTerraformInstallationsTerraformInstallationConnection {
	return v.TerraformInstallations
}

// GetTerraformInstallationsTerraformInstallationsTerraformInstallationConnection includes the requested fields of the GraphQL type TerraformInstallationConnection.
type GetTerraformInstallationsTerraformInstallationsTerraformInstallationConnection struct {
	Edges []GetTerraformInstallationsTerraformInstallationsTerraformInstallationConnectionEdgesTerraformInstallationEdge `json:"edges"`
}

// GetEdges returns GetTerraformInstallationsTerraformInstallationsTerraformInstallationConnection.Edges, and is useful for accessing the field via an interface.
func (v *GetTerraformInstallationsTerraformInstallationsTerraformInstallationConnection) GetEdges() []GetTerraformInstallationsTerraformInstallationsTerraformInstallationConnectionEdgesTerraformInstallationEdge {
	return v.Edges
}

// GetTerraformInstallationsTerraformInstallationsTerraformInstallationConnectionEdgesTerraformInstallationEdge includes the requested fields of the GraphQL type TerraformInstallationEdge.
type GetTerraformInstallationsTerraformInstallationsTerraformInstallationConnectionEdgesTerraformInstallationEdge struct {
	Node GetTerraformInstallationsTerraformInstallationsTerraformInstallationConnectionEdgesTerraformInstallationEdgeNodeTerraformInstallation `json:"node"`
}

// GetNode returns GetTerraformInstallationsTerraformInstallationsTerraformInstallationConnectionEdgesTerraformInstallationEdge.Node, and is useful for accessing the field via an interface.
func (v *GetTerraformInstallationsTerraformInstallationsTerraformInstallationConnectionEdgesTerraformInstallationEdge) GetNode() GetTerraformInstallationsTerraformInstallationsTerraformInstallationConnectionEdgesTerraformInstallationEdgeNodeTerraformInstallation {
	return v.Node
}

// GetTerraformInstallationsTerraformInstallationsTerraformInstallationConnectionEdgesTerraformInstallationEdgeNodeTerraformInstallation includes the requested fields of the GraphQL type TerraformInstallation.
type GetTerraformInstallationsTerraformInstallationsTerraformInstallationConnectionEdgesTerraformInstallationEdgeNodeTerraformInstallation struct {
	TerraformInstallationFragment `json:"-"`
}

// GetId returns GetTerraformInstallationsTerraformInstallationsTerraformInstallationConnectionEdgesTerraformInstallationEdgeNodeTerraformInstallation.Id, and is useful for accessing the field via an interface.
func (v *GetTerraformInstallationsTerraformInstallationsTerraformInstallationConnectionEdgesTerraformInstallationEdgeNodeTerraformInstallation) GetId() string {
	return v.TerraformInstallationFragment.Id
}

// GetTerraform returns GetTerraformInstallationsTerraformInstallationsTerraformInstallationConnectionEdgesTerraformInstallationEdgeNodeTerraformInstallation.Terraform, and is useful for accessing the field via an interface.
func (v *GetTerraformInstallationsTerraformInstallationsTerraformInstallationConnectionEdgesTerraformInstallationEdgeNodeTerraformInstallation) GetTerraform() TerraformInstallationFragmentTerraform {
	return v.TerraformInstallationFragment.Terraform
}

// GetVersion returns GetTerraformInstallationsTerraformInstallationsTerraformInstallationConnectionEdgesTerraformInstallationEdgeNodeTerraformInstallation.Version, and is useful for accessing the field via an interface.
func (v *GetTerraformInstallationsTerraformInstallationsTerraformInstallationConnectionEdgesTerraformInstallationEdgeNodeTerraformInstallation) GetVersion() TerraformInstallationFragmentVersion {
	return v.TerraformInstallationFragment.Version
}

func (v *GetTerraformInstallationsTerraformInstallationsTerraformInstallationConnectionEdgesTerraformInstallationEdgeNodeTerraformInstallation) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetTerraformInstallationsTerraformInstallationsTerraformInstallationConnectionEdgesTerraformInstallationEdgeNodeTerraformInstallation
		graphql.NoUnmarshalJSON
	}
	firstPass.GetTerraformInstallationsTerraformInstallationsTerraformInstallationConnectionEdgesTerraformInstallationEdgeNodeTerraformInstallation = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.TerraformInstallationFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetTerraformInstallationsTerraformInstallationsTerraformInstallationConnectionEdgesTerraformInstallationEdgeNodeTerraformInstallation struct {
	Id string `json:"id"`

	Terraform TerraformInstallationFragmentTerraform `json:"terraform"`

	Version TerraformInstallationFragmentVersion `json:"version"`
}

func (v *GetTerraformInstallationsTerraformInstallationsTerraformInstallationConnectionEdgesTerraformInstallationEdgeNodeTerraformInstallation) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetTerraformInstallationsTerraformInstallationsTerraformInstallationConnectionEdgesTerraformInstallationEdgeNodeTerraformInstallation) __premarshalJSON() (*__premarshalGetTerraformInstallationsTerraformInstallationsTerraformInstallationConnectionEdgesTerraformInstallationEdgeNodeTerraformInstallation, error) {
	var retval __premarshalGetTerraformInstallationsTerraformInstallationsTerraformInstallationConnectionEdgesTerraformInstallationEdgeNodeTerraformInstallation

	retval.Id = v.TerraformInstallationFragment.Id
	retval.Terraform = v.TerraformInstallationFragment.Terraform
	retval.Version = v.TerraformInstallationFragment.Version
	return &retval, nil
}

// GetTerraformResponse is returned by GetTerraform on success.
type GetTerraformResponse struct {
	Terraform GetTerraformTerraformTerraformConnection `json:"terraform"`
}

// GetTerraform returns GetTerraformResponse.Terraform, and is useful for accessing the field via an interface.
func (v *GetTerraformResponse) GetTerraform() GetTerraformTerraformTerraformConnection {
	return v.Terraform
}

// GetTerraformTerraformTerraformConnection includes the requested fields of the GraphQL type TerraformConnection.
type GetTerraformTerraformTerraformConnection struct {
	Edges []GetTerraformTerraformTerraformConnectionEdgesTerraformEdge `json:"edges"`
}

// GetEdges returns GetTerraformTerraformTerraformConnection.Edges, and is useful for accessing the field via an interface.
func (v *GetTerraformTerraformTerraformConnection) GetEdges() []GetTerraformTerraformTerraformConnectionEdgesTerraformEdge {
	return v.Edges
}

// GetTerraformTerraformTerraformConnectionEdgesTerraformEdge includes the requested fields of the GraphQL type TerraformEdge.
type GetTerraformTerraformTerraformConnectionEdgesTerraformEdge struct {
	Node GetTerraformTerraformTerraformConnectionEdgesTerraformEdgeNodeTerraform `json:"node"`
}

// GetNode returns GetTerraformTerraformTerraformConnectionEdgesTerraformEdge.Node, and is useful for accessing the field via an interface.
func (v *GetTerraformTerraformTerraformConnectionEdgesTerraformEdge) GetNode() GetTerraformTerraformTerraformConnectionEdgesTerraformEdgeNodeTerraform {
	return v.Node
}

// GetTerraformTerraformTerraformConnectionEdgesTerraformEdgeNodeTerraform includes the requested fields of the GraphQL type Terraform.
type GetTerraformTerraformTerraformConnectionEdgesTerraformEdgeNodeTerraform struct {
	TerraformFragment `json:"-"`
}

// GetId returns GetTerraformTerraformTerraformConnectionEdgesTerraformEdgeNodeTerraform.Id, and is useful for accessing the field via an interface.
func (v *GetTerraformTerraformTerraformConnectionEdgesTerraformEdgeNodeTerraform) GetId() string {
	return v.TerraformFragment.Id
}

// GetName returns GetTerraformTerraformTerraformConnectionEdgesTerraformEdgeNodeTerraform.Name, and is useful for accessing the field via an interface.
func (v *GetTerraformTerraformTerraformConnectionEdgesTerraformEdgeNodeTerraform) GetName() string {
	return v.TerraformFragment.Name
}

// GetPackage returns GetTerraformTerraformTerraformConnectionEdgesTerraformEdgeNodeTerraform.Package, and is useful for accessing the field via an interface.
func (v *GetTerraformTerraformTerraformConnectionEdgesTerraformEdgeNodeTerraform) GetPackage() string {
	return v.TerraformFragment.Package
}

// GetDescription returns GetTerraformTerraformTerraformConnectionEdgesTerraformEdgeNodeTerraform.Description, and is useful for accessing the field via an interface.
func (v *GetTerraformTerraformTerraformConnectionEdgesTerraformEdgeNodeTerraform) GetDescription() string {
	return v.TerraformFragment.Description
}

// GetDependencies returns GetTerraformTerraformTerraformConnectionEdgesTerraformEdgeNodeTerraform.Dependencies, and is useful for accessing the field via an interface.
func (v *GetTerraformTerraformTerraformConnectionEdgesTerraformEdgeNodeTerraform) GetDependencies() TerraformFragmentDependencies {
	return v.TerraformFragment.Dependencies
}

// GetValuesTemplate returns GetTerraformTerraformTerraformConnectionEdgesTerraformEdgeNodeTerraform.ValuesTemplate, and is useful for accessing the field via an interface.
func (v *GetTerraformTerraformTerraformConnectionEdgesTerraformEdgeNodeTerraform) GetValuesTemplate() string {
	return v.TerraformFragment.ValuesTemplate
}

func (v *GetTerraformTerraformTerraformConnectionEdgesTerraformEdgeNodeTerraform) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetTerraformTerraformTerraformConnectionEdgesTerraformEdgeNodeTerraform
		graphql.NoUnmarshalJSON
	}
	firstPass.GetTerraformTerraformTerraformConnectionEdgesTerraformEdgeNodeTerraform = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.TerraformFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetTerraformTerraformTerraformConnectionEdgesTerraformEdgeNodeTerraform struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Package string `json:"package"`

	Description string `json:"description"`

	Dependencies TerraformFragmentDependencies `json:"dependencies"`

	ValuesTemplate string `json:"valuesTemplate"`
}

func (v *GetTerraformTerraformTerraformConnectionEdgesTerraformEdgeNodeTerraform) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetTerraformTerraformTerraformConnectionEdgesTerraformEdgeNodeTerraform) __premarshalJSON() (*__premarshalGetTerraformTerraformTerraformConnectionEdgesTerraformEdgeNodeTerraform, error) {
	var retval __premarshalGetTerraformTerraformTerraformConnectionEdgesTerraformEdgeNodeTerraform

	retval.Id = v.TerraformFragment.Id
	retval.Name = v.TerraformFragment.Name
	retval.Package = v.TerraformFragment.Package
	retval.Description = v.TerraformFragment.Description
	retval.Dependencies = v.TerraformFragment.Dependencies
	retval.ValuesTemplate = v.TerraformFragment.ValuesTemplate
	return &retval, nil
}

// GetTfProviderScaffoldResponse is returned by GetTfProviderScaffold on success.
type GetTfProviderScaffoldResponse struct {
	TerraformProvider GetTfProviderScaffoldTerraformProvider `json:"terraformProvider"`
}

// GetTerraformProvider returns GetTfProviderScaffoldResponse.TerraformProvider, and is useful for accessing the field via an interface.
func (v *GetTfProviderScaffoldResponse) GetTerraformProvider() GetTfProviderScaffoldTerraformProvider {
	return v.TerraformProvider
}

// GetTfProviderScaffoldTerraformProvider includes the requested fields of the GraphQL type TerraformProvider.
type GetTfProviderScaffoldTerraformProvider struct {
	Name    Provider `json:"name"`
	Content string   `json:"content"`
}

// GetName returns GetTfProviderScaffoldTerraformProvider.Name, and is useful for accessing the field via an interface.
func (v *GetTfProviderScaffoldTerraformProvider) GetName() Provider { return v.Name }

// GetContent returns GetTfProviderScaffoldTerraformProvider.Content, and is useful for accessing the field via an interface.
func (v *GetTfProviderScaffoldTerraformProvider) GetContent() string { return v.Content }

// GetTfProvidersResponse is returned by GetTfProviders on success.
type GetTfProvidersResponse struct {
	TerraformProviders []Provider `json:"terraformProviders"`
}

// GetTerraformProviders returns GetTfProvidersResponse.TerraformProviders, and is useful for accessing the field via an interface.
func (v *GetTfProvidersResponse) GetTerraformProviders() []Provider { return v.TerraformProviders }

// GetVersionsResponse is returned by GetVersions on success.
type GetVersionsResponse struct {
	Versions GetVersionsVersionsVersionConnection `json:"versions"`
}

// GetVersions returns GetVersionsResponse.Versions, and is useful for accessing the field via an interface.
func (v *GetVersionsResponse) GetVersions() GetVersionsVersionsVersionConnection { return v.Versions }

// GetVersionsVersionsVersionConnection includes the requested fields of the GraphQL type VersionConnection.
type GetVersionsVersionsVersionConnection struct {
	Edges []GetVersionsVersionsVersionConnectionEdgesVersionEdge `json:"edges"`
}

// GetEdges returns GetVersionsVersionsVersionConnection.Edges, and is useful for accessing the field via an interface.
func (v *GetVersionsVersionsVersionConnection) GetEdges() []GetVersionsVersionsVersionConnectionEdgesVersionEdge {
	return v.Edges
}

// GetVersionsVersionsVersionConnectionEdgesVersionEdge includes the requested fields of the GraphQL type VersionEdge.
type GetVersionsVersionsVersionConnectionEdgesVersionEdge struct {
	Node GetVersionsVersionsVersionConnectionEdgesVersionEdgeNodeVersion `json:"node"`
}

// GetNode returns GetVersionsVersionsVersionConnectionEdgesVersionEdge.Node, and is useful for accessing the field via an interface.
func (v *GetVersionsVersionsVersionConnectionEdgesVersionEdge) GetNode() GetVersionsVersionsVersionConnectionEdgesVersionEdgeNodeVersion {
	return v.Node
}

// GetVersionsVersionsVersionConnectionEdgesVersionEdgeNodeVersion includes the requested fields of the GraphQL type Version.
type GetVersionsVersionsVersionConnectionEdgesVersionEdgeNodeVersion struct {
	VersionFragment `json:"-"`
}

// GetId returns GetVersionsVersionsVersionConnectionEdgesVersionEdgeNodeVersion.Id, and is useful for accessing the field via an interface.
func (v *GetVersionsVersionsVersionConnectionEdgesVersionEdgeNodeVersion) GetId() string {
	return v.VersionFragment.Id
}

// GetReadme returns GetVersionsVersionsVersionConnectionEdgesVersionEdgeNodeVersion.Readme, and is useful for accessing the field via an interface.
func (v *GetVersionsVersionsVersionConnectionEdgesVersionEdgeNodeVersion) GetReadme() string {
	return v.VersionFragment.Readme
}

// GetVersion returns GetVersionsVersionsVersionConnectionEdgesVersionEdgeNodeVersion.Version, and is useful for accessing the field via an interface.
func (v *GetVersionsVersionsVersionConnectionEdgesVersionEdgeNodeVersion) GetVersion() string {
	return v.VersionFragment.Version
}

// GetValuesTemplate returns GetVersionsVersionsVersionConnectionEdgesVersionEdgeNodeVersion.ValuesTemplate, and is useful for accessing the field via an interface.
func (v *GetVersionsVersionsVersionConnectionEdgesVersionEdgeNodeVersion) GetValuesTemplate() string {
	return v.VersionFragment.ValuesTemplate
}

// GetPackage returns GetVersionsVersionsVersionConnectionEdgesVersionEdgeNodeVersion.Package, and is useful for accessing the field via an interface.
func (v *GetVersionsVersionsVersionConnectionEdgesVersionEdgeNodeVersion) GetPackage() string {
	return v.VersionFragment.Package
}

// GetCrds returns GetVersionsVersionsVersionConnectionEdgesVersionEdgeNodeVersion.Crds, and is useful for accessing the field via an interface.
func (v *GetVersionsVersionsVersionConnectionEdgesVersionEdgeNodeVersion) GetCrds() []VersionFragmentCrdsCrd {
	return v.VersionFragment.Crds
}

// GetDependencies returns GetVersionsVersionsVersionConnectionEdgesVersionEdgeNodeVersion.Dependencies, and is useful for accessing the field via an interface.
func (v *GetVersionsVersionsVersionConnectionEdgesVersionEdgeNodeVersion) GetDependencies() VersionFragmentDependencies {
	return v.VersionFragment.Dependencies
}

func (v *GetVersionsVersionsVersionConnectionEdgesVersionEdgeNodeVersion) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetVersionsVersionsVersionConnectionEdgesVersionEdgeNodeVersion
		graphql.NoUnmarshalJSON
	}
	firstPass.GetVersionsVersionsVersionConnectionEdgesVersionEdgeNodeVersion = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.VersionFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalGetVersionsVersionsVersionConnectionEdgesVersionEdgeNodeVersion struct {
	Id string `json:"id"`

	Readme string `json:"readme"`

	Version string `json:"version"`

	ValuesTemplate string `json:"valuesTemplate"`

	Package string `json:"package"`

	Crds []VersionFragmentCrdsCrd `json:"crds"`

	Dependencies VersionFragmentDependencies `json:"dependencies"`
}

func (v *GetVersionsVersionsVersionConnectionEdgesVersionEdgeNodeVersion) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetVersionsVersionsVersionConnectionEdgesVersionEdgeNodeVersion) __premarshalJSON() (*__premarshalGetVersionsVersionsVersionConnectionEdgesVersionEdgeNodeVersion, error) {
	var retval __premarshalGetVersionsVersionsVersionConnectionEdgesVersionEdgeNodeVersion

	retval.Id = v.VersionFragment.Id
	retval.Readme = v.VersionFragment.Readme
	retval.Version = v.VersionFragment.Version
	retval.ValuesTemplate = v.VersionFragment.ValuesTemplate
	retval.Package = v.VersionFragment.Package
	retval.Crds = v.VersionFragment.Crds
	retval.Dependencies = v.VersionFragment.Dependencies
	return &retval, nil
}

// ImpersonateServiceAccountImpersonateServiceAccountUser includes the requested fields of the GraphQL type User.
type ImpersonateServiceAccountImpersonateServiceAccountUser struct {
	Jwt   string `json:"jwt"`
	Email string `json:"email"`
}

// GetJwt returns ImpersonateServiceAccountImpersonateServiceAccountUser.Jwt, and is useful for accessing the field via an interface.
func (v *ImpersonateServiceAccountImpersonateServiceAccountUser) GetJwt() string { return v.Jwt }

// GetEmail returns ImpersonateServiceAccountImpersonateServiceAccountUser.Email, and is useful for accessing the field via an interface.
func (v *ImpersonateServiceAccountImpersonateServiceAccountUser) GetEmail() string { return v.Email }

// ImpersonateServiceAccountResponse is returned by ImpersonateServiceAccount on success.
type ImpersonateServiceAccountResponse struct {
	ImpersonateServiceAccount ImpersonateServiceAccountImpersonateServiceAccountUser `json:"impersonateServiceAccount"`
}

// GetImpersonateServiceAccount returns ImpersonateServiceAccountResponse.ImpersonateServiceAccount, and is useful for accessing the field via an interface.
func (v *ImpersonateServiceAccountResponse) GetImpersonateServiceAccount() ImpersonateServiceAccountImpersonateServiceAccountUser {
	return v.ImpersonateServiceAccount
}

// InstallRecipeInstallRecipeInstallation includes the requested fields of the GraphQL type Installation.
type InstallRecipeInstallRecipeInstallation struct {
	Id string `json:"id"`
}

// GetId returns InstallRecipeInstallRecipeInstallation.Id, and is useful for accessing the field via an interface.
func (v *InstallRecipeInstallRecipeInstallation) GetId() string { return v.Id }

// InstallRecipeResponse is returned by InstallRecipe on success.
type InstallRecipeResponse struct {
	InstallRecipe []InstallRecipeInstallRecipeInstallation `json:"installRecipe"`
}

// GetInstallRecipe returns InstallRecipeResponse.InstallRecipe, and is useful for accessing the field via an interface.
func (v *InstallRecipeResponse) GetInstallRecipe() []InstallRecipeInstallRecipeInstallation {
	return v.InstallRecipe
}

// InstallationFragment includes the GraphQL fields of Installation requested by the fragment InstallationFragment.
type InstallationFragment struct {
	Id           string                           `json:"id"`
	Context      map[string]interface{}           `json:"context"`
	LicenseKey   string                           `json:"licenseKey"`
	AcmeKeyId    string                           `json:"acmeKeyId"`
	AcmeSecret   string                           `json:"acmeSecret"`
	Repository   InstallationFragmentRepository   `json:"repository"`
	OidcProvider InstallationFragmentOidcProvider `json:"oidcProvider"`
}

// GetId returns InstallationFragment.Id, and is useful for accessing the field via an interface.
func (v *InstallationFragment) GetId() string { return v.Id }

// GetContext returns InstallationFragment.Context, and is useful for accessing the field via an interface.
func (v *InstallationFragment) GetContext() map[string]interface{} { return v.Context }

// GetLicenseKey returns InstallationFragment.LicenseKey, and is useful for accessing the field via an interface.
func (v *InstallationFragment) GetLicenseKey() string { return v.LicenseKey }

// GetAcmeKeyId returns InstallationFragment.AcmeKeyId, and is useful for accessing the field via an interface.
func (v *InstallationFragment) GetAcmeKeyId() string { return v.AcmeKeyId }

// GetAcmeSecret returns InstallationFragment.AcmeSecret, and is useful for accessing the field via an interface.
func (v *InstallationFragment) GetAcmeSecret() string { return v.AcmeSecret }

// GetRepository returns InstallationFragment.Repository, and is useful for accessing the field via an interface.
func (v *InstallationFragment) GetRepository() InstallationFragmentRepository { return v.Repository }

// GetOidcProvider returns InstallationFragment.OidcProvider, and is useful for accessing the field via an interface.
func (v *InstallationFragment) GetOidcProvider() InstallationFragmentOidcProvider {
	return v.OidcProvider
}

// InstallationFragmentOidcProvider includes the requested fields of the GraphQL type OidcProvider.
type InstallationFragmentOidcProvider struct {
	OIDCProvider `json:"-"`
}

// GetId returns InstallationFragmentOidcProvider.Id, and is useful for accessing the field via an interface.
func (v *InstallationFragmentOidcProvider) GetId() string { return v.OIDCProvider.Id }

// GetClientId returns InstallationFragmentOidcProvider.ClientId, and is useful for accessing the field via an interface.
func (v *InstallationFragmentOidcProvider) GetClientId() string { return v.OIDCProvider.ClientId }

// GetClientSecret returns InstallationFragmentOidcProvider.ClientSecret, and is useful for accessing the field via an interface.
func (v *InstallationFragmentOidcProvider) GetClientSecret() string {
	return v.OIDCProvider.ClientSecret
}

// GetRedirectUris returns InstallationFragmentOidcProvider.RedirectUris, and is useful for accessing the field via an interface.
func (v *InstallationFragmentOidcProvider) GetRedirectUris() []string {
	return v.OIDCProvider.RedirectUris
}

// GetBindings returns InstallationFragmentOidcProvider.Bindings, and is useful for accessing the field via an interface.
func (v *InstallationFragmentOidcProvider) GetBindings() []OIDCProviderBindingsOidcProviderBinding {
	return v.OIDCProvider.Bindings
}

// GetConfiguration returns InstallationFragmentOidcProvider.Configuration, and is useful for accessing the field via an interface.
func (v *InstallationFragmentOidcProvider) GetConfiguration() OIDCProviderConfigurationOuathConfiguration {
	return v.OIDCProvider.Configuration
}

func (v *InstallationFragmentOidcProvider) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*InstallationFragmentOidcProvider
		graphql.NoUnmarshalJSON
	}
	firstPass.InstallationFragmentOidcProvider = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.OIDCProvider)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalInstallationFragmentOidcProvider struct {
	Id string `json:"id"`

	ClientId string `json:"clientId"`

	ClientSecret string `json:"clientSecret"`

	RedirectUris []string `json:"redirectUris"`

	Bindings []OIDCProviderBindingsOidcProviderBinding `json:"bindings"`

	Configuration OIDCProviderConfigurationOuathConfiguration `json:"configuration"`
}

func (v *InstallationFragmentOidcProvider) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *InstallationFragmentOidcProvider) __premarshalJSON() (*__premarshalInstallationFragmentOidcProvider, error) {
	var retval __premarshalInstallationFragmentOidcProvider

	retval.Id = v.OIDCProvider.Id
	retval.ClientId = v.OIDCProvider.ClientId
	retval.ClientSecret = v.OIDCProvider.ClientSecret
	retval.RedirectUris = v.OIDCProvider.RedirectUris
	retval.Bindings = v.OIDCProvider.Bindings
	retval.Configuration = v.OIDCProvider.Configuration
	return &retval, nil
}

// InstallationFragmentRepository includes the requested fields of the GraphQL type Repository.
type InstallationFragmentRepository struct {
	RepositoryFragment `json:"-"`
}

// GetId returns InstallationFragmentRepository.Id, and is useful for accessing the field via an interface.
func (v *InstallationFragmentRepository) GetId() string { return v.RepositoryFragment.Id }

// GetName returns InstallationFragmentRepository.Name, and is useful for accessing the field via an interface.
func (v *InstallationFragmentRepository) GetName() string { return v.RepositoryFragment.Name }

// GetNotes returns InstallationFragmentRepository.Notes, and is useful for accessing the field via an interface.
func (v *InstallationFragmentRepository) GetNotes() string { return v.RepositoryFragment.Notes }

// GetIcon returns InstallationFragmentRepository.Icon, and is useful for accessing the field via an interface.
func (v *InstallationFragmentRepository) GetIcon() string { return v.RepositoryFragment.Icon }

// GetDarkIcon returns InstallationFragmentRepository.DarkIcon, and is useful for accessing the field via an interface.
func (v *InstallationFragmentRepository) GetDarkIcon() string { return v.RepositoryFragment.DarkIcon }

// GetDescription returns InstallationFragmentRepository.Description, and is useful for accessing the field via an interface.
func (v *InstallationFragmentRepository) GetDescription() string {
	return v.RepositoryFragment.Description
}

// GetPublisher returns InstallationFragmentRepository.Publisher, and is useful for accessing the field via an interface.
func (v *InstallationFragmentRepository) GetPublisher() RepositoryFragmentPublisher {
	return v.RepositoryFragment.Publisher
}

// GetRecipes returns InstallationFragmentRepository.Recipes, and is useful for accessing the field via an interface.
func (v *InstallationFragmentRepository) GetRecipes() []RepositoryFragmentRecipesRecipe {
	return v.RepositoryFragment.Recipes
}

func (v *InstallationFragmentRepository) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*InstallationFragmentRepository
		graphql.NoUnmarshalJSON
	}
	firstPass.InstallationFragmentRepository = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepositoryFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalInstallationFragmentRepository struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Notes string `json:"notes"`

	Icon string `json:"icon"`

	DarkIcon string `json:"darkIcon"`

	Description string `json:"description"`

	Publisher RepositoryFragmentPublisher `json:"publisher"`

	Recipes []RepositoryFragmentRecipesRecipe `json:"recipes"`
}

func (v *InstallationFragmentRepository) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *InstallationFragmentRepository) __premarshalJSON() (*__premarshalInstallationFragmentRepository, error) {
	var retval __premarshalInstallationFragmentRepository

	retval.Id = v.RepositoryFragment.Id
	retval.Name = v.RepositoryFragment.Name
	retval.Notes = v.RepositoryFragment.Notes
	retval.Icon = v.RepositoryFragment.Icon
	retval.DarkIcon = v.RepositoryFragment.DarkIcon
	retval.Description = v.RepositoryFragment.Description
	retval.Publisher = v.RepositoryFragment.Publisher
	retval.Recipes = v.RepositoryFragment.Recipes
	return &retval, nil
}

type IntegrationAttributes struct {
	Description string          `json:"description"`
	Icon        string          `json:"icon"`
	Name        string          `json:"name"`
	SourceUrl   string          `json:"sourceUrl"`
	Spec        interface{}     `json:"spec"`
	Tags        []TagAttributes `json:"tags"`
	Type        string          `json:"type"`
}

// GetDescription returns IntegrationAttributes.Description, and is useful for accessing the field via an interface.
func (v *IntegrationAttributes) GetDescription() string { return v.Description }

// GetIcon returns IntegrationAttributes.Icon, and is useful for accessing the field via an interface.
func (v *IntegrationAttributes) GetIcon() string { return v.Icon }

// GetName returns IntegrationAttributes.Name, and is useful for accessing the field via an interface.
func (v *IntegrationAttributes) GetName() string { return v.Name }

// GetSourceUrl returns IntegrationAttributes.SourceUrl, and is useful for accessing the field via an interface.
func (v *IntegrationAttributes) GetSourceUrl() string { return v.SourceUrl }

// GetSpec returns IntegrationAttributes.Spec, and is useful for accessing the field via an interface.
func (v *IntegrationAttributes) GetSpec() interface{} { return v.Spec }

// GetTags returns IntegrationAttributes.Tags, and is useful for accessing the field via an interface.
func (v *IntegrationAttributes) GetTags() []TagAttributes { return v.Tags }

// GetType returns IntegrationAttributes.Type, and is useful for accessing the field via an interface.
func (v *IntegrationAttributes) GetType() string { return v.Type }

// ListArtifactsRepository includes the requested fields of the GraphQL type Repository.
type ListArtifactsRepository struct {
	Artifacts []ListArtifactsRepositoryArtifactsArtifact `json:"artifacts"`
}

// GetArtifacts returns ListArtifactsRepository.Artifacts, and is useful for accessing the field via an interface.
func (v *ListArtifactsRepository) GetArtifacts() []ListArtifactsRepositoryArtifactsArtifact {
	return v.Artifacts
}

// ListArtifactsRepositoryArtifactsArtifact includes the requested fields of the GraphQL type Artifact.
type ListArtifactsRepositoryArtifactsArtifact struct {
	ArtifactFragment `json:"-"`
}

// GetId returns ListArtifactsRepositoryArtifactsArtifact.Id, and is useful for accessing the field via an interface.
func (v *ListArtifactsRepositoryArtifactsArtifact) GetId() string { return v.ArtifactFragment.Id }

// GetName returns ListArtifactsRepositoryArtifactsArtifact.Name, and is useful for accessing the field via an interface.
func (v *ListArtifactsRepositoryArtifactsArtifact) GetName() string { return v.ArtifactFragment.Name }

// GetReadme returns ListArtifactsRepositoryArtifactsArtifact.Readme, and is useful for accessing the field via an interface.
func (v *ListArtifactsRepositoryArtifactsArtifact) GetReadme() string {
	return v.ArtifactFragment.Readme
}

// GetPlatform returns ListArtifactsRepositoryArtifactsArtifact.Platform, and is useful for accessing the field via an interface.
func (v *ListArtifactsRepositoryArtifactsArtifact) GetPlatform() ArtifactPlatform {
	return v.ArtifactFragment.Platform
}

// GetArch returns ListArtifactsRepositoryArtifactsArtifact.Arch, and is useful for accessing the field via an interface.
func (v *ListArtifactsRepositoryArtifactsArtifact) GetArch() string { return v.ArtifactFragment.Arch }

// GetBlob returns ListArtifactsRepositoryArtifactsArtifact.Blob, and is useful for accessing the field via an interface.
func (v *ListArtifactsRepositoryArtifactsArtifact) GetBlob() string { return v.ArtifactFragment.Blob }

// GetSha returns ListArtifactsRepositoryArtifactsArtifact.Sha, and is useful for accessing the field via an interface.
func (v *ListArtifactsRepositoryArtifactsArtifact) GetSha() string { return v.ArtifactFragment.Sha }

// GetFilesize returns ListArtifactsRepositoryArtifactsArtifact.Filesize, and is useful for accessing the field via an interface.
func (v *ListArtifactsRepositoryArtifactsArtifact) GetFilesize() int {
	return v.ArtifactFragment.Filesize
}

func (v *ListArtifactsRepositoryArtifactsArtifact) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListArtifactsRepositoryArtifactsArtifact
		graphql.NoUnmarshalJSON
	}
	firstPass.ListArtifactsRepositoryArtifactsArtifact = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ArtifactFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalListArtifactsRepositoryArtifactsArtifact struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Readme string `json:"readme"`

	Platform ArtifactPlatform `json:"platform"`

	Arch string `json:"arch"`

	Blob string `json:"blob"`

	Sha string `json:"sha"`

	Filesize int `json:"filesize"`
}

func (v *ListArtifactsRepositoryArtifactsArtifact) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListArtifactsRepositoryArtifactsArtifact) __premarshalJSON() (*__premarshalListArtifactsRepositoryArtifactsArtifact, error) {
	var retval __premarshalListArtifactsRepositoryArtifactsArtifact

	retval.Id = v.ArtifactFragment.Id
	retval.Name = v.ArtifactFragment.Name
	retval.Readme = v.ArtifactFragment.Readme
	retval.Platform = v.ArtifactFragment.Platform
	retval.Arch = v.ArtifactFragment.Arch
	retval.Blob = v.ArtifactFragment.Blob
	retval.Sha = v.ArtifactFragment.Sha
	retval.Filesize = v.ArtifactFragment.Filesize
	return &retval, nil
}

// ListArtifactsResponse is returned by ListArtifacts on success.
type ListArtifactsResponse struct {
	Repository ListArtifactsRepository `json:"repository"`
}

// GetRepository returns ListArtifactsResponse.Repository, and is useful for accessing the field via an interface.
func (v *ListArtifactsResponse) GetRepository() ListArtifactsRepository { return v.Repository }

// ListKeysPublicKeysPublicKeyConnection includes the requested fields of the GraphQL type PublicKeyConnection.
type ListKeysPublicKeysPublicKeyConnection struct {
	Edges []ListKeysPublicKeysPublicKeyConnectionEdgesPublicKeyEdge `json:"edges"`
}

// GetEdges returns ListKeysPublicKeysPublicKeyConnection.Edges, and is useful for accessing the field via an interface.
func (v *ListKeysPublicKeysPublicKeyConnection) GetEdges() []ListKeysPublicKeysPublicKeyConnectionEdgesPublicKeyEdge {
	return v.Edges
}

// ListKeysPublicKeysPublicKeyConnectionEdgesPublicKeyEdge includes the requested fields of the GraphQL type PublicKeyEdge.
type ListKeysPublicKeysPublicKeyConnectionEdgesPublicKeyEdge struct {
	Node ListKeysPublicKeysPublicKeyConnectionEdgesPublicKeyEdgeNodePublicKey `json:"node"`
}

// GetNode returns ListKeysPublicKeysPublicKeyConnectionEdgesPublicKeyEdge.Node, and is useful for accessing the field via an interface.
func (v *ListKeysPublicKeysPublicKeyConnectionEdgesPublicKeyEdge) GetNode() ListKeysPublicKeysPublicKeyConnectionEdgesPublicKeyEdgeNodePublicKey {
	return v.Node
}

// ListKeysPublicKeysPublicKeyConnectionEdgesPublicKeyEdgeNodePublicKey includes the requested fields of the GraphQL type PublicKey.
type ListKeysPublicKeysPublicKeyConnectionEdgesPublicKeyEdgeNodePublicKey struct {
	PublicKeyFragment `json:"-"`
}

// GetId returns ListKeysPublicKeysPublicKeyConnectionEdgesPublicKeyEdgeNodePublicKey.Id, and is useful for accessing the field via an interface.
func (v *ListKeysPublicKeysPublicKeyConnectionEdgesPublicKeyEdgeNodePublicKey) GetId() string {
	return v.PublicKeyFragment.Id
}

// GetContent returns ListKeysPublicKeysPublicKeyConnectionEdgesPublicKeyEdgeNodePublicKey.Content, and is useful for accessing the field via an interface.
func (v *ListKeysPublicKeysPublicKeyConnectionEdgesPublicKeyEdgeNodePublicKey) GetContent() string {
	return v.PublicKeyFragment.Content
}

// GetUser returns ListKeysPublicKeysPublicKeyConnectionEdgesPublicKeyEdgeNodePublicKey.User, and is useful for accessing the field via an interface.
func (v *ListKeysPublicKeysPublicKeyConnectionEdgesPublicKeyEdgeNodePublicKey) GetUser() PublicKeyFragmentUser {
	return v.PublicKeyFragment.User
}

func (v *ListKeysPublicKeysPublicKeyConnectionEdgesPublicKeyEdgeNodePublicKey) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListKeysPublicKeysPublicKeyConnectionEdgesPublicKeyEdgeNodePublicKey
		graphql.NoUnmarshalJSON
	}
	firstPass.ListKeysPublicKeysPublicKeyConnectionEdgesPublicKeyEdgeNodePublicKey = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PublicKeyFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalListKeysPublicKeysPublicKeyConnectionEdgesPublicKeyEdgeNodePublicKey struct {
	Id string `json:"id"`

	Content string `json:"content"`

	User PublicKeyFragmentUser `json:"user"`
}

func (v *ListKeysPublicKeysPublicKeyConnectionEdgesPublicKeyEdgeNodePublicKey) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListKeysPublicKeysPublicKeyConnectionEdgesPublicKeyEdgeNodePublicKey) __premarshalJSON() (*__premarshalListKeysPublicKeysPublicKeyConnectionEdgesPublicKeyEdgeNodePublicKey, error) {
	var retval __premarshalListKeysPublicKeysPublicKeyConnectionEdgesPublicKeyEdgeNodePublicKey

	retval.Id = v.PublicKeyFragment.Id
	retval.Content = v.PublicKeyFragment.Content
	retval.User = v.PublicKeyFragment.User
	return &retval, nil
}

// ListKeysResponse is returned by ListKeys on success.
type ListKeysResponse struct {
	PublicKeys ListKeysPublicKeysPublicKeyConnection `json:"publicKeys"`
}

// GetPublicKeys returns ListKeysResponse.PublicKeys, and is useful for accessing the field via an interface.
func (v *ListKeysResponse) GetPublicKeys() ListKeysPublicKeysPublicKeyConnection { return v.PublicKeys }

// ListRecipesRecipesRecipeConnection includes the requested fields of the GraphQL type RecipeConnection.
type ListRecipesRecipesRecipeConnection struct {
	Edges []ListRecipesRecipesRecipeConnectionEdgesRecipeEdge `json:"edges"`
}

// GetEdges returns ListRecipesRecipesRecipeConnection.Edges, and is useful for accessing the field via an interface.
func (v *ListRecipesRecipesRecipeConnection) GetEdges() []ListRecipesRecipesRecipeConnectionEdgesRecipeEdge {
	return v.Edges
}

// ListRecipesRecipesRecipeConnectionEdgesRecipeEdge includes the requested fields of the GraphQL type RecipeEdge.
type ListRecipesRecipesRecipeConnectionEdgesRecipeEdge struct {
	Node ListRecipesRecipesRecipeConnectionEdgesRecipeEdgeNodeRecipe `json:"node"`
}

// GetNode returns ListRecipesRecipesRecipeConnectionEdgesRecipeEdge.Node, and is useful for accessing the field via an interface.
func (v *ListRecipesRecipesRecipeConnectionEdgesRecipeEdge) GetNode() ListRecipesRecipesRecipeConnectionEdgesRecipeEdgeNodeRecipe {
	return v.Node
}

// ListRecipesRecipesRecipeConnectionEdgesRecipeEdgeNodeRecipe includes the requested fields of the GraphQL type Recipe.
type ListRecipesRecipesRecipeConnectionEdgesRecipeEdgeNodeRecipe struct {
	RecipeFragment `json:"-"`
}

// GetId returns ListRecipesRecipesRecipeConnectionEdgesRecipeEdgeNodeRecipe.Id, and is useful for accessing the field via an interface.
func (v *ListRecipesRecipesRecipeConnectionEdgesRecipeEdgeNodeRecipe) GetId() string {
	return v.RecipeFragment.Id
}

// GetName returns ListRecipesRecipesRecipeConnectionEdgesRecipeEdgeNodeRecipe.Name, and is useful for accessing the field via an interface.
func (v *ListRecipesRecipesRecipeConnectionEdgesRecipeEdgeNodeRecipe) GetName() string {
	return v.RecipeFragment.Name
}

// GetDescription returns ListRecipesRecipesRecipeConnectionEdgesRecipeEdgeNodeRecipe.Description, and is useful for accessing the field via an interface.
func (v *ListRecipesRecipesRecipeConnectionEdgesRecipeEdgeNodeRecipe) GetDescription() string {
	return v.RecipeFragment.Description
}

// GetRestricted returns ListRecipesRecipesRecipeConnectionEdgesRecipeEdgeNodeRecipe.Restricted, and is useful for accessing the field via an interface.
func (v *ListRecipesRecipesRecipeConnectionEdgesRecipeEdgeNodeRecipe) GetRestricted() bool {
	return v.RecipeFragment.Restricted
}

// GetProvider returns ListRecipesRecipesRecipeConnectionEdgesRecipeEdgeNodeRecipe.Provider, and is useful for accessing the field via an interface.
func (v *ListRecipesRecipesRecipeConnectionEdgesRecipeEdgeNodeRecipe) GetProvider() Provider {
	return v.RecipeFragment.Provider
}

// GetTests returns ListRecipesRecipesRecipeConnectionEdgesRecipeEdgeNodeRecipe.Tests, and is useful for accessing the field via an interface.
func (v *ListRecipesRecipesRecipeConnectionEdgesRecipeEdgeNodeRecipe) GetTests() []RecipeFragmentTestsRecipeTest {
	return v.RecipeFragment.Tests
}

// GetRepository returns ListRecipesRecipesRecipeConnectionEdgesRecipeEdgeNodeRecipe.Repository, and is useful for accessing the field via an interface.
func (v *ListRecipesRecipesRecipeConnectionEdgesRecipeEdgeNodeRecipe) GetRepository() RecipeFragmentRepository {
	return v.RecipeFragment.Repository
}

// GetOidcSettings returns ListRecipesRecipesRecipeConnectionEdgesRecipeEdgeNodeRecipe.OidcSettings, and is useful for accessing the field via an interface.
func (v *ListRecipesRecipesRecipeConnectionEdgesRecipeEdgeNodeRecipe) GetOidcSettings() RecipeFragmentOidcSettings {
	return v.RecipeFragment.OidcSettings
}

func (v *ListRecipesRecipesRecipeConnectionEdgesRecipeEdgeNodeRecipe) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListRecipesRecipesRecipeConnectionEdgesRecipeEdgeNodeRecipe
		graphql.NoUnmarshalJSON
	}
	firstPass.ListRecipesRecipesRecipeConnectionEdgesRecipeEdgeNodeRecipe = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RecipeFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalListRecipesRecipesRecipeConnectionEdgesRecipeEdgeNodeRecipe struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Description string `json:"description"`

	Restricted bool `json:"restricted"`

	Provider Provider `json:"provider"`

	Tests []RecipeFragmentTestsRecipeTest `json:"tests"`

	Repository RecipeFragmentRepository `json:"repository"`

	OidcSettings RecipeFragmentOidcSettings `json:"oidcSettings"`
}

func (v *ListRecipesRecipesRecipeConnectionEdgesRecipeEdgeNodeRecipe) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListRecipesRecipesRecipeConnectionEdgesRecipeEdgeNodeRecipe) __premarshalJSON() (*__premarshalListRecipesRecipesRecipeConnectionEdgesRecipeEdgeNodeRecipe, error) {
	var retval __premarshalListRecipesRecipesRecipeConnectionEdgesRecipeEdgeNodeRecipe

	retval.Id = v.RecipeFragment.Id
	retval.Name = v.RecipeFragment.Name
	retval.Description = v.RecipeFragment.Description
	retval.Restricted = v.RecipeFragment.Restricted
	retval.Provider = v.RecipeFragment.Provider
	retval.Tests = v.RecipeFragment.Tests
	retval.Repository = v.RecipeFragment.Repository
	retval.OidcSettings = v.RecipeFragment.OidcSettings
	return &retval, nil
}

// ListRecipesResponse is returned by ListRecipes on success.
type ListRecipesResponse struct {
	Recipes ListRecipesRecipesRecipeConnection `json:"recipes"`
}

// GetRecipes returns ListRecipesResponse.Recipes, and is useful for accessing the field via an interface.
func (v *ListRecipesResponse) GetRecipes() ListRecipesRecipesRecipeConnection { return v.Recipes }

// ListRepositoriesRepositoriesRepositoryConnection includes the requested fields of the GraphQL type RepositoryConnection.
type ListRepositoriesRepositoriesRepositoryConnection struct {
	Edges []ListRepositoriesRepositoriesRepositoryConnectionEdgesRepositoryEdge `json:"edges"`
}

// GetEdges returns ListRepositoriesRepositoriesRepositoryConnection.Edges, and is useful for accessing the field via an interface.
func (v *ListRepositoriesRepositoriesRepositoryConnection) GetEdges() []ListRepositoriesRepositoriesRepositoryConnectionEdgesRepositoryEdge {
	return v.Edges
}

// ListRepositoriesRepositoriesRepositoryConnectionEdgesRepositoryEdge includes the requested fields of the GraphQL type RepositoryEdge.
type ListRepositoriesRepositoriesRepositoryConnectionEdgesRepositoryEdge struct {
	Node ListRepositoriesRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository `json:"node"`
}

// GetNode returns ListRepositoriesRepositoriesRepositoryConnectionEdgesRepositoryEdge.Node, and is useful for accessing the field via an interface.
func (v *ListRepositoriesRepositoriesRepositoryConnectionEdgesRepositoryEdge) GetNode() ListRepositoriesRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository {
	return v.Node
}

// ListRepositoriesRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository includes the requested fields of the GraphQL type Repository.
type ListRepositoriesRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository struct {
	RepositoryFragment `json:"-"`
}

// GetId returns ListRepositoriesRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository.Id, and is useful for accessing the field via an interface.
func (v *ListRepositoriesRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository) GetId() string {
	return v.RepositoryFragment.Id
}

// GetName returns ListRepositoriesRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository.Name, and is useful for accessing the field via an interface.
func (v *ListRepositoriesRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository) GetName() string {
	return v.RepositoryFragment.Name
}

// GetNotes returns ListRepositoriesRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository.Notes, and is useful for accessing the field via an interface.
func (v *ListRepositoriesRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository) GetNotes() string {
	return v.RepositoryFragment.Notes
}

// GetIcon returns ListRepositoriesRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository.Icon, and is useful for accessing the field via an interface.
func (v *ListRepositoriesRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository) GetIcon() string {
	return v.RepositoryFragment.Icon
}

// GetDarkIcon returns ListRepositoriesRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository.DarkIcon, and is useful for accessing the field via an interface.
func (v *ListRepositoriesRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository) GetDarkIcon() string {
	return v.RepositoryFragment.DarkIcon
}

// GetDescription returns ListRepositoriesRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository.Description, and is useful for accessing the field via an interface.
func (v *ListRepositoriesRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository) GetDescription() string {
	return v.RepositoryFragment.Description
}

// GetPublisher returns ListRepositoriesRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository.Publisher, and is useful for accessing the field via an interface.
func (v *ListRepositoriesRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository) GetPublisher() RepositoryFragmentPublisher {
	return v.RepositoryFragment.Publisher
}

// GetRecipes returns ListRepositoriesRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository.Recipes, and is useful for accessing the field via an interface.
func (v *ListRepositoriesRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository) GetRecipes() []RepositoryFragmentRecipesRecipe {
	return v.RepositoryFragment.Recipes
}

func (v *ListRepositoriesRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ListRepositoriesRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository
		graphql.NoUnmarshalJSON
	}
	firstPass.ListRepositoriesRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepositoryFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalListRepositoriesRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Notes string `json:"notes"`

	Icon string `json:"icon"`

	DarkIcon string `json:"darkIcon"`

	Description string `json:"description"`

	Publisher RepositoryFragmentPublisher `json:"publisher"`

	Recipes []RepositoryFragmentRecipesRecipe `json:"recipes"`
}

func (v *ListRepositoriesRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ListRepositoriesRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository) __premarshalJSON() (*__premarshalListRepositoriesRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository, error) {
	var retval __premarshalListRepositoriesRepositoriesRepositoryConnectionEdgesRepositoryEdgeNodeRepository

	retval.Id = v.RepositoryFragment.Id
	retval.Name = v.RepositoryFragment.Name
	retval.Notes = v.RepositoryFragment.Notes
	retval.Icon = v.RepositoryFragment.Icon
	retval.DarkIcon = v.RepositoryFragment.DarkIcon
	retval.Description = v.RepositoryFragment.Description
	retval.Publisher = v.RepositoryFragment.Publisher
	retval.Recipes = v.RepositoryFragment.Recipes
	return &retval, nil
}

// ListRepositoriesResponse is returned by ListRepositories on success.
type ListRepositoriesResponse struct {
	Repositories ListRepositoriesRepositoriesRepositoryConnection `json:"repositories"`
}

// GetRepositories returns ListRepositoriesResponse.Repositories, and is useful for accessing the field via an interface.
func (v *ListRepositoriesResponse) GetRepositories() ListRepositoriesRepositoriesRepositoryConnection {
	return v.Repositories
}

// ListTokensResponse is returned by ListTokens on success.
type ListTokensResponse struct {
	Tokens ListTokensTokensPersistedTokenConnection `json:"tokens"`
}

// GetTokens returns ListTokensResponse.Tokens, and is useful for accessing the field via an interface.
func (v *ListTokensResponse) GetTokens() ListTokensTokensPersistedTokenConnection { return v.Tokens }

// ListTokensTokensPersistedTokenConnection includes the requested fields of the GraphQL type PersistedTokenConnection.
type ListTokensTokensPersistedTokenConnection struct {
	Edges []ListTokensTokensPersistedTokenConnectionEdgesPersistedTokenEdge `json:"edges"`
}

// GetEdges returns ListTokensTokensPersistedTokenConnection.Edges, and is useful for accessing the field via an interface.
func (v *ListTokensTokensPersistedTokenConnection) GetEdges() []ListTokensTokensPersistedTokenConnectionEdgesPersistedTokenEdge {
	return v.Edges
}

// ListTokensTokensPersistedTokenConnectionEdgesPersistedTokenEdge includes the requested fields of the GraphQL type PersistedTokenEdge.
type ListTokensTokensPersistedTokenConnectionEdgesPersistedTokenEdge struct {
	Node ListTokensTokensPersistedTokenConnectionEdgesPersistedTokenEdgeNodePersistedToken `json:"node"`
}

// GetNode returns ListTokensTokensPersistedTokenConnectionEdgesPersistedTokenEdge.Node, and is useful for accessing the field via an interface.
func (v *ListTokensTokensPersistedTokenConnectionEdgesPersistedTokenEdge) GetNode() ListTokensTokensPersistedTokenConnectionEdgesPersistedTokenEdgeNodePersistedToken {
	return v.Node
}

// ListTokensTokensPersistedTokenConnectionEdgesPersistedTokenEdgeNodePersistedToken includes the requested fields of the GraphQL type PersistedToken.
type ListTokensTokensPersistedTokenConnectionEdgesPersistedTokenEdgeNodePersistedToken struct {
	Token string `json:"token"`
}

// GetToken returns ListTokensTokensPersistedTokenConnectionEdgesPersistedTokenEdgeNodePersistedToken.Token, and is useful for accessing the field via an interface.
func (v *ListTokensTokensPersistedTokenConnectionEdgesPersistedTokenEdgeNodePersistedToken) GetToken() string {
	return v.Token
}

type LockAttributes struct {
	Lock string `json:"lock"`
}

// GetLock returns LockAttributes.Lock, and is useful for accessing the field via an interface.
func (v *LockAttributes) GetLock() string { return v.Lock }

// LoginLoginUser includes the requested fields of the GraphQL type User.
type LoginLoginUser struct {
	Jwt string `json:"jwt"`
}

// GetJwt returns LoginLoginUser.Jwt, and is useful for accessing the field via an interface.
func (v *LoginLoginUser) GetJwt() string { return v.Jwt }

type LoginMethod string

const (
	LoginMethodGithub       LoginMethod = "GITHUB"
	LoginMethodGoogle       LoginMethod = "GOOGLE"
	LoginMethodPassword     LoginMethod = "PASSWORD"
	LoginMethodPasswordless LoginMethod = "PASSWORDLESS"
	LoginMethodSso          LoginMethod = "SSO"
)

// LoginResponse is returned by Login on success.
type LoginResponse struct {
	Login LoginLoginUser `json:"login"`
}

// GetLogin returns LoginResponse.Login, and is useful for accessing the field via an interface.
func (v *LoginResponse) GetLogin() LoginLoginUser { return v.Login }

// MeMeUser includes the requested fields of the GraphQL type User.
type MeMeUser struct {
	Id    string `json:"id"`
	Email string `json:"email"`
}

// GetId returns MeMeUser.Id, and is useful for accessing the field via an interface.
func (v *MeMeUser) GetId() string { return v.Id }

// GetEmail returns MeMeUser.Email, and is useful for accessing the field via an interface.
func (v *MeMeUser) GetEmail() string { return v.Email }

// MeResponse is returned by Me on success.
type MeResponse struct {
	Me MeMeUser `json:"me"`
}

// GetMe returns MeResponse.Me, and is useful for accessing the field via an interface.
func (v *MeResponse) GetMe() MeMeUser { return v.Me }

// OIDCProvider includes the GraphQL fields of OidcProvider requested by the fragment OIDCProvider.
type OIDCProvider struct {
	Id            string                                      `json:"id"`
	ClientId      string                                      `json:"clientId"`
	ClientSecret  string                                      `json:"clientSecret"`
	RedirectUris  []string                                    `json:"redirectUris"`
	Bindings      []OIDCProviderBindingsOidcProviderBinding   `json:"bindings"`
	Configuration OIDCProviderConfigurationOuathConfiguration `json:"configuration"`
}

// GetId returns OIDCProvider.Id, and is useful for accessing the field via an interface.
func (v *OIDCProvider) GetId() string { return v.Id }

// GetClientId returns OIDCProvider.ClientId, and is useful for accessing the field via an interface.
func (v *OIDCProvider) GetClientId() string { return v.ClientId }

// GetClientSecret returns OIDCProvider.ClientSecret, and is useful for accessing the field via an interface.
func (v *OIDCProvider) GetClientSecret() string { return v.ClientSecret }

// GetRedirectUris returns OIDCProvider.RedirectUris, and is useful for accessing the field via an interface.
func (v *OIDCProvider) GetRedirectUris() []string { return v.RedirectUris }

// GetBindings returns OIDCProvider.Bindings, and is useful for accessing the field via an interface.
func (v *OIDCProvider) GetBindings() []OIDCProviderBindingsOidcProviderBinding { return v.Bindings }

// GetConfiguration returns OIDCProvider.Configuration, and is useful for accessing the field via an interface.
func (v *OIDCProvider) GetConfiguration() OIDCProviderConfigurationOuathConfiguration {
	return v.Configuration
}

// OIDCProviderBindingsOidcProviderBinding includes the requested fields of the GraphQL type OidcProviderBinding.
type OIDCProviderBindingsOidcProviderBinding struct {
	User  OIDCProviderBindingsOidcProviderBindingUser  `json:"user"`
	Group OIDCProviderBindingsOidcProviderBindingGroup `json:"group"`
}

// GetUser returns OIDCProviderBindingsOidcProviderBinding.User, and is useful for accessing the field via an interface.
func (v *OIDCProviderBindingsOidcProviderBinding) GetUser() OIDCProviderBindingsOidcProviderBindingUser {
	return v.User
}

// GetGroup returns OIDCProviderBindingsOidcProviderBinding.Group, and is useful for accessing the field via an interface.
func (v *OIDCProviderBindingsOidcProviderBinding) GetGroup() OIDCProviderBindingsOidcProviderBindingGroup {
	return v.Group
}

// OIDCProviderBindingsOidcProviderBindingGroup includes the requested fields of the GraphQL type Group.
type OIDCProviderBindingsOidcProviderBindingGroup struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

// GetId returns OIDCProviderBindingsOidcProviderBindingGroup.Id, and is useful for accessing the field via an interface.
func (v *OIDCProviderBindingsOidcProviderBindingGroup) GetId() string { return v.Id }

// GetName returns OIDCProviderBindingsOidcProviderBindingGroup.Name, and is useful for accessing the field via an interface.
func (v *OIDCProviderBindingsOidcProviderBindingGroup) GetName() string { return v.Name }

// OIDCProviderBindingsOidcProviderBindingUser includes the requested fields of the GraphQL type User.
type OIDCProviderBindingsOidcProviderBindingUser struct {
	Id    string `json:"id"`
	Email string `json:"email"`
}

// GetId returns OIDCProviderBindingsOidcProviderBindingUser.Id, and is useful for accessing the field via an interface.
func (v *OIDCProviderBindingsOidcProviderBindingUser) GetId() string { return v.Id }

// GetEmail returns OIDCProviderBindingsOidcProviderBindingUser.Email, and is useful for accessing the field via an interface.
func (v *OIDCProviderBindingsOidcProviderBindingUser) GetEmail() string { return v.Email }

// OIDCProviderConfigurationOuathConfiguration includes the requested fields of the GraphQL type OuathConfiguration.
type OIDCProviderConfigurationOuathConfiguration struct {
	Issuer                string `json:"issuer"`
	AuthorizationEndpoint string `json:"authorizationEndpoint"`
	TokenEndpoint         string `json:"tokenEndpoint"`
	JwksUri               string `json:"jwksUri"`
	UserinfoEndpoint      string `json:"userinfoEndpoint"`
}

// GetIssuer returns OIDCProviderConfigurationOuathConfiguration.Issuer, and is useful for accessing the field via an interface.
func (v *OIDCProviderConfigurationOuathConfiguration) GetIssuer() string { return v.Issuer }

// GetAuthorizationEndpoint returns OIDCProviderConfigurationOuathConfiguration.AuthorizationEndpoint, and is useful for accessing the field via an interface.
func (v *OIDCProviderConfigurationOuathConfiguration) GetAuthorizationEndpoint() string {
	return v.AuthorizationEndpoint
}

// GetTokenEndpoint returns OIDCProviderConfigurationOuathConfiguration.TokenEndpoint, and is useful for accessing the field via an interface.
func (v *OIDCProviderConfigurationOuathConfiguration) GetTokenEndpoint() string {
	return v.TokenEndpoint
}

// GetJwksUri returns OIDCProviderConfigurationOuathConfiguration.JwksUri, and is useful for accessing the field via an interface.
func (v *OIDCProviderConfigurationOuathConfiguration) GetJwksUri() string { return v.JwksUri }

// GetUserinfoEndpoint returns OIDCProviderConfigurationOuathConfiguration.UserinfoEndpoint, and is useful for accessing the field via an interface.
func (v *OIDCProviderConfigurationOuathConfiguration) GetUserinfoEndpoint() string {
	return v.UserinfoEndpoint
}

type OauthSettingsAttributes struct {
	AuthMethod OidcAuthMethod `json:"authMethod"`
	UriFormat  string         `json:"uriFormat"`
}

// GetAuthMethod returns OauthSettingsAttributes.AuthMethod, and is useful for accessing the field via an interface.
func (v *OauthSettingsAttributes) GetAuthMethod() OidcAuthMethod { return v.AuthMethod }

// GetUriFormat returns OauthSettingsAttributes.UriFormat, and is useful for accessing the field via an interface.
func (v *OauthSettingsAttributes) GetUriFormat() string { return v.UriFormat }

type OidcAttributes struct {
	AuthMethod   OidcAuthMethod      `json:"authMethod"`
	Bindings     []BindingAttributes `json:"bindings"`
	RedirectUris []string            `json:"redirectUris"`
}

// GetAuthMethod returns OidcAttributes.AuthMethod, and is useful for accessing the field via an interface.
func (v *OidcAttributes) GetAuthMethod() OidcAuthMethod { return v.AuthMethod }

// GetBindings returns OidcAttributes.Bindings, and is useful for accessing the field via an interface.
func (v *OidcAttributes) GetBindings() []BindingAttributes { return v.Bindings }

// GetRedirectUris returns OidcAttributes.RedirectUris, and is useful for accessing the field via an interface.
func (v *OidcAttributes) GetRedirectUris() []string { return v.RedirectUris }

type OidcAuthMethod string

const (
	OidcAuthMethodBasic OidcAuthMethod = "BASIC"
	OidcAuthMethodPost  OidcAuthMethod = "POST"
)

type OidcSettingsAttributes struct {
	AuthMethod OidcAuthMethod `json:"authMethod"`
	DomainKey  string         `json:"domainKey"`
	Subdomain  bool           `json:"subdomain"`
	UriFormat  string         `json:"uriFormat"`
	UriFormats []string       `json:"uriFormats"`
}

// GetAuthMethod returns OidcSettingsAttributes.AuthMethod, and is useful for accessing the field via an interface.
func (v *OidcSettingsAttributes) GetAuthMethod() OidcAuthMethod { return v.AuthMethod }

// GetDomainKey returns OidcSettingsAttributes.DomainKey, and is useful for accessing the field via an interface.
func (v *OidcSettingsAttributes) GetDomainKey() string { return v.DomainKey }

// GetSubdomain returns OidcSettingsAttributes.Subdomain, and is useful for accessing the field via an interface.
func (v *OidcSettingsAttributes) GetSubdomain() bool { return v.Subdomain }

// GetUriFormat returns OidcSettingsAttributes.UriFormat, and is useful for accessing the field via an interface.
func (v *OidcSettingsAttributes) GetUriFormat() string { return v.UriFormat }

// GetUriFormats returns OidcSettingsAttributes.UriFormats, and is useful for accessing the field via an interface.
func (v *OidcSettingsAttributes) GetUriFormats() []string { return v.UriFormats }

type Operation string

const (
	OperationEq     Operation = "EQ"
	OperationGt     Operation = "GT"
	OperationGte    Operation = "GTE"
	OperationLt     Operation = "LT"
	OperationLte    Operation = "LTE"
	OperationNot    Operation = "NOT"
	OperationPrefix Operation = "PREFIX"
	OperationSuffix Operation = "SUFFIX"
)

// PollLoginTokenLoginTokenUser includes the requested fields of the GraphQL type User.
type PollLoginTokenLoginTokenUser struct {
	Jwt string `json:"jwt"`
}

// GetJwt returns PollLoginTokenLoginTokenUser.Jwt, and is useful for accessing the field via an interface.
func (v *PollLoginTokenLoginTokenUser) GetJwt() string { return v.Jwt }

// PollLoginTokenResponse is returned by PollLoginToken on success.
type PollLoginTokenResponse struct {
	LoginToken PollLoginTokenLoginTokenUser `json:"loginToken"`
}

// GetLoginToken returns PollLoginTokenResponse.LoginToken, and is useful for accessing the field via an interface.
func (v *PollLoginTokenResponse) GetLoginToken() PollLoginTokenLoginTokenUser { return v.LoginToken }

type Provider string

const (
	ProviderAws        Provider = "AWS"
	ProviderAzure      Provider = "AZURE"
	ProviderCustom     Provider = "CUSTOM"
	ProviderEquinix    Provider = "EQUINIX"
	ProviderGcp        Provider = "GCP"
	ProviderKind       Provider = "KIND"
	ProviderKubernetes Provider = "KUBERNETES"
)

// PublicKeyFragment includes the GraphQL fields of PublicKey requested by the fragment PublicKeyFragment.
type PublicKeyFragment struct {
	Id      string                `json:"id"`
	Content string                `json:"content"`
	User    PublicKeyFragmentUser `json:"user"`
}

// GetId returns PublicKeyFragment.Id, and is useful for accessing the field via an interface.
func (v *PublicKeyFragment) GetId() string { return v.Id }

// GetContent returns PublicKeyFragment.Content, and is useful for accessing the field via an interface.
func (v *PublicKeyFragment) GetContent() string { return v.Content }

// GetUser returns PublicKeyFragment.User, and is useful for accessing the field via an interface.
func (v *PublicKeyFragment) GetUser() PublicKeyFragmentUser { return v.User }

// PublicKeyFragmentUser includes the requested fields of the GraphQL type User.
type PublicKeyFragmentUser struct {
	UserFragment `json:"-"`
}

// GetId returns PublicKeyFragmentUser.Id, and is useful for accessing the field via an interface.
func (v *PublicKeyFragmentUser) GetId() string { return v.UserFragment.Id }

// GetName returns PublicKeyFragmentUser.Name, and is useful for accessing the field via an interface.
func (v *PublicKeyFragmentUser) GetName() string { return v.UserFragment.Name }

// GetEmail returns PublicKeyFragmentUser.Email, and is useful for accessing the field via an interface.
func (v *PublicKeyFragmentUser) GetEmail() string { return v.UserFragment.Email }

func (v *PublicKeyFragmentUser) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PublicKeyFragmentUser
		graphql.NoUnmarshalJSON
	}
	firstPass.PublicKeyFragmentUser = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.UserFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPublicKeyFragmentUser struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Email string `json:"email"`
}

func (v *PublicKeyFragmentUser) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PublicKeyFragmentUser) __premarshalJSON() (*__premarshalPublicKeyFragmentUser, error) {
	var retval __premarshalPublicKeyFragmentUser

	retval.Id = v.UserFragment.Id
	retval.Name = v.UserFragment.Name
	retval.Email = v.UserFragment.Email
	return &retval, nil
}

type RecipeAttributes struct {
	Dependencies []RecipeDependencyAttributes `json:"dependencies"`
	Description  string                       `json:"description"`
	Name         string                       `json:"name"`
	OidcSettings OidcSettingsAttributes       `json:"oidcSettings"`
	Private      bool                         `json:"private"`
	Provider     Provider                     `json:"provider"`
	Restricted   bool                         `json:"restricted"`
	Sections     []RecipeSectionAttributes    `json:"sections"`
	Tests        []RecipeTestAttributes       `json:"tests"`
}

// GetDependencies returns RecipeAttributes.Dependencies, and is useful for accessing the field via an interface.
func (v *RecipeAttributes) GetDependencies() []RecipeDependencyAttributes { return v.Dependencies }

// GetDescription returns RecipeAttributes.Description, and is useful for accessing the field via an interface.
func (v *RecipeAttributes) GetDescription() string { return v.Description }

// GetName returns RecipeAttributes.Name, and is useful for accessing the field via an interface.
func (v *RecipeAttributes) GetName() string { return v.Name }

// GetOidcSettings returns RecipeAttributes.OidcSettings, and is useful for accessing the field via an interface.
func (v *RecipeAttributes) GetOidcSettings() OidcSettingsAttributes { return v.OidcSettings }

// GetPrivate returns RecipeAttributes.Private, and is useful for accessing the field via an interface.
func (v *RecipeAttributes) GetPrivate() bool { return v.Private }

// GetProvider returns RecipeAttributes.Provider, and is useful for accessing the field via an interface.
func (v *RecipeAttributes) GetProvider() Provider { return v.Provider }

// GetRestricted returns RecipeAttributes.Restricted, and is useful for accessing the field via an interface.
func (v *RecipeAttributes) GetRestricted() bool { return v.Restricted }

// GetSections returns RecipeAttributes.Sections, and is useful for accessing the field via an interface.
func (v *RecipeAttributes) GetSections() []RecipeSectionAttributes { return v.Sections }

// GetTests returns RecipeAttributes.Tests, and is useful for accessing the field via an interface.
func (v *RecipeAttributes) GetTests() []RecipeTestAttributes { return v.Tests }

type RecipeConditionAttributes struct {
	Field     string    `json:"field"`
	Operation Operation `json:"operation"`
	Value     string    `json:"value"`
}

// GetField returns RecipeConditionAttributes.Field, and is useful for accessing the field via an interface.
func (v *RecipeConditionAttributes) GetField() string { return v.Field }

// GetOperation returns RecipeConditionAttributes.Operation, and is useful for accessing the field via an interface.
func (v *RecipeConditionAttributes) GetOperation() Operation { return v.Operation }

// GetValue returns RecipeConditionAttributes.Value, and is useful for accessing the field via an interface.
func (v *RecipeConditionAttributes) GetValue() string { return v.Value }

type RecipeConfigurationAttributes struct {
	Condition     RecipeConditionAttributes  `json:"condition"`
	Default       string                     `json:"default"`
	Documentation string                     `json:"documentation"`
	FunctionName  string                     `json:"functionName"`
	Longform      string                     `json:"longform"`
	Name          string                     `json:"name"`
	Optional      bool                       `json:"optional"`
	Placeholder   string                     `json:"placeholder"`
	Type          Datatype                   `json:"type"`
	Validation    RecipeValidationAttributes `json:"validation"`
}

// GetCondition returns RecipeConfigurationAttributes.Condition, and is useful for accessing the field via an interface.
func (v *RecipeConfigurationAttributes) GetCondition() RecipeConditionAttributes { return v.Condition }

// GetDefault returns RecipeConfigurationAttributes.Default, and is useful for accessing the field via an interface.
func (v *RecipeConfigurationAttributes) GetDefault() string { return v.Default }

// GetDocumentation returns RecipeConfigurationAttributes.Documentation, and is useful for accessing the field via an interface.
func (v *RecipeConfigurationAttributes) GetDocumentation() string { return v.Documentation }

// GetFunctionName returns RecipeConfigurationAttributes.FunctionName, and is useful for accessing the field via an interface.
func (v *RecipeConfigurationAttributes) GetFunctionName() string { return v.FunctionName }

// GetLongform returns RecipeConfigurationAttributes.Longform, and is useful for accessing the field via an interface.
func (v *RecipeConfigurationAttributes) GetLongform() string { return v.Longform }

// GetName returns RecipeConfigurationAttributes.Name, and is useful for accessing the field via an interface.
func (v *RecipeConfigurationAttributes) GetName() string { return v.Name }

// GetOptional returns RecipeConfigurationAttributes.Optional, and is useful for accessing the field via an interface.
func (v *RecipeConfigurationAttributes) GetOptional() bool { return v.Optional }

// GetPlaceholder returns RecipeConfigurationAttributes.Placeholder, and is useful for accessing the field via an interface.
func (v *RecipeConfigurationAttributes) GetPlaceholder() string { return v.Placeholder }

// GetType returns RecipeConfigurationAttributes.Type, and is useful for accessing the field via an interface.
func (v *RecipeConfigurationAttributes) GetType() Datatype { return v.Type }

// GetValidation returns RecipeConfigurationAttributes.Validation, and is useful for accessing the field via an interface.
func (v *RecipeConfigurationAttributes) GetValidation() RecipeValidationAttributes {
	return v.Validation
}

// RecipeConfigurationFragment includes the GraphQL fields of RecipeConfiguration requested by the fragment RecipeConfigurationFragment.
type RecipeConfigurationFragment struct {
	Name          string                                                `json:"name"`
	Type          Datatype                                              `json:"type"`
	Default       string                                                `json:"default"`
	Documentation string                                                `json:"documentation"`
	Optional      bool                                                  `json:"optional"`
	Placeholder   string                                                `json:"placeholder"`
	FunctionName  string                                                `json:"functionName"`
	Condition     RecipeConfigurationFragmentConditionRecipeCondition   `json:"condition"`
	Validation    RecipeConfigurationFragmentValidationRecipeValidation `json:"validation"`
}

// GetName returns RecipeConfigurationFragment.Name, and is useful for accessing the field via an interface.
func (v *RecipeConfigurationFragment) GetName() string { return v.Name }

// GetType returns RecipeConfigurationFragment.Type, and is useful for accessing the field via an interface.
func (v *RecipeConfigurationFragment) GetType() Datatype { return v.Type }

// GetDefault returns RecipeConfigurationFragment.Default, and is useful for accessing the field via an interface.
func (v *RecipeConfigurationFragment) GetDefault() string { return v.Default }

// GetDocumentation returns RecipeConfigurationFragment.Documentation, and is useful for accessing the field via an interface.
func (v *RecipeConfigurationFragment) GetDocumentation() string { return v.Documentation }

// GetOptional returns RecipeConfigurationFragment.Optional, and is useful for accessing the field via an interface.
func (v *RecipeConfigurationFragment) GetOptional() bool { return v.Optional }

// GetPlaceholder returns RecipeConfigurationFragment.Placeholder, and is useful for accessing the field via an interface.
func (v *RecipeConfigurationFragment) GetPlaceholder() string { return v.Placeholder }

// GetFunctionName returns RecipeConfigurationFragment.FunctionName, and is useful for accessing the field via an interface.
func (v *RecipeConfigurationFragment) GetFunctionName() string { return v.FunctionName }

// GetCondition returns RecipeConfigurationFragment.Condition, and is useful for accessing the field via an interface.
func (v *RecipeConfigurationFragment) GetCondition() RecipeConfigurationFragmentConditionRecipeCondition {
	return v.Condition
}

// GetValidation returns RecipeConfigurationFragment.Validation, and is useful for accessing the field via an interface.
func (v *RecipeConfigurationFragment) GetValidation() RecipeConfigurationFragmentValidationRecipeValidation {
	return v.Validation
}

// RecipeConfigurationFragmentConditionRecipeCondition includes the requested fields of the GraphQL type RecipeCondition.
type RecipeConfigurationFragmentConditionRecipeCondition struct {
	Field     string    `json:"field"`
	Operation Operation `json:"operation"`
	Value     string    `json:"value"`
}

// GetField returns RecipeConfigurationFragmentConditionRecipeCondition.Field, and is useful for accessing the field via an interface.
func (v *RecipeConfigurationFragmentConditionRecipeCondition) GetField() string { return v.Field }

// GetOperation returns RecipeConfigurationFragmentConditionRecipeCondition.Operation, and is useful for accessing the field via an interface.
func (v *RecipeConfigurationFragmentConditionRecipeCondition) GetOperation() Operation {
	return v.Operation
}

// GetValue returns RecipeConfigurationFragmentConditionRecipeCondition.Value, and is useful for accessing the field via an interface.
func (v *RecipeConfigurationFragmentConditionRecipeCondition) GetValue() string { return v.Value }

// RecipeConfigurationFragmentValidationRecipeValidation includes the requested fields of the GraphQL type RecipeValidation.
type RecipeConfigurationFragmentValidationRecipeValidation struct {
	Type    ValidationType `json:"type"`
	Regex   string         `json:"regex"`
	Message string         `json:"message"`
}

// GetType returns RecipeConfigurationFragmentValidationRecipeValidation.Type, and is useful for accessing the field via an interface.
func (v *RecipeConfigurationFragmentValidationRecipeValidation) GetType() ValidationType {
	return v.Type
}

// GetRegex returns RecipeConfigurationFragmentValidationRecipeValidation.Regex, and is useful for accessing the field via an interface.
func (v *RecipeConfigurationFragmentValidationRecipeValidation) GetRegex() string { return v.Regex }

// GetMessage returns RecipeConfigurationFragmentValidationRecipeValidation.Message, and is useful for accessing the field via an interface.
func (v *RecipeConfigurationFragmentValidationRecipeValidation) GetMessage() string { return v.Message }

type RecipeDependencyAttributes struct {
	Name string `json:"name"`
	Repo string `json:"repo"`
}

// GetName returns RecipeDependencyAttributes.Name, and is useful for accessing the field via an interface.
func (v *RecipeDependencyAttributes) GetName() string { return v.Name }

// GetRepo returns RecipeDependencyAttributes.Repo, and is useful for accessing the field via an interface.
func (v *RecipeDependencyAttributes) GetRepo() string { return v.Repo }

// RecipeFragment includes the GraphQL fields of Recipe requested by the fragment RecipeFragment.
type RecipeFragment struct {
	Id           string                          `json:"id"`
	Name         string                          `json:"name"`
	Description  string                          `json:"description"`
	Restricted   bool                            `json:"restricted"`
	Provider     Provider                        `json:"provider"`
	Tests        []RecipeFragmentTestsRecipeTest `json:"tests"`
	Repository   RecipeFragmentRepository        `json:"repository"`
	OidcSettings RecipeFragmentOidcSettings      `json:"oidcSettings"`
}

// GetId returns RecipeFragment.Id, and is useful for accessing the field via an interface.
func (v *RecipeFragment) GetId() string { return v.Id }

// GetName returns RecipeFragment.Name, and is useful for accessing the field via an interface.
func (v *RecipeFragment) GetName() string { return v.Name }

// GetDescription returns RecipeFragment.Description, and is useful for accessing the field via an interface.
func (v *RecipeFragment) GetDescription() string { return v.Description }

// GetRestricted returns RecipeFragment.Restricted, and is useful for accessing the field via an interface.
func (v *RecipeFragment) GetRestricted() bool { return v.Restricted }

// GetProvider returns RecipeFragment.Provider, and is useful for accessing the field via an interface.
func (v *RecipeFragment) GetProvider() Provider { return v.Provider }

// GetTests returns RecipeFragment.Tests, and is useful for accessing the field via an interface.
func (v *RecipeFragment) GetTests() []RecipeFragmentTestsRecipeTest { return v.Tests }

// GetRepository returns RecipeFragment.Repository, and is useful for accessing the field via an interface.
func (v *RecipeFragment) GetRepository() RecipeFragmentRepository { return v.Repository }

// GetOidcSettings returns RecipeFragment.OidcSettings, and is useful for accessing the field via an interface.
func (v *RecipeFragment) GetOidcSettings() RecipeFragmentOidcSettings { return v.OidcSettings }

// RecipeFragmentOidcSettings includes the requested fields of the GraphQL type OidcSettings.
type RecipeFragmentOidcSettings struct {
	UriFormat  string         `json:"uriFormat"`
	UriFormats []string       `json:"uriFormats"`
	AuthMethod OidcAuthMethod `json:"authMethod"`
	DomainKey  string         `json:"domainKey"`
	Subdomain  bool           `json:"subdomain"`
}

// GetUriFormat returns RecipeFragmentOidcSettings.UriFormat, and is useful for accessing the field via an interface.
func (v *RecipeFragmentOidcSettings) GetUriFormat() string { return v.UriFormat }

// GetUriFormats returns RecipeFragmentOidcSettings.UriFormats, and is useful for accessing the field via an interface.
func (v *RecipeFragmentOidcSettings) GetUriFormats() []string { return v.UriFormats }

// GetAuthMethod returns RecipeFragmentOidcSettings.AuthMethod, and is useful for accessing the field via an interface.
func (v *RecipeFragmentOidcSettings) GetAuthMethod() OidcAuthMethod { return v.AuthMethod }

// GetDomainKey returns RecipeFragmentOidcSettings.DomainKey, and is useful for accessing the field via an interface.
func (v *RecipeFragmentOidcSettings) GetDomainKey() string { return v.DomainKey }

// GetSubdomain returns RecipeFragmentOidcSettings.Subdomain, and is useful for accessing the field via an interface.
func (v *RecipeFragmentOidcSettings) GetSubdomain() bool { return v.Subdomain }

// RecipeFragmentRepository includes the requested fields of the GraphQL type Repository.
type RecipeFragmentRepository struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

// GetId returns RecipeFragmentRepository.Id, and is useful for accessing the field via an interface.
func (v *RecipeFragmentRepository) GetId() string { return v.Id }

// GetName returns RecipeFragmentRepository.Name, and is useful for accessing the field via an interface.
func (v *RecipeFragmentRepository) GetName() string { return v.Name }

// RecipeFragmentTestsRecipeTest includes the requested fields of the GraphQL type RecipeTest.
type RecipeFragmentTestsRecipeTest struct {
	Type    TestType                                        `json:"type"`
	Name    string                                          `json:"name"`
	Message string                                          `json:"message"`
	Args    []RecipeFragmentTestsRecipeTestArgsTestArgument `json:"args"`
}

// GetType returns RecipeFragmentTestsRecipeTest.Type, and is useful for accessing the field via an interface.
func (v *RecipeFragmentTestsRecipeTest) GetType() TestType { return v.Type }

// GetName returns RecipeFragmentTestsRecipeTest.Name, and is useful for accessing the field via an interface.
func (v *RecipeFragmentTestsRecipeTest) GetName() string { return v.Name }

// GetMessage returns RecipeFragmentTestsRecipeTest.Message, and is useful for accessing the field via an interface.
func (v *RecipeFragmentTestsRecipeTest) GetMessage() string { return v.Message }

// GetArgs returns RecipeFragmentTestsRecipeTest.Args, and is useful for accessing the field via an interface.
func (v *RecipeFragmentTestsRecipeTest) GetArgs() []RecipeFragmentTestsRecipeTestArgsTestArgument {
	return v.Args
}

// RecipeFragmentTestsRecipeTestArgsTestArgument includes the requested fields of the GraphQL type TestArgument.
type RecipeFragmentTestsRecipeTestArgsTestArgument struct {
	Name string `json:"name"`
	Repo string `json:"repo"`
	Key  string `json:"key"`
}

// GetName returns RecipeFragmentTestsRecipeTestArgsTestArgument.Name, and is useful for accessing the field via an interface.
func (v *RecipeFragmentTestsRecipeTestArgsTestArgument) GetName() string { return v.Name }

// GetRepo returns RecipeFragmentTestsRecipeTestArgsTestArgument.Repo, and is useful for accessing the field via an interface.
func (v *RecipeFragmentTestsRecipeTestArgsTestArgument) GetRepo() string { return v.Repo }

// GetKey returns RecipeFragmentTestsRecipeTestArgsTestArgument.Key, and is useful for accessing the field via an interface.
func (v *RecipeFragmentTestsRecipeTestArgsTestArgument) GetKey() string { return v.Key }

type RecipeItemAttributes struct {
	Configuration []RecipeConfigurationAttributes `json:"configuration"`
	Name          string                          `json:"name"`
	Type          RecipeItemType                  `json:"type"`
}

// GetConfiguration returns RecipeItemAttributes.Configuration, and is useful for accessing the field via an interface.
func (v *RecipeItemAttributes) GetConfiguration() []RecipeConfigurationAttributes {
	return v.Configuration
}

// GetName returns RecipeItemAttributes.Name, and is useful for accessing the field via an interface.
func (v *RecipeItemAttributes) GetName() string { return v.Name }

// GetType returns RecipeItemAttributes.Type, and is useful for accessing the field via an interface.
func (v *RecipeItemAttributes) GetType() RecipeItemType { return v.Type }

// RecipeItemFragment includes the GraphQL fields of RecipeItem requested by the fragment RecipeItemFragment.
type RecipeItemFragment struct {
	Id            string                                               `json:"id"`
	Chart         RecipeItemFragmentChart                              `json:"chart"`
	Terraform     RecipeItemFragmentTerraform                          `json:"terraform"`
	Configuration []RecipeItemFragmentConfigurationRecipeConfiguration `json:"configuration"`
}

// GetId returns RecipeItemFragment.Id, and is useful for accessing the field via an interface.
func (v *RecipeItemFragment) GetId() string { return v.Id }

// GetChart returns RecipeItemFragment.Chart, and is useful for accessing the field via an interface.
func (v *RecipeItemFragment) GetChart() RecipeItemFragmentChart { return v.Chart }

// GetTerraform returns RecipeItemFragment.Terraform, and is useful for accessing the field via an interface.
func (v *RecipeItemFragment) GetTerraform() RecipeItemFragmentTerraform { return v.Terraform }

// GetConfiguration returns RecipeItemFragment.Configuration, and is useful for accessing the field via an interface.
func (v *RecipeItemFragment) GetConfiguration() []RecipeItemFragmentConfigurationRecipeConfiguration {
	return v.Configuration
}

// RecipeItemFragmentChart includes the requested fields of the GraphQL type Chart.
type RecipeItemFragmentChart struct {
	ChartFragment `json:"-"`
}

// GetId returns RecipeItemFragmentChart.Id, and is useful for accessing the field via an interface.
func (v *RecipeItemFragmentChart) GetId() string { return v.ChartFragment.Id }

// GetName returns RecipeItemFragmentChart.Name, and is useful for accessing the field via an interface.
func (v *RecipeItemFragmentChart) GetName() string { return v.ChartFragment.Name }

// GetDescription returns RecipeItemFragmentChart.Description, and is useful for accessing the field via an interface.
func (v *RecipeItemFragmentChart) GetDescription() string { return v.ChartFragment.Description }

// GetLatestVersion returns RecipeItemFragmentChart.LatestVersion, and is useful for accessing the field via an interface.
func (v *RecipeItemFragmentChart) GetLatestVersion() string { return v.ChartFragment.LatestVersion }

func (v *RecipeItemFragmentChart) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RecipeItemFragmentChart
		graphql.NoUnmarshalJSON
	}
	firstPass.RecipeItemFragmentChart = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ChartFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRecipeItemFragmentChart struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Description string `json:"description"`

	LatestVersion string `json:"latestVersion"`
}

func (v *RecipeItemFragmentChart) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RecipeItemFragmentChart) __premarshalJSON() (*__premarshalRecipeItemFragmentChart, error) {
	var retval __premarshalRecipeItemFragmentChart

	retval.Id = v.ChartFragment.Id
	retval.Name = v.ChartFragment.Name
	retval.Description = v.ChartFragment.Description
	retval.LatestVersion = v.ChartFragment.LatestVersion
	return &retval, nil
}

// RecipeItemFragmentConfigurationRecipeConfiguration includes the requested fields of the GraphQL type RecipeConfiguration.
type RecipeItemFragmentConfigurationRecipeConfiguration struct {
	RecipeConfigurationFragment `json:"-"`
}

// GetName returns RecipeItemFragmentConfigurationRecipeConfiguration.Name, and is useful for accessing the field via an interface.
func (v *RecipeItemFragmentConfigurationRecipeConfiguration) GetName() string {
	return v.RecipeConfigurationFragment.Name
}

// GetType returns RecipeItemFragmentConfigurationRecipeConfiguration.Type, and is useful for accessing the field via an interface.
func (v *RecipeItemFragmentConfigurationRecipeConfiguration) GetType() Datatype {
	return v.RecipeConfigurationFragment.Type
}

// GetDefault returns RecipeItemFragmentConfigurationRecipeConfiguration.Default, and is useful for accessing the field via an interface.
func (v *RecipeItemFragmentConfigurationRecipeConfiguration) GetDefault() string {
	return v.RecipeConfigurationFragment.Default
}

// GetDocumentation returns RecipeItemFragmentConfigurationRecipeConfiguration.Documentation, and is useful for accessing the field via an interface.
func (v *RecipeItemFragmentConfigurationRecipeConfiguration) GetDocumentation() string {
	return v.RecipeConfigurationFragment.Documentation
}

// GetOptional returns RecipeItemFragmentConfigurationRecipeConfiguration.Optional, and is useful for accessing the field via an interface.
func (v *RecipeItemFragmentConfigurationRecipeConfiguration) GetOptional() bool {
	return v.RecipeConfigurationFragment.Optional
}

// GetPlaceholder returns RecipeItemFragmentConfigurationRecipeConfiguration.Placeholder, and is useful for accessing the field via an interface.
func (v *RecipeItemFragmentConfigurationRecipeConfiguration) GetPlaceholder() string {
	return v.RecipeConfigurationFragment.Placeholder
}

// GetFunctionName returns RecipeItemFragmentConfigurationRecipeConfiguration.FunctionName, and is useful for accessing the field via an interface.
func (v *RecipeItemFragmentConfigurationRecipeConfiguration) GetFunctionName() string {
	return v.RecipeConfigurationFragment.FunctionName
}

// GetCondition returns RecipeItemFragmentConfigurationRecipeConfiguration.Condition, and is useful for accessing the field via an interface.
func (v *RecipeItemFragmentConfigurationRecipeConfiguration) GetCondition() RecipeConfigurationFragmentConditionRecipeCondition {
	return v.RecipeConfigurationFragment.Condition
}

// GetValidation returns RecipeItemFragmentConfigurationRecipeConfiguration.Validation, and is useful for accessing the field via an interface.
func (v *RecipeItemFragmentConfigurationRecipeConfiguration) GetValidation() RecipeConfigurationFragmentValidationRecipeValidation {
	return v.RecipeConfigurationFragment.Validation
}

func (v *RecipeItemFragmentConfigurationRecipeConfiguration) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RecipeItemFragmentConfigurationRecipeConfiguration
		graphql.NoUnmarshalJSON
	}
	firstPass.RecipeItemFragmentConfigurationRecipeConfiguration = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RecipeConfigurationFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRecipeItemFragmentConfigurationRecipeConfiguration struct {
	Name string `json:"name"`

	Type Datatype `json:"type"`

	Default string `json:"default"`

	Documentation string `json:"documentation"`

	Optional bool `json:"optional"`

	Placeholder string `json:"placeholder"`

	FunctionName string `json:"functionName"`

	Condition RecipeConfigurationFragmentConditionRecipeCondition `json:"condition"`

	Validation RecipeConfigurationFragmentValidationRecipeValidation `json:"validation"`
}

func (v *RecipeItemFragmentConfigurationRecipeConfiguration) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RecipeItemFragmentConfigurationRecipeConfiguration) __premarshalJSON() (*__premarshalRecipeItemFragmentConfigurationRecipeConfiguration, error) {
	var retval __premarshalRecipeItemFragmentConfigurationRecipeConfiguration

	retval.Name = v.RecipeConfigurationFragment.Name
	retval.Type = v.RecipeConfigurationFragment.Type
	retval.Default = v.RecipeConfigurationFragment.Default
	retval.Documentation = v.RecipeConfigurationFragment.Documentation
	retval.Optional = v.RecipeConfigurationFragment.Optional
	retval.Placeholder = v.RecipeConfigurationFragment.Placeholder
	retval.FunctionName = v.RecipeConfigurationFragment.FunctionName
	retval.Condition = v.RecipeConfigurationFragment.Condition
	retval.Validation = v.RecipeConfigurationFragment.Validation
	return &retval, nil
}

// RecipeItemFragmentTerraform includes the requested fields of the GraphQL type Terraform.
type RecipeItemFragmentTerraform struct {
	TerraformFragment `json:"-"`
}

// GetId returns RecipeItemFragmentTerraform.Id, and is useful for accessing the field via an interface.
func (v *RecipeItemFragmentTerraform) GetId() string { return v.TerraformFragment.Id }

// GetName returns RecipeItemFragmentTerraform.Name, and is useful for accessing the field via an interface.
func (v *RecipeItemFragmentTerraform) GetName() string { return v.TerraformFragment.Name }

// GetPackage returns RecipeItemFragmentTerraform.Package, and is useful for accessing the field via an interface.
func (v *RecipeItemFragmentTerraform) GetPackage() string { return v.TerraformFragment.Package }

// GetDescription returns RecipeItemFragmentTerraform.Description, and is useful for accessing the field via an interface.
func (v *RecipeItemFragmentTerraform) GetDescription() string { return v.TerraformFragment.Description }

// GetDependencies returns RecipeItemFragmentTerraform.Dependencies, and is useful for accessing the field via an interface.
func (v *RecipeItemFragmentTerraform) GetDependencies() TerraformFragmentDependencies {
	return v.TerraformFragment.Dependencies
}

// GetValuesTemplate returns RecipeItemFragmentTerraform.ValuesTemplate, and is useful for accessing the field via an interface.
func (v *RecipeItemFragmentTerraform) GetValuesTemplate() string {
	return v.TerraformFragment.ValuesTemplate
}

func (v *RecipeItemFragmentTerraform) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RecipeItemFragmentTerraform
		graphql.NoUnmarshalJSON
	}
	firstPass.RecipeItemFragmentTerraform = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.TerraformFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRecipeItemFragmentTerraform struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Package string `json:"package"`

	Description string `json:"description"`

	Dependencies TerraformFragmentDependencies `json:"dependencies"`

	ValuesTemplate string `json:"valuesTemplate"`
}

func (v *RecipeItemFragmentTerraform) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RecipeItemFragmentTerraform) __premarshalJSON() (*__premarshalRecipeItemFragmentTerraform, error) {
	var retval __premarshalRecipeItemFragmentTerraform

	retval.Id = v.TerraformFragment.Id
	retval.Name = v.TerraformFragment.Name
	retval.Package = v.TerraformFragment.Package
	retval.Description = v.TerraformFragment.Description
	retval.Dependencies = v.TerraformFragment.Dependencies
	retval.ValuesTemplate = v.TerraformFragment.ValuesTemplate
	return &retval, nil
}

type RecipeItemType string

const (
	RecipeItemTypeHelm      RecipeItemType = "HELM"
	RecipeItemTypeTerraform RecipeItemType = "TERRAFORM"
)

type RecipeSectionAttributes struct {
	Configuration []RecipeConfigurationAttributes `json:"configuration"`
	Items         []RecipeItemAttributes          `json:"items"`
	Name          string                          `json:"name"`
}

// GetConfiguration returns RecipeSectionAttributes.Configuration, and is useful for accessing the field via an interface.
func (v *RecipeSectionAttributes) GetConfiguration() []RecipeConfigurationAttributes {
	return v.Configuration
}

// GetItems returns RecipeSectionAttributes.Items, and is useful for accessing the field via an interface.
func (v *RecipeSectionAttributes) GetItems() []RecipeItemAttributes { return v.Items }

// GetName returns RecipeSectionAttributes.Name, and is useful for accessing the field via an interface.
func (v *RecipeSectionAttributes) GetName() string { return v.Name }

// RecipeSectionFragment includes the GraphQL fields of RecipeSection requested by the fragment RecipeSectionFragment.
type RecipeSectionFragment struct {
	Index         int                                                     `json:"index"`
	Repository    RecipeSectionFragmentRepository                         `json:"repository"`
	RecipeItems   []RecipeSectionFragmentRecipeItemsRecipeItem            `json:"recipeItems"`
	Configuration []RecipeSectionFragmentConfigurationRecipeConfiguration `json:"configuration"`
}

// GetIndex returns RecipeSectionFragment.Index, and is useful for accessing the field via an interface.
func (v *RecipeSectionFragment) GetIndex() int { return v.Index }

// GetRepository returns RecipeSectionFragment.Repository, and is useful for accessing the field via an interface.
func (v *RecipeSectionFragment) GetRepository() RecipeSectionFragmentRepository { return v.Repository }

// GetRecipeItems returns RecipeSectionFragment.RecipeItems, and is useful for accessing the field via an interface.
func (v *RecipeSectionFragment) GetRecipeItems() []RecipeSectionFragmentRecipeItemsRecipeItem {
	return v.RecipeItems
}

// GetConfiguration returns RecipeSectionFragment.Configuration, and is useful for accessing the field via an interface.
func (v *RecipeSectionFragment) GetConfiguration() []RecipeSectionFragmentConfigurationRecipeConfiguration {
	return v.Configuration
}

// RecipeSectionFragmentConfigurationRecipeConfiguration includes the requested fields of the GraphQL type RecipeConfiguration.
type RecipeSectionFragmentConfigurationRecipeConfiguration struct {
	RecipeConfigurationFragment `json:"-"`
}

// GetName returns RecipeSectionFragmentConfigurationRecipeConfiguration.Name, and is useful for accessing the field via an interface.
func (v *RecipeSectionFragmentConfigurationRecipeConfiguration) GetName() string {
	return v.RecipeConfigurationFragment.Name
}

// GetType returns RecipeSectionFragmentConfigurationRecipeConfiguration.Type, and is useful for accessing the field via an interface.
func (v *RecipeSectionFragmentConfigurationRecipeConfiguration) GetType() Datatype {
	return v.RecipeConfigurationFragment.Type
}

// GetDefault returns RecipeSectionFragmentConfigurationRecipeConfiguration.Default, and is useful for accessing the field via an interface.
func (v *RecipeSectionFragmentConfigurationRecipeConfiguration) GetDefault() string {
	return v.RecipeConfigurationFragment.Default
}

// GetDocumentation returns RecipeSectionFragmentConfigurationRecipeConfiguration.Documentation, and is useful for accessing the field via an interface.
func (v *RecipeSectionFragmentConfigurationRecipeConfiguration) GetDocumentation() string {
	return v.RecipeConfigurationFragment.Documentation
}

// GetOptional returns RecipeSectionFragmentConfigurationRecipeConfiguration.Optional, and is useful for accessing the field via an interface.
func (v *RecipeSectionFragmentConfigurationRecipeConfiguration) GetOptional() bool {
	return v.RecipeConfigurationFragment.Optional
}

// GetPlaceholder returns RecipeSectionFragmentConfigurationRecipeConfiguration.Placeholder, and is useful for accessing the field via an interface.
func (v *RecipeSectionFragmentConfigurationRecipeConfiguration) GetPlaceholder() string {
	return v.RecipeConfigurationFragment.Placeholder
}

// GetFunctionName returns RecipeSectionFragmentConfigurationRecipeConfiguration.FunctionName, and is useful for accessing the field via an interface.
func (v *RecipeSectionFragmentConfigurationRecipeConfiguration) GetFunctionName() string {
	return v.RecipeConfigurationFragment.FunctionName
}

// GetCondition returns RecipeSectionFragmentConfigurationRecipeConfiguration.Condition, and is useful for accessing the field via an interface.
func (v *RecipeSectionFragmentConfigurationRecipeConfiguration) GetCondition() RecipeConfigurationFragmentConditionRecipeCondition {
	return v.RecipeConfigurationFragment.Condition
}

// GetValidation returns RecipeSectionFragmentConfigurationRecipeConfiguration.Validation, and is useful for accessing the field via an interface.
func (v *RecipeSectionFragmentConfigurationRecipeConfiguration) GetValidation() RecipeConfigurationFragmentValidationRecipeValidation {
	return v.RecipeConfigurationFragment.Validation
}

func (v *RecipeSectionFragmentConfigurationRecipeConfiguration) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RecipeSectionFragmentConfigurationRecipeConfiguration
		graphql.NoUnmarshalJSON
	}
	firstPass.RecipeSectionFragmentConfigurationRecipeConfiguration = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RecipeConfigurationFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRecipeSectionFragmentConfigurationRecipeConfiguration struct {
	Name string `json:"name"`

	Type Datatype `json:"type"`

	Default string `json:"default"`

	Documentation string `json:"documentation"`

	Optional bool `json:"optional"`

	Placeholder string `json:"placeholder"`

	FunctionName string `json:"functionName"`

	Condition RecipeConfigurationFragmentConditionRecipeCondition `json:"condition"`

	Validation RecipeConfigurationFragmentValidationRecipeValidation `json:"validation"`
}

func (v *RecipeSectionFragmentConfigurationRecipeConfiguration) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RecipeSectionFragmentConfigurationRecipeConfiguration) __premarshalJSON() (*__premarshalRecipeSectionFragmentConfigurationRecipeConfiguration, error) {
	var retval __premarshalRecipeSectionFragmentConfigurationRecipeConfiguration

	retval.Name = v.RecipeConfigurationFragment.Name
	retval.Type = v.RecipeConfigurationFragment.Type
	retval.Default = v.RecipeConfigurationFragment.Default
	retval.Documentation = v.RecipeConfigurationFragment.Documentation
	retval.Optional = v.RecipeConfigurationFragment.Optional
	retval.Placeholder = v.RecipeConfigurationFragment.Placeholder
	retval.FunctionName = v.RecipeConfigurationFragment.FunctionName
	retval.Condition = v.RecipeConfigurationFragment.Condition
	retval.Validation = v.RecipeConfigurationFragment.Validation
	return &retval, nil
}

// RecipeSectionFragmentRecipeItemsRecipeItem includes the requested fields of the GraphQL type RecipeItem.
type RecipeSectionFragmentRecipeItemsRecipeItem struct {
	RecipeItemFragment `json:"-"`
}

// GetId returns RecipeSectionFragmentRecipeItemsRecipeItem.Id, and is useful for accessing the field via an interface.
func (v *RecipeSectionFragmentRecipeItemsRecipeItem) GetId() string { return v.RecipeItemFragment.Id }

// GetChart returns RecipeSectionFragmentRecipeItemsRecipeItem.Chart, and is useful for accessing the field via an interface.
func (v *RecipeSectionFragmentRecipeItemsRecipeItem) GetChart() RecipeItemFragmentChart {
	return v.RecipeItemFragment.Chart
}

// GetTerraform returns RecipeSectionFragmentRecipeItemsRecipeItem.Terraform, and is useful for accessing the field via an interface.
func (v *RecipeSectionFragmentRecipeItemsRecipeItem) GetTerraform() RecipeItemFragmentTerraform {
	return v.RecipeItemFragment.Terraform
}

// GetConfiguration returns RecipeSectionFragmentRecipeItemsRecipeItem.Configuration, and is useful for accessing the field via an interface.
func (v *RecipeSectionFragmentRecipeItemsRecipeItem) GetConfiguration() []RecipeItemFragmentConfigurationRecipeConfiguration {
	return v.RecipeItemFragment.Configuration
}

func (v *RecipeSectionFragmentRecipeItemsRecipeItem) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RecipeSectionFragmentRecipeItemsRecipeItem
		graphql.NoUnmarshalJSON
	}
	firstPass.RecipeSectionFragmentRecipeItemsRecipeItem = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RecipeItemFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRecipeSectionFragmentRecipeItemsRecipeItem struct {
	Id string `json:"id"`

	Chart RecipeItemFragmentChart `json:"chart"`

	Terraform RecipeItemFragmentTerraform `json:"terraform"`

	Configuration []RecipeItemFragmentConfigurationRecipeConfiguration `json:"configuration"`
}

func (v *RecipeSectionFragmentRecipeItemsRecipeItem) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RecipeSectionFragmentRecipeItemsRecipeItem) __premarshalJSON() (*__premarshalRecipeSectionFragmentRecipeItemsRecipeItem, error) {
	var retval __premarshalRecipeSectionFragmentRecipeItemsRecipeItem

	retval.Id = v.RecipeItemFragment.Id
	retval.Chart = v.RecipeItemFragment.Chart
	retval.Terraform = v.RecipeItemFragment.Terraform
	retval.Configuration = v.RecipeItemFragment.Configuration
	return &retval, nil
}

// RecipeSectionFragmentRepository includes the requested fields of the GraphQL type Repository.
type RecipeSectionFragmentRepository struct {
	RepositoryFragment `json:"-"`
}

// GetId returns RecipeSectionFragmentRepository.Id, and is useful for accessing the field via an interface.
func (v *RecipeSectionFragmentRepository) GetId() string { return v.RepositoryFragment.Id }

// GetName returns RecipeSectionFragmentRepository.Name, and is useful for accessing the field via an interface.
func (v *RecipeSectionFragmentRepository) GetName() string { return v.RepositoryFragment.Name }

// GetNotes returns RecipeSectionFragmentRepository.Notes, and is useful for accessing the field via an interface.
func (v *RecipeSectionFragmentRepository) GetNotes() string { return v.RepositoryFragment.Notes }

// GetIcon returns RecipeSectionFragmentRepository.Icon, and is useful for accessing the field via an interface.
func (v *RecipeSectionFragmentRepository) GetIcon() string { return v.RepositoryFragment.Icon }

// GetDarkIcon returns RecipeSectionFragmentRepository.DarkIcon, and is useful for accessing the field via an interface.
func (v *RecipeSectionFragmentRepository) GetDarkIcon() string { return v.RepositoryFragment.DarkIcon }

// GetDescription returns RecipeSectionFragmentRepository.Description, and is useful for accessing the field via an interface.
func (v *RecipeSectionFragmentRepository) GetDescription() string {
	return v.RepositoryFragment.Description
}

// GetPublisher returns RecipeSectionFragmentRepository.Publisher, and is useful for accessing the field via an interface.
func (v *RecipeSectionFragmentRepository) GetPublisher() RepositoryFragmentPublisher {
	return v.RepositoryFragment.Publisher
}

// GetRecipes returns RecipeSectionFragmentRepository.Recipes, and is useful for accessing the field via an interface.
func (v *RecipeSectionFragmentRepository) GetRecipes() []RepositoryFragmentRecipesRecipe {
	return v.RepositoryFragment.Recipes
}

func (v *RecipeSectionFragmentRepository) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RecipeSectionFragmentRepository
		graphql.NoUnmarshalJSON
	}
	firstPass.RecipeSectionFragmentRepository = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.RepositoryFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRecipeSectionFragmentRepository struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Notes string `json:"notes"`

	Icon string `json:"icon"`

	DarkIcon string `json:"darkIcon"`

	Description string `json:"description"`

	Publisher RepositoryFragmentPublisher `json:"publisher"`

	Recipes []RepositoryFragmentRecipesRecipe `json:"recipes"`
}

func (v *RecipeSectionFragmentRepository) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RecipeSectionFragmentRepository) __premarshalJSON() (*__premarshalRecipeSectionFragmentRepository, error) {
	var retval __premarshalRecipeSectionFragmentRepository

	retval.Id = v.RepositoryFragment.Id
	retval.Name = v.RepositoryFragment.Name
	retval.Notes = v.RepositoryFragment.Notes
	retval.Icon = v.RepositoryFragment.Icon
	retval.DarkIcon = v.RepositoryFragment.DarkIcon
	retval.Description = v.RepositoryFragment.Description
	retval.Publisher = v.RepositoryFragment.Publisher
	retval.Recipes = v.RepositoryFragment.Recipes
	return &retval, nil
}

type RecipeTestAttributes struct {
	Args    []TestArgumentAttributes `json:"args"`
	Message string                   `json:"message"`
	Name    string                   `json:"name"`
	Type    TestType                 `json:"type"`
}

// GetArgs returns RecipeTestAttributes.Args, and is useful for accessing the field via an interface.
func (v *RecipeTestAttributes) GetArgs() []TestArgumentAttributes { return v.Args }

// GetMessage returns RecipeTestAttributes.Message, and is useful for accessing the field via an interface.
func (v *RecipeTestAttributes) GetMessage() string { return v.Message }

// GetName returns RecipeTestAttributes.Name, and is useful for accessing the field via an interface.
func (v *RecipeTestAttributes) GetName() string { return v.Name }

// GetType returns RecipeTestAttributes.Type, and is useful for accessing the field via an interface.
func (v *RecipeTestAttributes) GetType() TestType { return v.Type }

type RecipeValidationAttributes struct {
	Message string         `json:"message"`
	Regex   string         `json:"regex"`
	Type    ValidationType `json:"type"`
}

// GetMessage returns RecipeValidationAttributes.Message, and is useful for accessing the field via an interface.
func (v *RecipeValidationAttributes) GetMessage() string { return v.Message }

// GetRegex returns RecipeValidationAttributes.Regex, and is useful for accessing the field via an interface.
func (v *RecipeValidationAttributes) GetRegex() string { return v.Regex }

// GetType returns RecipeValidationAttributes.Type, and is useful for accessing the field via an interface.
func (v *RecipeValidationAttributes) GetType() ValidationType { return v.Type }

// ReleaseLockReleaseLockApplyLock includes the requested fields of the GraphQL type ApplyLock.
type ReleaseLockReleaseLockApplyLock struct {
	ApplyLockFragment `json:"-"`
}

// GetId returns ReleaseLockReleaseLockApplyLock.Id, and is useful for accessing the field via an interface.
func (v *ReleaseLockReleaseLockApplyLock) GetId() string { return v.ApplyLockFragment.Id }

// GetLock returns ReleaseLockReleaseLockApplyLock.Lock, and is useful for accessing the field via an interface.
func (v *ReleaseLockReleaseLockApplyLock) GetLock() string { return v.ApplyLockFragment.Lock }

func (v *ReleaseLockReleaseLockApplyLock) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ReleaseLockReleaseLockApplyLock
		graphql.NoUnmarshalJSON
	}
	firstPass.ReleaseLockReleaseLockApplyLock = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ApplyLockFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalReleaseLockReleaseLockApplyLock struct {
	Id string `json:"id"`

	Lock string `json:"lock"`
}

func (v *ReleaseLockReleaseLockApplyLock) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ReleaseLockReleaseLockApplyLock) __premarshalJSON() (*__premarshalReleaseLockReleaseLockApplyLock, error) {
	var retval __premarshalReleaseLockReleaseLockApplyLock

	retval.Id = v.ApplyLockFragment.Id
	retval.Lock = v.ApplyLockFragment.Lock
	return &retval, nil
}

// ReleaseLockResponse is returned by ReleaseLock on success.
type ReleaseLockResponse struct {
	ReleaseLock ReleaseLockReleaseLockApplyLock `json:"releaseLock"`
}

// GetReleaseLock returns ReleaseLockResponse.ReleaseLock, and is useful for accessing the field via an interface.
func (v *ReleaseLockResponse) GetReleaseLock() ReleaseLockReleaseLockApplyLock { return v.ReleaseLock }

type RepositoryAttributes struct {
	Category                      Category                     `json:"category"`
	DarkIcon                      string                       `json:"darkIcon"`
	DefaultTag                    string                       `json:"defaultTag"`
	Description                   string                       `json:"description"`
	Documentation                 string                       `json:"documentation"`
	GitUrl                        string                       `json:"gitUrl"`
	Homepage                      string                       `json:"homepage"`
	Icon                          string                       `json:"icon"`
	IntegrationResourceDefinition ResourceDefinitionAttributes `json:"integrationResourceDefinition"`
	Name                          string                       `json:"name"`
	Notes                         string                       `json:"notes"`
	OauthSettings                 OauthSettingsAttributes      `json:"oauthSettings"`
	Private                       bool                         `json:"private"`
	Readme                        string                       `json:"readme"`
	Secrets                       interface{}                  `json:"secrets"`
	Tags                          []TagAttributes              `json:"tags"`
}

// GetCategory returns RepositoryAttributes.Category, and is useful for accessing the field via an interface.
func (v *RepositoryAttributes) GetCategory() Category { return v.Category }

// GetDarkIcon returns RepositoryAttributes.DarkIcon, and is useful for accessing the field via an interface.
func (v *RepositoryAttributes) GetDarkIcon() string { return v.DarkIcon }

// GetDefaultTag returns RepositoryAttributes.DefaultTag, and is useful for accessing the field via an interface.
func (v *RepositoryAttributes) GetDefaultTag() string { return v.DefaultTag }

// GetDescription returns RepositoryAttributes.Description, and is useful for accessing the field via an interface.
func (v *RepositoryAttributes) GetDescription() string { return v.Description }

// GetDocumentation returns RepositoryAttributes.Documentation, and is useful for accessing the field via an interface.
func (v *RepositoryAttributes) GetDocumentation() string { return v.Documentation }

// GetGitUrl returns RepositoryAttributes.GitUrl, and is useful for accessing the field via an interface.
func (v *RepositoryAttributes) GetGitUrl() string { return v.GitUrl }

// GetHomepage returns RepositoryAttributes.Homepage, and is useful for accessing the field via an interface.
func (v *RepositoryAttributes) GetHomepage() string { return v.Homepage }

// GetIcon returns RepositoryAttributes.Icon, and is useful for accessing the field via an interface.
func (v *RepositoryAttributes) GetIcon() string { return v.Icon }

// GetIntegrationResourceDefinition returns RepositoryAttributes.IntegrationResourceDefinition, and is useful for accessing the field via an interface.
func (v *RepositoryAttributes) GetIntegrationResourceDefinition() ResourceDefinitionAttributes {
	return v.IntegrationResourceDefinition
}

// GetName returns RepositoryAttributes.Name, and is useful for accessing the field via an interface.
func (v *RepositoryAttributes) GetName() string { return v.Name }

// GetNotes returns RepositoryAttributes.Notes, and is useful for accessing the field via an interface.
func (v *RepositoryAttributes) GetNotes() string { return v.Notes }

// GetOauthSettings returns RepositoryAttributes.OauthSettings, and is useful for accessing the field via an interface.
func (v *RepositoryAttributes) GetOauthSettings() OauthSettingsAttributes { return v.OauthSettings }

// GetPrivate returns RepositoryAttributes.Private, and is useful for accessing the field via an interface.
func (v *RepositoryAttributes) GetPrivate() bool { return v.Private }

// GetReadme returns RepositoryAttributes.Readme, and is useful for accessing the field via an interface.
func (v *RepositoryAttributes) GetReadme() string { return v.Readme }

// GetSecrets returns RepositoryAttributes.Secrets, and is useful for accessing the field via an interface.
func (v *RepositoryAttributes) GetSecrets() interface{} { return v.Secrets }

// GetTags returns RepositoryAttributes.Tags, and is useful for accessing the field via an interface.
func (v *RepositoryAttributes) GetTags() []TagAttributes { return v.Tags }

// RepositoryFragment includes the GraphQL fields of Repository requested by the fragment RepositoryFragment.
type RepositoryFragment struct {
	Id          string                            `json:"id"`
	Name        string                            `json:"name"`
	Notes       string                            `json:"notes"`
	Icon        string                            `json:"icon"`
	DarkIcon    string                            `json:"darkIcon"`
	Description string                            `json:"description"`
	Publisher   RepositoryFragmentPublisher       `json:"publisher"`
	Recipes     []RepositoryFragmentRecipesRecipe `json:"recipes"`
}

// GetId returns RepositoryFragment.Id, and is useful for accessing the field via an interface.
func (v *RepositoryFragment) GetId() string { return v.Id }

// GetName returns RepositoryFragment.Name, and is useful for accessing the field via an interface.
func (v *RepositoryFragment) GetName() string { return v.Name }

// GetNotes returns RepositoryFragment.Notes, and is useful for accessing the field via an interface.
func (v *RepositoryFragment) GetNotes() string { return v.Notes }

// GetIcon returns RepositoryFragment.Icon, and is useful for accessing the field via an interface.
func (v *RepositoryFragment) GetIcon() string { return v.Icon }

// GetDarkIcon returns RepositoryFragment.DarkIcon, and is useful for accessing the field via an interface.
func (v *RepositoryFragment) GetDarkIcon() string { return v.DarkIcon }

// GetDescription returns RepositoryFragment.Description, and is useful for accessing the field via an interface.
func (v *RepositoryFragment) GetDescription() string { return v.Description }

// GetPublisher returns RepositoryFragment.Publisher, and is useful for accessing the field via an interface.
func (v *RepositoryFragment) GetPublisher() RepositoryFragmentPublisher { return v.Publisher }

// GetRecipes returns RepositoryFragment.Recipes, and is useful for accessing the field via an interface.
func (v *RepositoryFragment) GetRecipes() []RepositoryFragmentRecipesRecipe { return v.Recipes }

// RepositoryFragmentPublisher includes the requested fields of the GraphQL type Publisher.
type RepositoryFragmentPublisher struct {
	Name string `json:"name"`
}

// GetName returns RepositoryFragmentPublisher.Name, and is useful for accessing the field via an interface.
func (v *RepositoryFragmentPublisher) GetName() string { return v.Name }

// RepositoryFragmentRecipesRecipe includes the requested fields of the GraphQL type Recipe.
type RepositoryFragmentRecipesRecipe struct {
	Name string `json:"name"`
}

// GetName returns RepositoryFragmentRecipesRecipe.Name, and is useful for accessing the field via an interface.
func (v *RepositoryFragmentRecipesRecipe) GetName() string { return v.Name }

// ResetInstallationsResponse is returned by ResetInstallations on success.
type ResetInstallationsResponse struct {
	ResetInstallations int `json:"resetInstallations"`
}

// GetResetInstallations returns ResetInstallationsResponse.ResetInstallations, and is useful for accessing the field via an interface.
func (v *ResetInstallationsResponse) GetResetInstallations() int { return v.ResetInstallations }

type ResourceDefinitionAttributes struct {
	Name string                    `json:"name"`
	Spec []SpecificationAttributes `json:"spec"`
}

// GetName returns ResourceDefinitionAttributes.Name, and is useful for accessing the field via an interface.
func (v *ResourceDefinitionAttributes) GetName() string { return v.Name }

// GetSpec returns ResourceDefinitionAttributes.Spec, and is useful for accessing the field via an interface.
func (v *ResourceDefinitionAttributes) GetSpec() []SpecificationAttributes { return v.Spec }

// ScaffoldsResponse is returned by Scaffolds on success.
type ScaffoldsResponse struct {
	Scaffold []ScaffoldsScaffoldScaffoldFile `json:"scaffold"`
}

// GetScaffold returns ScaffoldsResponse.Scaffold, and is useful for accessing the field via an interface.
func (v *ScaffoldsResponse) GetScaffold() []ScaffoldsScaffoldScaffoldFile { return v.Scaffold }

// ScaffoldsScaffoldScaffoldFile includes the requested fields of the GraphQL type ScaffoldFile.
type ScaffoldsScaffoldScaffoldFile struct {
	Path    string `json:"path"`
	Content string `json:"content"`
}

// GetPath returns ScaffoldsScaffoldScaffoldFile.Path, and is useful for accessing the field via an interface.
func (v *ScaffoldsScaffoldScaffoldFile) GetPath() string { return v.Path }

// GetContent returns ScaffoldsScaffoldScaffoldFile.Content, and is useful for accessing the field via an interface.
func (v *ScaffoldsScaffoldScaffoldFile) GetContent() string { return v.Content }

type SpecDatatype string

const (
	SpecDatatypeBool   SpecDatatype = "BOOL"
	SpecDatatypeFloat  SpecDatatype = "FLOAT"
	SpecDatatypeInt    SpecDatatype = "INT"
	SpecDatatypeList   SpecDatatype = "LIST"
	SpecDatatypeObject SpecDatatype = "OBJECT"
	SpecDatatypeString SpecDatatype = "STRING"
)

type SpecificationAttributes struct {
	Inner    SpecDatatype              `json:"inner"`
	Name     string                    `json:"name"`
	Required bool                      `json:"required"`
	Spec     []SpecificationAttributes `json:"spec"`
	Type     SpecDatatype              `json:"type"`
}

// GetInner returns SpecificationAttributes.Inner, and is useful for accessing the field via an interface.
func (v *SpecificationAttributes) GetInner() SpecDatatype { return v.Inner }

// GetName returns SpecificationAttributes.Name, and is useful for accessing the field via an interface.
func (v *SpecificationAttributes) GetName() string { return v.Name }

// GetRequired returns SpecificationAttributes.Required, and is useful for accessing the field via an interface.
func (v *SpecificationAttributes) GetRequired() bool { return v.Required }

// GetSpec returns SpecificationAttributes.Spec, and is useful for accessing the field via an interface.
func (v *SpecificationAttributes) GetSpec() []SpecificationAttributes { return v.Spec }

// GetType returns SpecificationAttributes.Type, and is useful for accessing the field via an interface.
func (v *SpecificationAttributes) GetType() SpecDatatype { return v.Type }

type TagAttributes struct {
	Tag string `json:"tag"`
}

// GetTag returns TagAttributes.Tag, and is useful for accessing the field via an interface.
func (v *TagAttributes) GetTag() string { return v.Tag }

// TerraformFragment includes the GraphQL fields of Terraform requested by the fragment TerraformFragment.
type TerraformFragment struct {
	Id             string                        `json:"id"`
	Name           string                        `json:"name"`
	Package        string                        `json:"package"`
	Description    string                        `json:"description"`
	Dependencies   TerraformFragmentDependencies `json:"dependencies"`
	ValuesTemplate string                        `json:"valuesTemplate"`
}

// GetId returns TerraformFragment.Id, and is useful for accessing the field via an interface.
func (v *TerraformFragment) GetId() string { return v.Id }

// GetName returns TerraformFragment.Name, and is useful for accessing the field via an interface.
func (v *TerraformFragment) GetName() string { return v.Name }

// GetPackage returns TerraformFragment.Package, and is useful for accessing the field via an interface.
func (v *TerraformFragment) GetPackage() string { return v.Package }

// GetDescription returns TerraformFragment.Description, and is useful for accessing the field via an interface.
func (v *TerraformFragment) GetDescription() string { return v.Description }

// GetDependencies returns TerraformFragment.Dependencies, and is useful for accessing the field via an interface.
func (v *TerraformFragment) GetDependencies() TerraformFragmentDependencies { return v.Dependencies }

// GetValuesTemplate returns TerraformFragment.ValuesTemplate, and is useful for accessing the field via an interface.
func (v *TerraformFragment) GetValuesTemplate() string { return v.ValuesTemplate }

// TerraformFragmentDependencies includes the requested fields of the GraphQL type Dependencies.
type TerraformFragmentDependencies struct {
	DependenciesFragment `json:"-"`
}

// GetDependencies returns TerraformFragmentDependencies.Dependencies, and is useful for accessing the field via an interface.
func (v *TerraformFragmentDependencies) GetDependencies() []DependenciesFragmentDependenciesDependency {
	return v.DependenciesFragment.Dependencies
}

// GetWait returns TerraformFragmentDependencies.Wait, and is useful for accessing the field via an interface.
func (v *TerraformFragmentDependencies) GetWait() bool { return v.DependenciesFragment.Wait }

// GetApplication returns TerraformFragmentDependencies.Application, and is useful for accessing the field via an interface.
func (v *TerraformFragmentDependencies) GetApplication() bool {
	return v.DependenciesFragment.Application
}

// GetProviders returns TerraformFragmentDependencies.Providers, and is useful for accessing the field via an interface.
func (v *TerraformFragmentDependencies) GetProviders() []Provider {
	return v.DependenciesFragment.Providers
}

// GetSecrets returns TerraformFragmentDependencies.Secrets, and is useful for accessing the field via an interface.
func (v *TerraformFragmentDependencies) GetSecrets() []string { return v.DependenciesFragment.Secrets }

// GetWirings returns TerraformFragmentDependencies.Wirings, and is useful for accessing the field via an interface.
func (v *TerraformFragmentDependencies) GetWirings() DependenciesFragmentWirings {
	return v.DependenciesFragment.Wirings
}

// GetProviderWirings returns TerraformFragmentDependencies.ProviderWirings, and is useful for accessing the field via an interface.
func (v *TerraformFragmentDependencies) GetProviderWirings() map[string]interface{} {
	return v.DependenciesFragment.ProviderWirings
}

// GetOutputs returns TerraformFragmentDependencies.Outputs, and is useful for accessing the field via an interface.
func (v *TerraformFragmentDependencies) GetOutputs() map[string]interface{} {
	return v.DependenciesFragment.Outputs
}

func (v *TerraformFragmentDependencies) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*TerraformFragmentDependencies
		graphql.NoUnmarshalJSON
	}
	firstPass.TerraformFragmentDependencies = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DependenciesFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalTerraformFragmentDependencies struct {
	Dependencies []DependenciesFragmentDependenciesDependency `json:"dependencies"`

	Wait bool `json:"wait"`

	Application bool `json:"application"`

	Providers []Provider `json:"providers"`

	Secrets []string `json:"secrets"`

	Wirings DependenciesFragmentWirings `json:"wirings"`

	ProviderWirings map[string]interface{} `json:"providerWirings"`

	Outputs map[string]interface{} `json:"outputs"`
}

func (v *TerraformFragmentDependencies) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *TerraformFragmentDependencies) __premarshalJSON() (*__premarshalTerraformFragmentDependencies, error) {
	var retval __premarshalTerraformFragmentDependencies

	retval.Dependencies = v.DependenciesFragment.Dependencies
	retval.Wait = v.DependenciesFragment.Wait
	retval.Application = v.DependenciesFragment.Application
	retval.Providers = v.DependenciesFragment.Providers
	retval.Secrets = v.DependenciesFragment.Secrets
	retval.Wirings = v.DependenciesFragment.Wirings
	retval.ProviderWirings = v.DependenciesFragment.ProviderWirings
	retval.Outputs = v.DependenciesFragment.Outputs
	return &retval, nil
}

// TerraformInstallationFragment includes the GraphQL fields of TerraformInstallation requested by the fragment TerraformInstallationFragment.
type TerraformInstallationFragment struct {
	Id        string                                 `json:"id"`
	Terraform TerraformInstallationFragmentTerraform `json:"terraform"`
	Version   TerraformInstallationFragmentVersion   `json:"version"`
}

// GetId returns TerraformInstallationFragment.Id, and is useful for accessing the field via an interface.
func (v *TerraformInstallationFragment) GetId() string { return v.Id }

// GetTerraform returns TerraformInstallationFragment.Terraform, and is useful for accessing the field via an interface.
func (v *TerraformInstallationFragment) GetTerraform() TerraformInstallationFragmentTerraform {
	return v.Terraform
}

// GetVersion returns TerraformInstallationFragment.Version, and is useful for accessing the field via an interface.
func (v *TerraformInstallationFragment) GetVersion() TerraformInstallationFragmentVersion {
	return v.Version
}

// TerraformInstallationFragmentTerraform includes the requested fields of the GraphQL type Terraform.
type TerraformInstallationFragmentTerraform struct {
	TerraformFragment `json:"-"`
}

// GetId returns TerraformInstallationFragmentTerraform.Id, and is useful for accessing the field via an interface.
func (v *TerraformInstallationFragmentTerraform) GetId() string { return v.TerraformFragment.Id }

// GetName returns TerraformInstallationFragmentTerraform.Name, and is useful for accessing the field via an interface.
func (v *TerraformInstallationFragmentTerraform) GetName() string { return v.TerraformFragment.Name }

// GetPackage returns TerraformInstallationFragmentTerraform.Package, and is useful for accessing the field via an interface.
func (v *TerraformInstallationFragmentTerraform) GetPackage() string {
	return v.TerraformFragment.Package
}

// GetDescription returns TerraformInstallationFragmentTerraform.Description, and is useful for accessing the field via an interface.
func (v *TerraformInstallationFragmentTerraform) GetDescription() string {
	return v.TerraformFragment.Description
}

// GetDependencies returns TerraformInstallationFragmentTerraform.Dependencies, and is useful for accessing the field via an interface.
func (v *TerraformInstallationFragmentTerraform) GetDependencies() TerraformFragmentDependencies {
	return v.TerraformFragment.Dependencies
}

// GetValuesTemplate returns TerraformInstallationFragmentTerraform.ValuesTemplate, and is useful for accessing the field via an interface.
func (v *TerraformInstallationFragmentTerraform) GetValuesTemplate() string {
	return v.TerraformFragment.ValuesTemplate
}

func (v *TerraformInstallationFragmentTerraform) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*TerraformInstallationFragmentTerraform
		graphql.NoUnmarshalJSON
	}
	firstPass.TerraformInstallationFragmentTerraform = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.TerraformFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalTerraformInstallationFragmentTerraform struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Package string `json:"package"`

	Description string `json:"description"`

	Dependencies TerraformFragmentDependencies `json:"dependencies"`

	ValuesTemplate string `json:"valuesTemplate"`
}

func (v *TerraformInstallationFragmentTerraform) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *TerraformInstallationFragmentTerraform) __premarshalJSON() (*__premarshalTerraformInstallationFragmentTerraform, error) {
	var retval __premarshalTerraformInstallationFragmentTerraform

	retval.Id = v.TerraformFragment.Id
	retval.Name = v.TerraformFragment.Name
	retval.Package = v.TerraformFragment.Package
	retval.Description = v.TerraformFragment.Description
	retval.Dependencies = v.TerraformFragment.Dependencies
	retval.ValuesTemplate = v.TerraformFragment.ValuesTemplate
	return &retval, nil
}

// TerraformInstallationFragmentVersion includes the requested fields of the GraphQL type Version.
type TerraformInstallationFragmentVersion struct {
	VersionFragment `json:"-"`
}

// GetId returns TerraformInstallationFragmentVersion.Id, and is useful for accessing the field via an interface.
func (v *TerraformInstallationFragmentVersion) GetId() string { return v.VersionFragment.Id }

// GetReadme returns TerraformInstallationFragmentVersion.Readme, and is useful for accessing the field via an interface.
func (v *TerraformInstallationFragmentVersion) GetReadme() string { return v.VersionFragment.Readme }

// GetVersion returns TerraformInstallationFragmentVersion.Version, and is useful for accessing the field via an interface.
func (v *TerraformInstallationFragmentVersion) GetVersion() string { return v.VersionFragment.Version }

// GetValuesTemplate returns TerraformInstallationFragmentVersion.ValuesTemplate, and is useful for accessing the field via an interface.
func (v *TerraformInstallationFragmentVersion) GetValuesTemplate() string {
	return v.VersionFragment.ValuesTemplate
}

// GetPackage returns TerraformInstallationFragmentVersion.Package, and is useful for accessing the field via an interface.
func (v *TerraformInstallationFragmentVersion) GetPackage() string { return v.VersionFragment.Package }

// GetCrds returns TerraformInstallationFragmentVersion.Crds, and is useful for accessing the field via an interface.
func (v *TerraformInstallationFragmentVersion) GetCrds() []VersionFragmentCrdsCrd {
	return v.VersionFragment.Crds
}

// GetDependencies returns TerraformInstallationFragmentVersion.Dependencies, and is useful for accessing the field via an interface.
func (v *TerraformInstallationFragmentVersion) GetDependencies() VersionFragmentDependencies {
	return v.VersionFragment.Dependencies
}

func (v *TerraformInstallationFragmentVersion) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*TerraformInstallationFragmentVersion
		graphql.NoUnmarshalJSON
	}
	firstPass.TerraformInstallationFragmentVersion = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.VersionFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalTerraformInstallationFragmentVersion struct {
	Id string `json:"id"`

	Readme string `json:"readme"`

	Version string `json:"version"`

	ValuesTemplate string `json:"valuesTemplate"`

	Package string `json:"package"`

	Crds []VersionFragmentCrdsCrd `json:"crds"`

	Dependencies VersionFragmentDependencies `json:"dependencies"`
}

func (v *TerraformInstallationFragmentVersion) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *TerraformInstallationFragmentVersion) __premarshalJSON() (*__premarshalTerraformInstallationFragmentVersion, error) {
	var retval __premarshalTerraformInstallationFragmentVersion

	retval.Id = v.VersionFragment.Id
	retval.Readme = v.VersionFragment.Readme
	retval.Version = v.VersionFragment.Version
	retval.ValuesTemplate = v.VersionFragment.ValuesTemplate
	retval.Package = v.VersionFragment.Package
	retval.Crds = v.VersionFragment.Crds
	retval.Dependencies = v.VersionFragment.Dependencies
	return &retval, nil
}

type TestArgumentAttributes struct {
	Key  string `json:"key"`
	Name string `json:"name"`
	Repo string `json:"repo"`
}

// GetKey returns TestArgumentAttributes.Key, and is useful for accessing the field via an interface.
func (v *TestArgumentAttributes) GetKey() string { return v.Key }

// GetName returns TestArgumentAttributes.Name, and is useful for accessing the field via an interface.
func (v *TestArgumentAttributes) GetName() string { return v.Name }

// GetRepo returns TestArgumentAttributes.Repo, and is useful for accessing the field via an interface.
func (v *TestArgumentAttributes) GetRepo() string { return v.Repo }

type TestType string

const (
	TestTypeGit TestType = "GIT"
)

// UnlockRepositoryResponse is returned by UnlockRepository on success.
type UnlockRepositoryResponse struct {
	UnlockRepository int `json:"unlockRepository"`
}

// GetUnlockRepository returns UnlockRepositoryResponse.UnlockRepository, and is useful for accessing the field via an interface.
func (v *UnlockRepositoryResponse) GetUnlockRepository() int { return v.UnlockRepository }

// UpdateRepositoryResponse is returned by UpdateRepository on success.
type UpdateRepositoryResponse struct {
	UpdateRepository UpdateRepositoryUpdateRepository `json:"updateRepository"`
}

// GetUpdateRepository returns UpdateRepositoryResponse.UpdateRepository, and is useful for accessing the field via an interface.
func (v *UpdateRepositoryResponse) GetUpdateRepository() UpdateRepositoryUpdateRepository {
	return v.UpdateRepository
}

// UpdateRepositoryUpdateRepository includes the requested fields of the GraphQL type Repository.
type UpdateRepositoryUpdateRepository struct {
	Id string `json:"id"`
}

// GetId returns UpdateRepositoryUpdateRepository.Id, and is useful for accessing the field via an interface.
func (v *UpdateRepositoryUpdateRepository) GetId() string { return v.Id }

// UpdateVersionResponse is returned by UpdateVersion on success.
type UpdateVersionResponse struct {
	UpdateVersion UpdateVersionUpdateVersion `json:"updateVersion"`
}

// GetUpdateVersion returns UpdateVersionResponse.UpdateVersion, and is useful for accessing the field via an interface.
func (v *UpdateVersionResponse) GetUpdateVersion() UpdateVersionUpdateVersion { return v.UpdateVersion }

// UpdateVersionUpdateVersion includes the requested fields of the GraphQL type Version.
type UpdateVersionUpdateVersion struct {
	Id string `json:"id"`
}

// GetId returns UpdateVersionUpdateVersion.Id, and is useful for accessing the field via an interface.
func (v *UpdateVersionUpdateVersion) GetId() string { return v.Id }

// UploadTerraformResponse is returned by UploadTerraform on success.
type UploadTerraformResponse struct {
	UploadTerraform UploadTerraformUploadTerraform `json:"uploadTerraform"`
}

// GetUploadTerraform returns UploadTerraformResponse.UploadTerraform, and is useful for accessing the field via an interface.
func (v *UploadTerraformResponse) GetUploadTerraform() UploadTerraformUploadTerraform {
	return v.UploadTerraform
}

// UploadTerraformUploadTerraform includes the requested fields of the GraphQL type Terraform.
type UploadTerraformUploadTerraform struct {
	TerraformFragment `json:"-"`
}

// GetId returns UploadTerraformUploadTerraform.Id, and is useful for accessing the field via an interface.
func (v *UploadTerraformUploadTerraform) GetId() string { return v.TerraformFragment.Id }

// GetName returns UploadTerraformUploadTerraform.Name, and is useful for accessing the field via an interface.
func (v *UploadTerraformUploadTerraform) GetName() string { return v.TerraformFragment.Name }

// GetPackage returns UploadTerraformUploadTerraform.Package, and is useful for accessing the field via an interface.
func (v *UploadTerraformUploadTerraform) GetPackage() string { return v.TerraformFragment.Package }

// GetDescription returns UploadTerraformUploadTerraform.Description, and is useful for accessing the field via an interface.
func (v *UploadTerraformUploadTerraform) GetDescription() string {
	return v.TerraformFragment.Description
}

// GetDependencies returns UploadTerraformUploadTerraform.Dependencies, and is useful for accessing the field via an interface.
func (v *UploadTerraformUploadTerraform) GetDependencies() TerraformFragmentDependencies {
	return v.TerraformFragment.Dependencies
}

// GetValuesTemplate returns UploadTerraformUploadTerraform.ValuesTemplate, and is useful for accessing the field via an interface.
func (v *UploadTerraformUploadTerraform) GetValuesTemplate() string {
	return v.TerraformFragment.ValuesTemplate
}

func (v *UploadTerraformUploadTerraform) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UploadTerraformUploadTerraform
		graphql.NoUnmarshalJSON
	}
	firstPass.UploadTerraformUploadTerraform = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.TerraformFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUploadTerraformUploadTerraform struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Package string `json:"package"`

	Description string `json:"description"`

	Dependencies TerraformFragmentDependencies `json:"dependencies"`

	ValuesTemplate string `json:"valuesTemplate"`
}

func (v *UploadTerraformUploadTerraform) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UploadTerraformUploadTerraform) __premarshalJSON() (*__premarshalUploadTerraformUploadTerraform, error) {
	var retval __premarshalUploadTerraformUploadTerraform

	retval.Id = v.TerraformFragment.Id
	retval.Name = v.TerraformFragment.Name
	retval.Package = v.TerraformFragment.Package
	retval.Description = v.TerraformFragment.Description
	retval.Dependencies = v.TerraformFragment.Dependencies
	retval.ValuesTemplate = v.TerraformFragment.ValuesTemplate
	return &retval, nil
}

// UpsertOidcProviderResponse is returned by UpsertOidcProvider on success.
type UpsertOidcProviderResponse struct {
	UpsertOidcProvider UpsertOidcProviderUpsertOidcProvider `json:"upsertOidcProvider"`
}

// GetUpsertOidcProvider returns UpsertOidcProviderResponse.UpsertOidcProvider, and is useful for accessing the field via an interface.
func (v *UpsertOidcProviderResponse) GetUpsertOidcProvider() UpsertOidcProviderUpsertOidcProvider {
	return v.UpsertOidcProvider
}

// UpsertOidcProviderUpsertOidcProvider includes the requested fields of the GraphQL type OidcProvider.
type UpsertOidcProviderUpsertOidcProvider struct {
	Id string `json:"id"`
}

// GetId returns UpsertOidcProviderUpsertOidcProvider.Id, and is useful for accessing the field via an interface.
func (v *UpsertOidcProviderUpsertOidcProvider) GetId() string { return v.Id }

type UserEventAttributes struct {
	Data   string          `json:"data"`
	Event  string          `json:"event"`
	Status UserEventStatus `json:"status"`
}

// GetData returns UserEventAttributes.Data, and is useful for accessing the field via an interface.
func (v *UserEventAttributes) GetData() string { return v.Data }

// GetEvent returns UserEventAttributes.Event, and is useful for accessing the field via an interface.
func (v *UserEventAttributes) GetEvent() string { return v.Event }

// GetStatus returns UserEventAttributes.Status, and is useful for accessing the field via an interface.
func (v *UserEventAttributes) GetStatus() UserEventStatus { return v.Status }

type UserEventStatus string

const (
	UserEventStatusError UserEventStatus = "ERROR"
	UserEventStatusOk    UserEventStatus = "OK"
)

// UserFragment includes the GraphQL fields of User requested by the fragment UserFragment.
type UserFragment struct {
	Id    string `json:"id"`
	Name  string `json:"name"`
	Email string `json:"email"`
}

// GetId returns UserFragment.Id, and is useful for accessing the field via an interface.
func (v *UserFragment) GetId() string { return v.Id }

// GetName returns UserFragment.Name, and is useful for accessing the field via an interface.
func (v *UserFragment) GetName() string { return v.Name }

// GetEmail returns UserFragment.Email, and is useful for accessing the field via an interface.
func (v *UserFragment) GetEmail() string { return v.Email }

type ValidationType string

const (
	ValidationTypeRegex ValidationType = "REGEX"
)

type VersionAttributes struct {
	Tags []VersionTagAttributes `json:"tags"`
}

// GetTags returns VersionAttributes.Tags, and is useful for accessing the field via an interface.
func (v *VersionAttributes) GetTags() []VersionTagAttributes { return v.Tags }

// VersionFragment includes the GraphQL fields of Version requested by the fragment VersionFragment.
type VersionFragment struct {
	Id             string                      `json:"id"`
	Readme         string                      `json:"readme"`
	Version        string                      `json:"version"`
	ValuesTemplate string                      `json:"valuesTemplate"`
	Package        string                      `json:"package"`
	Crds           []VersionFragmentCrdsCrd    `json:"crds"`
	Dependencies   VersionFragmentDependencies `json:"dependencies"`
}

// GetId returns VersionFragment.Id, and is useful for accessing the field via an interface.
func (v *VersionFragment) GetId() string { return v.Id }

// GetReadme returns VersionFragment.Readme, and is useful for accessing the field via an interface.
func (v *VersionFragment) GetReadme() string { return v.Readme }

// GetVersion returns VersionFragment.Version, and is useful for accessing the field via an interface.
func (v *VersionFragment) GetVersion() string { return v.Version }

// GetValuesTemplate returns VersionFragment.ValuesTemplate, and is useful for accessing the field via an interface.
func (v *VersionFragment) GetValuesTemplate() string { return v.ValuesTemplate }

// GetPackage returns VersionFragment.Package, and is useful for accessing the field via an interface.
func (v *VersionFragment) GetPackage() string { return v.Package }

// GetCrds returns VersionFragment.Crds, and is useful for accessing the field via an interface.
func (v *VersionFragment) GetCrds() []VersionFragmentCrdsCrd { return v.Crds }

// GetDependencies returns VersionFragment.Dependencies, and is useful for accessing the field via an interface.
func (v *VersionFragment) GetDependencies() VersionFragmentDependencies { return v.Dependencies }

// VersionFragmentCrdsCrd includes the requested fields of the GraphQL type Crd.
type VersionFragmentCrdsCrd struct {
	CrdFragment `json:"-"`
}

// GetId returns VersionFragmentCrdsCrd.Id, and is useful for accessing the field via an interface.
func (v *VersionFragmentCrdsCrd) GetId() string { return v.CrdFragment.Id }

// GetName returns VersionFragmentCrdsCrd.Name, and is useful for accessing the field via an interface.
func (v *VersionFragmentCrdsCrd) GetName() string { return v.CrdFragment.Name }

// GetBlob returns VersionFragmentCrdsCrd.Blob, and is useful for accessing the field via an interface.
func (v *VersionFragmentCrdsCrd) GetBlob() string { return v.CrdFragment.Blob }

func (v *VersionFragmentCrdsCrd) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*VersionFragmentCrdsCrd
		graphql.NoUnmarshalJSON
	}
	firstPass.VersionFragmentCrdsCrd = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.CrdFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalVersionFragmentCrdsCrd struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Blob string `json:"blob"`
}

func (v *VersionFragmentCrdsCrd) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *VersionFragmentCrdsCrd) __premarshalJSON() (*__premarshalVersionFragmentCrdsCrd, error) {
	var retval __premarshalVersionFragmentCrdsCrd

	retval.Id = v.CrdFragment.Id
	retval.Name = v.CrdFragment.Name
	retval.Blob = v.CrdFragment.Blob
	return &retval, nil
}

// VersionFragmentDependencies includes the requested fields of the GraphQL type Dependencies.
type VersionFragmentDependencies struct {
	DependenciesFragment `json:"-"`
}

// GetDependencies returns VersionFragmentDependencies.Dependencies, and is useful for accessing the field via an interface.
func (v *VersionFragmentDependencies) GetDependencies() []DependenciesFragmentDependenciesDependency {
	return v.DependenciesFragment.Dependencies
}

// GetWait returns VersionFragmentDependencies.Wait, and is useful for accessing the field via an interface.
func (v *VersionFragmentDependencies) GetWait() bool { return v.DependenciesFragment.Wait }

// GetApplication returns VersionFragmentDependencies.Application, and is useful for accessing the field via an interface.
func (v *VersionFragmentDependencies) GetApplication() bool {
	return v.DependenciesFragment.Application
}

// GetProviders returns VersionFragmentDependencies.Providers, and is useful for accessing the field via an interface.
func (v *VersionFragmentDependencies) GetProviders() []Provider {
	return v.DependenciesFragment.Providers
}

// GetSecrets returns VersionFragmentDependencies.Secrets, and is useful for accessing the field via an interface.
func (v *VersionFragmentDependencies) GetSecrets() []string { return v.DependenciesFragment.Secrets }

// GetWirings returns VersionFragmentDependencies.Wirings, and is useful for accessing the field via an interface.
func (v *VersionFragmentDependencies) GetWirings() DependenciesFragmentWirings {
	return v.DependenciesFragment.Wirings
}

// GetProviderWirings returns VersionFragmentDependencies.ProviderWirings, and is useful for accessing the field via an interface.
func (v *VersionFragmentDependencies) GetProviderWirings() map[string]interface{} {
	return v.DependenciesFragment.ProviderWirings
}

// GetOutputs returns VersionFragmentDependencies.Outputs, and is useful for accessing the field via an interface.
func (v *VersionFragmentDependencies) GetOutputs() map[string]interface{} {
	return v.DependenciesFragment.Outputs
}

func (v *VersionFragmentDependencies) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*VersionFragmentDependencies
		graphql.NoUnmarshalJSON
	}
	firstPass.VersionFragmentDependencies = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.DependenciesFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalVersionFragmentDependencies struct {
	Dependencies []DependenciesFragmentDependenciesDependency `json:"dependencies"`

	Wait bool `json:"wait"`

	Application bool `json:"application"`

	Providers []Provider `json:"providers"`

	Secrets []string `json:"secrets"`

	Wirings DependenciesFragmentWirings `json:"wirings"`

	ProviderWirings map[string]interface{} `json:"providerWirings"`

	Outputs map[string]interface{} `json:"outputs"`
}

func (v *VersionFragmentDependencies) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *VersionFragmentDependencies) __premarshalJSON() (*__premarshalVersionFragmentDependencies, error) {
	var retval __premarshalVersionFragmentDependencies

	retval.Dependencies = v.DependenciesFragment.Dependencies
	retval.Wait = v.DependenciesFragment.Wait
	retval.Application = v.DependenciesFragment.Application
	retval.Providers = v.DependenciesFragment.Providers
	retval.Secrets = v.DependenciesFragment.Secrets
	retval.Wirings = v.DependenciesFragment.Wirings
	retval.ProviderWirings = v.DependenciesFragment.ProviderWirings
	retval.Outputs = v.DependenciesFragment.Outputs
	return &retval, nil
}

type VersionSpec struct {
	Chart      string `json:"chart"`
	Repository string `json:"repository"`
	Terraform  string `json:"terraform"`
	Version    string `json:"version"`
}

// GetChart returns VersionSpec.Chart, and is useful for accessing the field via an interface.
func (v *VersionSpec) GetChart() string { return v.Chart }

// GetRepository returns VersionSpec.Repository, and is useful for accessing the field via an interface.
func (v *VersionSpec) GetRepository() string { return v.Repository }

// GetTerraform returns VersionSpec.Terraform, and is useful for accessing the field via an interface.
func (v *VersionSpec) GetTerraform() string { return v.Terraform }

// GetVersion returns VersionSpec.Version, and is useful for accessing the field via an interface.
func (v *VersionSpec) GetVersion() string { return v.Version }

type VersionTagAttributes struct {
	Tag       string `json:"tag"`
	VersionId string `json:"versionId"`
}

// GetTag returns VersionTagAttributes.Tag, and is useful for accessing the field via an interface.
func (v *VersionTagAttributes) GetTag() string { return v.Tag }

// GetVersionId returns VersionTagAttributes.VersionId, and is useful for accessing the field via an interface.
func (v *VersionTagAttributes) GetVersionId() string { return v.VersionId }

// __AcquireLockInput is used internally by genqlient
type __AcquireLockInput struct {
	Name string `json:"name"`
}

// GetName returns __AcquireLockInput.Name, and is useful for accessing the field via an interface.
func (v *__AcquireLockInput) GetName() string { return v.Name }

// __CreateArtifactInput is used internally by genqlient
type __CreateArtifactInput struct {
	RepoName     string `json:"repoName"`
	Name         string `json:"name"`
	Readme       string `json:"readme"`
	ArtifactType string `json:"artifactType"`
	Platform     string `json:"platform"`
	Blob         string `json:"blob"`
	Arch         string `json:"arch"`
}

// GetRepoName returns __CreateArtifactInput.RepoName, and is useful for accessing the field via an interface.
func (v *__CreateArtifactInput) GetRepoName() string { return v.RepoName }

// GetName returns __CreateArtifactInput.Name, and is useful for accessing the field via an interface.
func (v *__CreateArtifactInput) GetName() string { return v.Name }

// GetReadme returns __CreateArtifactInput.Readme, and is useful for accessing the field via an interface.
func (v *__CreateArtifactInput) GetReadme() string { return v.Readme }

// GetArtifactType returns __CreateArtifactInput.ArtifactType, and is useful for accessing the field via an interface.
func (v *__CreateArtifactInput) GetArtifactType() string { return v.ArtifactType }

// GetPlatform returns __CreateArtifactInput.Platform, and is useful for accessing the field via an interface.
func (v *__CreateArtifactInput) GetPlatform() string { return v.Platform }

// GetBlob returns __CreateArtifactInput.Blob, and is useful for accessing the field via an interface.
func (v *__CreateArtifactInput) GetBlob() string { return v.Blob }

// GetArch returns __CreateArtifactInput.Arch, and is useful for accessing the field via an interface.
func (v *__CreateArtifactInput) GetArch() string { return v.Arch }

// __CreateCrdInput is used internally by genqlient
type __CreateCrdInput struct {
	ChartName ChartName `json:"chartName"`
	Name      string    `json:"name"`
	Blob      string    `json:"blob"`
}

// GetChartName returns __CreateCrdInput.ChartName, and is useful for accessing the field via an interface.
func (v *__CreateCrdInput) GetChartName() ChartName { return v.ChartName }

// GetName returns __CreateCrdInput.Name, and is useful for accessing the field via an interface.
func (v *__CreateCrdInput) GetName() string { return v.Name }

// GetBlob returns __CreateCrdInput.Blob, and is useful for accessing the field via an interface.
func (v *__CreateCrdInput) GetBlob() string { return v.Blob }

// __CreateDomainInput is used internally by genqlient
type __CreateDomainInput struct {
	Name string `json:"name"`
}

// GetName returns __CreateDomainInput.Name, and is useful for accessing the field via an interface.
func (v *__CreateDomainInput) GetName() string { return v.Name }

// __CreateEventInput is used internally by genqlient
type __CreateEventInput struct {
	Attrs UserEventAttributes `json:"attrs"`
}

// GetAttrs returns __CreateEventInput.Attrs, and is useful for accessing the field via an interface.
func (v *__CreateEventInput) GetAttrs() UserEventAttributes { return v.Attrs }

// __CreateIntegrationInput is used internally by genqlient
type __CreateIntegrationInput struct {
	Name  string                `json:"name"`
	Attrs IntegrationAttributes `json:"attrs"`
}

// GetName returns __CreateIntegrationInput.Name, and is useful for accessing the field via an interface.
func (v *__CreateIntegrationInput) GetName() string { return v.Name }

// GetAttrs returns __CreateIntegrationInput.Attrs, and is useful for accessing the field via an interface.
func (v *__CreateIntegrationInput) GetAttrs() IntegrationAttributes { return v.Attrs }

// __CreateKeyInput is used internally by genqlient
type __CreateKeyInput struct {
	Key  string `json:"key"`
	Name string `json:"name"`
}

// GetKey returns __CreateKeyInput.Key, and is useful for accessing the field via an interface.
func (v *__CreateKeyInput) GetKey() string { return v.Key }

// GetName returns __CreateKeyInput.Name, and is useful for accessing the field via an interface.
func (v *__CreateKeyInput) GetName() string { return v.Name }

// __CreateRecipeInput is used internally by genqlient
type __CreateRecipeInput struct {
	Name       string           `json:"name"`
	Attributes RecipeAttributes `json:"attributes"`
}

// GetName returns __CreateRecipeInput.Name, and is useful for accessing the field via an interface.
func (v *__CreateRecipeInput) GetName() string { return v.Name }

// GetAttributes returns __CreateRecipeInput.Attributes, and is useful for accessing the field via an interface.
func (v *__CreateRecipeInput) GetAttributes() RecipeAttributes { return v.Attributes }

// __CreateRepositoryInput is used internally by genqlient
type __CreateRepositoryInput struct {
	Name       string               `json:"name"`
	Publisher  string               `json:"publisher"`
	Attributes RepositoryAttributes `json:"attributes"`
}

// GetName returns __CreateRepositoryInput.Name, and is useful for accessing the field via an interface.
func (v *__CreateRepositoryInput) GetName() string { return v.Name }

// GetPublisher returns __CreateRepositoryInput.Publisher, and is useful for accessing the field via an interface.
func (v *__CreateRepositoryInput) GetPublisher() string { return v.Publisher }

// GetAttributes returns __CreateRepositoryInput.Attributes, and is useful for accessing the field via an interface.
func (v *__CreateRepositoryInput) GetAttributes() RepositoryAttributes { return v.Attributes }

// __CreateResourceDefinitionInput is used internally by genqlient
type __CreateResourceDefinitionInput struct {
	Name  string                       `json:"name"`
	Input ResourceDefinitionAttributes `json:"input"`
}

// GetName returns __CreateResourceDefinitionInput.Name, and is useful for accessing the field via an interface.
func (v *__CreateResourceDefinitionInput) GetName() string { return v.Name }

// GetInput returns __CreateResourceDefinitionInput.Input, and is useful for accessing the field via an interface.
func (v *__CreateResourceDefinitionInput) GetInput() ResourceDefinitionAttributes { return v.Input }

// __DeleteEabCredentialInput is used internally by genqlient
type __DeleteEabCredentialInput struct {
	Cluster  string   `json:"cluster"`
	Provider Provider `json:"provider"`
}

// GetCluster returns __DeleteEabCredentialInput.Cluster, and is useful for accessing the field via an interface.
func (v *__DeleteEabCredentialInput) GetCluster() string { return v.Cluster }

// GetProvider returns __DeleteEabCredentialInput.Provider, and is useful for accessing the field via an interface.
func (v *__DeleteEabCredentialInput) GetProvider() Provider { return v.Provider }

// __GetChartInstallationsInput is used internally by genqlient
type __GetChartInstallationsInput struct {
	Id string `json:"id"`
}

// GetId returns __GetChartInstallationsInput.Id, and is useful for accessing the field via an interface.
func (v *__GetChartInstallationsInput) GetId() string { return v.Id }

// __GetChartsInput is used internally by genqlient
type __GetChartsInput struct {
	Id string `json:"id"`
}

// GetId returns __GetChartsInput.Id, and is useful for accessing the field via an interface.
func (v *__GetChartsInput) GetId() string { return v.Id }

// __GetEabCredentialInput is used internally by genqlient
type __GetEabCredentialInput struct {
	Cluster  string   `json:"cluster"`
	Provider Provider `json:"provider"`
}

// GetCluster returns __GetEabCredentialInput.Cluster, and is useful for accessing the field via an interface.
func (v *__GetEabCredentialInput) GetCluster() string { return v.Cluster }

// GetProvider returns __GetEabCredentialInput.Provider, and is useful for accessing the field via an interface.
func (v *__GetEabCredentialInput) GetProvider() Provider { return v.Provider }

// __GetInstallationByIdInput is used internally by genqlient
type __GetInstallationByIdInput struct {
	Id string `json:"id"`
}

// GetId returns __GetInstallationByIdInput.Id, and is useful for accessing the field via an interface.
func (v *__GetInstallationByIdInput) GetId() string { return v.Id }

// __GetInstallationInput is used internally by genqlient
type __GetInstallationInput struct {
	Name string `json:"name"`
}

// GetName returns __GetInstallationInput.Name, and is useful for accessing the field via an interface.
func (v *__GetInstallationInput) GetName() string { return v.Name }

// __GetLoginMethodInput is used internally by genqlient
type __GetLoginMethodInput struct {
	Email string `json:"email"`
}

// GetEmail returns __GetLoginMethodInput.Email, and is useful for accessing the field via an interface.
func (v *__GetLoginMethodInput) GetEmail() string { return v.Email }

// __GetPackageInstallationsInput is used internally by genqlient
type __GetPackageInstallationsInput struct {
	Id string `json:"id"`
}

// GetId returns __GetPackageInstallationsInput.Id, and is useful for accessing the field via an interface.
func (v *__GetPackageInstallationsInput) GetId() string { return v.Id }

// __GetRecipeInput is used internally by genqlient
type __GetRecipeInput struct {
	Repo string `json:"repo"`
	Name string `json:"name"`
}

// GetRepo returns __GetRecipeInput.Repo, and is useful for accessing the field via an interface.
func (v *__GetRecipeInput) GetRepo() string { return v.Repo }

// GetName returns __GetRecipeInput.Name, and is useful for accessing the field via an interface.
func (v *__GetRecipeInput) GetName() string { return v.Name }

// __GetRepositoryInput is used internally by genqlient
type __GetRepositoryInput struct {
	Name string `json:"name"`
}

// GetName returns __GetRepositoryInput.Name, and is useful for accessing the field via an interface.
func (v *__GetRepositoryInput) GetName() string { return v.Name }

// __GetTerraformInput is used internally by genqlient
type __GetTerraformInput struct {
	Id string `json:"id"`
}

// GetId returns __GetTerraformInput.Id, and is useful for accessing the field via an interface.
func (v *__GetTerraformInput) GetId() string { return v.Id }

// __GetTerraformInstallationsInput is used internally by genqlient
type __GetTerraformInstallationsInput struct {
	Id string `json:"id"`
}

// GetId returns __GetTerraformInstallationsInput.Id, and is useful for accessing the field via an interface.
func (v *__GetTerraformInstallationsInput) GetId() string { return v.Id }

// __GetTfProviderScaffoldInput is used internally by genqlient
type __GetTfProviderScaffoldInput struct {
	Name Provider `json:"name"`
}

// GetName returns __GetTfProviderScaffoldInput.Name, and is useful for accessing the field via an interface.
func (v *__GetTfProviderScaffoldInput) GetName() Provider { return v.Name }

// __GetVersionsInput is used internally by genqlient
type __GetVersionsInput struct {
	Id string `json:"id"`
}

// GetId returns __GetVersionsInput.Id, and is useful for accessing the field via an interface.
func (v *__GetVersionsInput) GetId() string { return v.Id }

// __ImpersonateServiceAccountInput is used internally by genqlient
type __ImpersonateServiceAccountInput struct {
	Email string `json:"email"`
}

// GetEmail returns __ImpersonateServiceAccountInput.Email, and is useful for accessing the field via an interface.
func (v *__ImpersonateServiceAccountInput) GetEmail() string { return v.Email }

// __InstallRecipeInput is used internally by genqlient
type __InstallRecipeInput struct {
	Id      string                 `json:"id"`
	Context map[string]interface{} `json:"context"`
}

// GetId returns __InstallRecipeInput.Id, and is useful for accessing the field via an interface.
func (v *__InstallRecipeInput) GetId() string { return v.Id }

// GetContext returns __InstallRecipeInput.Context, and is useful for accessing the field via an interface.
func (v *__InstallRecipeInput) GetContext() map[string]interface{} { return v.Context }

// __ListArtifactsInput is used internally by genqlient
type __ListArtifactsInput struct {
	Id string `json:"id"`
}

// GetId returns __ListArtifactsInput.Id, and is useful for accessing the field via an interface.
func (v *__ListArtifactsInput) GetId() string { return v.Id }

// __ListKeysInput is used internally by genqlient
type __ListKeysInput struct {
	Emails []string `json:"emails"`
}

// GetEmails returns __ListKeysInput.Emails, and is useful for accessing the field via an interface.
func (v *__ListKeysInput) GetEmails() []string { return v.Emails }

// __ListRecipesInput is used internally by genqlient
type __ListRecipesInput struct {
	Repo     string   `json:"repo"`
	Provider Provider `json:"provider"`
}

// GetRepo returns __ListRecipesInput.Repo, and is useful for accessing the field via an interface.
func (v *__ListRecipesInput) GetRepo() string { return v.Repo }

// GetProvider returns __ListRecipesInput.Provider, and is useful for accessing the field via an interface.
func (v *__ListRecipesInput) GetProvider() Provider { return v.Provider }

// __ListRepositoriesInput is used internally by genqlient
type __ListRepositoriesInput struct {
	Q string `json:"q"`
}

// GetQ returns __ListRepositoriesInput.Q, and is useful for accessing the field via an interface.
func (v *__ListRepositoriesInput) GetQ() string { return v.Q }

// __LoginInput is used internally by genqlient
type __LoginInput struct {
	Email string `json:"email"`
	Pwd   string `json:"pwd"`
}

// GetEmail returns __LoginInput.Email, and is useful for accessing the field via an interface.
func (v *__LoginInput) GetEmail() string { return v.Email }

// GetPwd returns __LoginInput.Pwd, and is useful for accessing the field via an interface.
func (v *__LoginInput) GetPwd() string { return v.Pwd }

// __PollLoginTokenInput is used internally by genqlient
type __PollLoginTokenInput struct {
	Token string `json:"token"`
}

// GetToken returns __PollLoginTokenInput.Token, and is useful for accessing the field via an interface.
func (v *__PollLoginTokenInput) GetToken() string { return v.Token }

// __ReleaseLockInput is used internally by genqlient
type __ReleaseLockInput struct {
	Name  string         `json:"name"`
	Attrs LockAttributes `json:"attrs"`
}

// GetName returns __ReleaseLockInput.Name, and is useful for accessing the field via an interface.
func (v *__ReleaseLockInput) GetName() string { return v.Name }

// GetAttrs returns __ReleaseLockInput.Attrs, and is useful for accessing the field via an interface.
func (v *__ReleaseLockInput) GetAttrs() LockAttributes { return v.Attrs }

// __ScaffoldsInput is used internally by genqlient
type __ScaffoldsInput struct {
	App string   `json:"app"`
	Pub string   `json:"pub"`
	Cat Category `json:"cat"`
	Ing bool     `json:"ing"`
	Pg  bool     `json:"pg"`
}

// GetApp returns __ScaffoldsInput.App, and is useful for accessing the field via an interface.
func (v *__ScaffoldsInput) GetApp() string { return v.App }

// GetPub returns __ScaffoldsInput.Pub, and is useful for accessing the field via an interface.
func (v *__ScaffoldsInput) GetPub() string { return v.Pub }

// GetCat returns __ScaffoldsInput.Cat, and is useful for accessing the field via an interface.
func (v *__ScaffoldsInput) GetCat() Category { return v.Cat }

// GetIng returns __ScaffoldsInput.Ing, and is useful for accessing the field via an interface.
func (v *__ScaffoldsInput) GetIng() bool { return v.Ing }

// GetPg returns __ScaffoldsInput.Pg, and is useful for accessing the field via an interface.
func (v *__ScaffoldsInput) GetPg() bool { return v.Pg }

// __UnlockRepositoryInput is used internally by genqlient
type __UnlockRepositoryInput struct {
	Name string `json:"name"`
}

// GetName returns __UnlockRepositoryInput.Name, and is useful for accessing the field via an interface.
func (v *__UnlockRepositoryInput) GetName() string { return v.Name }

// __UpdateRepositoryInput is used internally by genqlient
type __UpdateRepositoryInput struct {
	Name  string               `json:"name"`
	Attrs RepositoryAttributes `json:"attrs"`
}

// GetName returns __UpdateRepositoryInput.Name, and is useful for accessing the field via an interface.
func (v *__UpdateRepositoryInput) GetName() string { return v.Name }

// GetAttrs returns __UpdateRepositoryInput.Attrs, and is useful for accessing the field via an interface.
func (v *__UpdateRepositoryInput) GetAttrs() RepositoryAttributes { return v.Attrs }

// __UpdateVersionInput is used internally by genqlient
type __UpdateVersionInput struct {
	Spec       VersionSpec       `json:"spec"`
	Attributes VersionAttributes `json:"attributes"`
}

// GetSpec returns __UpdateVersionInput.Spec, and is useful for accessing the field via an interface.
func (v *__UpdateVersionInput) GetSpec() VersionSpec { return v.Spec }

// GetAttributes returns __UpdateVersionInput.Attributes, and is useful for accessing the field via an interface.
func (v *__UpdateVersionInput) GetAttributes() VersionAttributes { return v.Attributes }

// __UploadTerraformInput is used internally by genqlient
type __UploadTerraformInput struct {
	RepoName    string `json:"repoName"`
	Name        string `json:"name"`
	UploadOrUrl string `json:"uploadOrUrl"`
}

// GetRepoName returns __UploadTerraformInput.RepoName, and is useful for accessing the field via an interface.
func (v *__UploadTerraformInput) GetRepoName() string { return v.RepoName }

// GetName returns __UploadTerraformInput.Name, and is useful for accessing the field via an interface.
func (v *__UploadTerraformInput) GetName() string { return v.Name }

// GetUploadOrUrl returns __UploadTerraformInput.UploadOrUrl, and is useful for accessing the field via an interface.
func (v *__UploadTerraformInput) GetUploadOrUrl() string { return v.UploadOrUrl }

// __UpsertOidcProviderInput is used internally by genqlient
type __UpsertOidcProviderInput struct {
	Id         string         `json:"id"`
	Attributes OidcAttributes `json:"attributes"`
}

// GetId returns __UpsertOidcProviderInput.Id, and is useful for accessing the field via an interface.
func (v *__UpsertOidcProviderInput) GetId() string { return v.Id }

// GetAttributes returns __UpsertOidcProviderInput.Attributes, and is useful for accessing the field via an interface.
func (v *__UpsertOidcProviderInput) GetAttributes() OidcAttributes { return v.Attributes }

func AcquireLock(
	ctx context.Context,
	client graphql.Client,
	name string,
) (*AcquireLockResponse, error) {
	req := &graphql.Request{
		OpName: "AcquireLock",
		Query: `
mutation AcquireLock ($name: String!) {
	acquireLock(repository: $name) {
		... ApplyLockFragment
	}
}
fragment ApplyLockFragment on ApplyLock {
	id
	lock
}
`,
		Variables: &__AcquireLockInput{
			Name: name,
		},
	}
	var err error

	var data AcquireLockResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func CreateAccessToken(
	ctx context.Context,
	client graphql.Client,
) (*CreateAccessTokenResponse, error) {
	req := &graphql.Request{
		OpName: "CreateAccessToken",
		Query: `
mutation CreateAccessToken {
	createToken {
		token
	}
}
`,
	}
	var err error

	var data CreateAccessTokenResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func CreateArtifact(
	ctx context.Context,
	client graphql.Client,
	repoName string,
	name string,
	readme string,
	artifactType string,
	platform string,
	blob string,
	arch string,
) (*CreateArtifactResponse, error) {
	req := &graphql.Request{
		OpName: "CreateArtifact",
		Query: `
mutation CreateArtifact ($repoName: String!, $name: String!, $readme: String!, $artifactType: String!, $platform: String!, $blob: UploadOrUrl!, $arch: String) {
	createArtifact(repositoryName: $repoName, attributes: {name:$name,blob:$blob,readme:$readme,type:$artifactType,platform:$platform,arch:$arch}) {
		... ArtifactFragment
	}
}
fragment ArtifactFragment on Artifact {
	id
	name
	readme
	platform
	arch
	blob
	sha
	filesize
}
`,
		Variables: &__CreateArtifactInput{
			RepoName:     repoName,
			Name:         name,
			Readme:       readme,
			ArtifactType: artifactType,
			Platform:     platform,
			Blob:         blob,
			Arch:         arch,
		},
	}
	var err error

	var data CreateArtifactResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func CreateCrd(
	ctx context.Context,
	client graphql.Client,
	chartName ChartName,
	name string,
	blob string,
) (*CreateCrdResponse, error) {
	req := &graphql.Request{
		OpName: "CreateCrd",
		Query: `
mutation CreateCrd ($chartName: ChartName!, $name: String!, $blob: UploadOrUrl!) {
	createCrd(chartName: $chartName, attributes: {name:$name,blob:$blob}) {
		id
	}
}
`,
		Variables: &__CreateCrdInput{
			ChartName: chartName,
			Name:      name,
			Blob:      blob,
		},
	}
	var err error

	var data CreateCrdResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func CreateDomain(
	ctx context.Context,
	client graphql.Client,
	name string,
) (*CreateDomainResponse, error) {
	req := &graphql.Request{
		OpName: "CreateDomain",
		Query: `
mutation CreateDomain ($name: String!) {
	provisionDomain(name: $name) {
		... DnsDomainFragment
	}
}
fragment DnsDomainFragment on DnsDomain {
	id
	name
}
`,
		Variables: &__CreateDomainInput{
			Name: name,
		},
	}
	var err error

	var data CreateDomainResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func CreateEvent(
	ctx context.Context,
	client graphql.Client,
	attrs UserEventAttributes,
) (*CreateEventResponse, error) {
	req := &graphql.Request{
		OpName: "CreateEvent",
		Query: `
mutation CreateEvent ($attrs: UserEventAttributes!) {
	createUserEvent(attributes: $attrs)
}
`,
		Variables: &__CreateEventInput{
			Attrs: attrs,
		},
	}
	var err error

	var data CreateEventResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func CreateIntegration(
	ctx context.Context,
	client graphql.Client,
	name string,
	attrs IntegrationAttributes,
) (*CreateIntegrationResponse, error) {
	req := &graphql.Request{
		OpName: "CreateIntegration",
		Query: `
mutation CreateIntegration ($name: String!, $attrs: IntegrationAttributes!) {
	createIntegration(repositoryName: $name, attributes: $attrs) {
		id
	}
}
`,
		Variables: &__CreateIntegrationInput{
			Name:  name,
			Attrs: attrs,
		},
	}
	var err error

	var data CreateIntegrationResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func CreateKey(
	ctx context.Context,
	client graphql.Client,
	key string,
	name string,
) (*CreateKeyResponse, error) {
	req := &graphql.Request{
		OpName: "CreateKey",
		Query: `
mutation CreateKey ($key: String!, $name: String!) {
	createPublicKey(attributes: {content:$key,name:$name}) {
		id
	}
}
`,
		Variables: &__CreateKeyInput{
			Key:  key,
			Name: name,
		},
	}
	var err error

	var data CreateKeyResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func CreateRecipe(
	ctx context.Context,
	client graphql.Client,
	name string,
	attributes RecipeAttributes,
) (*CreateRecipeResponse, error) {
	req := &graphql.Request{
		OpName: "CreateRecipe",
		Query: `
mutation CreateRecipe ($name: String!, $attributes: RecipeAttributes!) {
	createRecipe(repositoryName: $name, attributes: $attributes) {
		id
	}
}
`,
		Variables: &__CreateRecipeInput{
			Name:       name,
			Attributes: attributes,
		},
	}
	var err error

	var data CreateRecipeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func CreateRepository(
	ctx context.Context,
	client graphql.Client,
	name string,
	publisher string,
	attributes RepositoryAttributes,
) (*CreateRepositoryResponse, error) {
	req := &graphql.Request{
		OpName: "CreateRepository",
		Query: `
mutation CreateRepository ($name: String!, $publisher: String!, $attributes: RepositoryAttributes!) {
	upsertRepository(name: $name, publisher: $publisher, attributes: $attributes) {
		id
	}
}
`,
		Variables: &__CreateRepositoryInput{
			Name:       name,
			Publisher:  publisher,
			Attributes: attributes,
		},
	}
	var err error

	var data CreateRepositoryResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func CreateResourceDefinition(
	ctx context.Context,
	client graphql.Client,
	name string,
	input ResourceDefinitionAttributes,
) (*CreateResourceDefinitionResponse, error) {
	req := &graphql.Request{
		OpName: "CreateResourceDefinition",
		Query: `
mutation CreateResourceDefinition ($name: String!, $input: ResourceDefinitionAttributes!) {
	updateRepository(repositoryName: $name, attributes: {integrationResourceDefinition:$input}) {
		id
	}
}
`,
		Variables: &__CreateResourceDefinitionInput{
			Name:  name,
			Input: input,
		},
	}
	var err error

	var data CreateResourceDefinitionResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func DeleteEabCredential(
	ctx context.Context,
	client graphql.Client,
	cluster string,
	provider Provider,
) (*DeleteEabCredentialResponse, error) {
	req := &graphql.Request{
		OpName: "DeleteEabCredential",
		Query: `
mutation DeleteEabCredential ($cluster: String!, $provider: Provider!) {
	deleteEabKey(cluster: $cluster, provider: $provider) {
		id
	}
}
`,
		Variables: &__DeleteEabCredentialInput{
			Cluster:  cluster,
			Provider: provider,
		},
	}
	var err error

	var data DeleteEabCredentialResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func DeleteShell(
	ctx context.Context,
	client graphql.Client,
) (*DeleteShellResponse, error) {
	req := &graphql.Request{
		OpName: "DeleteShell",
		Query: `
mutation DeleteShell {
	deleteShell {
		... CloudShellFragment
	}
}
fragment CloudShellFragment on CloudShell {
	id
	aesKey
	gitUrl
}
`,
	}
	var err error

	var data DeleteShellResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func DeviceLogin(
	ctx context.Context,
	client graphql.Client,
) (*DeviceLoginResponse, error) {
	req := &graphql.Request{
		OpName: "DeviceLogin",
		Query: `
mutation DeviceLogin {
	deviceLogin {
		loginUrl
		deviceToken
	}
}
`,
	}
	var err error

	var data DeviceLoginResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GetChartInstallations(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*GetChartInstallationsResponse, error) {
	req := &graphql.Request{
		OpName: "GetChartInstallations",
		Query: `
query GetChartInstallations ($id: ID!) {
	chartInstallations(repositoryId: $id, first: 100) {
		edges {
			node {
				... ChartInstallationFragment
			}
		}
	}
}
fragment ChartInstallationFragment on ChartInstallation {
	id
	chart {
		... ChartFragment
		dependencies {
			... DependenciesFragment
		}
	}
	version {
		... VersionFragment
	}
}
fragment ChartFragment on Chart {
	id
	name
	description
	latestVersion
}
fragment DependenciesFragment on Dependencies {
	dependencies {
		type
		name
		repo
	}
	wait
	application
	providers
	secrets
	wirings {
		terraform
		helm
	}
	providerWirings
	outputs
}
fragment VersionFragment on Version {
	id
	readme
	version
	valuesTemplate
	package
	crds {
		... CrdFragment
	}
	dependencies {
		... DependenciesFragment
	}
}
fragment CrdFragment on Crd {
	id
	name
	blob
}
`,
		Variables: &__GetChartInstallationsInput{
			Id: id,
		},
	}
	var err error

	var data GetChartInstallationsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GetCharts(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*GetChartsResponse, error) {
	req := &graphql.Request{
		OpName: "GetCharts",
		Query: `
query GetCharts ($id: ID!) {
	charts(repositoryId: $id, first: 100) {
		edges {
			node {
				... ChartFragment
			}
		}
	}
}
fragment ChartFragment on Chart {
	id
	name
	description
	latestVersion
}
`,
		Variables: &__GetChartsInput{
			Id: id,
		},
	}
	var err error

	var data GetChartsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GetEabCredential(
	ctx context.Context,
	client graphql.Client,
	cluster string,
	provider Provider,
) (*GetEabCredentialResponse, error) {
	req := &graphql.Request{
		OpName: "GetEabCredential",
		Query: `
query GetEabCredential ($cluster: String!, $provider: Provider!) {
	eabCredential(cluster: $cluster, provider: $provider) {
		... EabCredentialFragment
	}
}
fragment EabCredentialFragment on EabCredential {
	id
	keyId
	hmacKey
	cluster
	provider
}
`,
		Variables: &__GetEabCredentialInput{
			Cluster:  cluster,
			Provider: provider,
		},
	}
	var err error

	var data GetEabCredentialResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GetInstallation(
	ctx context.Context,
	client graphql.Client,
	name string,
) (*GetInstallationResponse, error) {
	req := &graphql.Request{
		OpName: "GetInstallation",
		Query: `
query GetInstallation ($name: String) {
	installation(name: $name) {
		... InstallationFragment
	}
}
fragment InstallationFragment on Installation {
	id
	context
	licenseKey
	acmeKeyId
	acmeSecret
	repository {
		... RepositoryFragment
	}
	oidcProvider {
		... OIDCProvider
	}
}
fragment RepositoryFragment on Repository {
	id
	name
	notes
	icon
	darkIcon
	description
	publisher {
		name
	}
	recipes {
		name
	}
}
fragment OIDCProvider on OidcProvider {
	id
	clientId
	clientSecret
	redirectUris
	bindings {
		user {
			id
			email
		}
		group {
			id
			name
		}
	}
	configuration {
		issuer
		authorizationEndpoint
		tokenEndpoint
		jwksUri
		userinfoEndpoint
	}
}
`,
		Variables: &__GetInstallationInput{
			Name: name,
		},
	}
	var err error

	var data GetInstallationResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GetInstallationById(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*GetInstallationByIdResponse, error) {
	req := &graphql.Request{
		OpName: "GetInstallationById",
		Query: `
query GetInstallationById ($id: ID) {
	installation(id: $id) {
		... InstallationFragment
	}
}
fragment InstallationFragment on Installation {
	id
	context
	licenseKey
	acmeKeyId
	acmeSecret
	repository {
		... RepositoryFragment
	}
	oidcProvider {
		... OIDCProvider
	}
}
fragment RepositoryFragment on Repository {
	id
	name
	notes
	icon
	darkIcon
	description
	publisher {
		name
	}
	recipes {
		name
	}
}
fragment OIDCProvider on OidcProvider {
	id
	clientId
	clientSecret
	redirectUris
	bindings {
		user {
			id
			email
		}
		group {
			id
			name
		}
	}
	configuration {
		issuer
		authorizationEndpoint
		tokenEndpoint
		jwksUri
		userinfoEndpoint
	}
}
`,
		Variables: &__GetInstallationByIdInput{
			Id: id,
		},
	}
	var err error

	var data GetInstallationByIdResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GetInstallations(
	ctx context.Context,
	client graphql.Client,
) (*GetInstallationsResponse, error) {
	req := &graphql.Request{
		OpName: "GetInstallations",
		Query: `
query GetInstallations {
	installations(first: 100) {
		edges {
			node {
				... InstallationFragment
			}
		}
	}
}
fragment InstallationFragment on Installation {
	id
	context
	licenseKey
	acmeKeyId
	acmeSecret
	repository {
		... RepositoryFragment
	}
	oidcProvider {
		... OIDCProvider
	}
}
fragment RepositoryFragment on Repository {
	id
	name
	notes
	icon
	darkIcon
	description
	publisher {
		name
	}
	recipes {
		name
	}
}
fragment OIDCProvider on OidcProvider {
	id
	clientId
	clientSecret
	redirectUris
	bindings {
		user {
			id
			email
		}
		group {
			id
			name
		}
	}
	configuration {
		issuer
		authorizationEndpoint
		tokenEndpoint
		jwksUri
		userinfoEndpoint
	}
}
`,
	}
	var err error

	var data GetInstallationsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GetLoginMethod(
	ctx context.Context,
	client graphql.Client,
	email string,
) (*GetLoginMethodResponse, error) {
	req := &graphql.Request{
		OpName: "GetLoginMethod",
		Query: `
query GetLoginMethod ($email: String!) {
	loginMethod(email: $email) {
		loginMethod
		token
	}
}
`,
		Variables: &__GetLoginMethodInput{
			Email: email,
		},
	}
	var err error

	var data GetLoginMethodResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GetPackageInstallations(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*GetPackageInstallationsResponse, error) {
	req := &graphql.Request{
		OpName: "GetPackageInstallations",
		Query: `
query GetPackageInstallations ($id: ID!) {
	chartInstallations(repositoryId: $id, first: 100) {
		edges {
			node {
				... ChartInstallationFragment
			}
		}
	}
	terraformInstallations(repositoryId: $id, first: 100) {
		edges {
			node {
				... TerraformInstallationFragment
			}
		}
	}
}
fragment ChartInstallationFragment on ChartInstallation {
	id
	chart {
		... ChartFragment
		dependencies {
			... DependenciesFragment
		}
	}
	version {
		... VersionFragment
	}
}
fragment TerraformInstallationFragment on TerraformInstallation {
	id
	terraform {
		... TerraformFragment
	}
	version {
		... VersionFragment
	}
}
fragment ChartFragment on Chart {
	id
	name
	description
	latestVersion
}
fragment DependenciesFragment on Dependencies {
	dependencies {
		type
		name
		repo
	}
	wait
	application
	providers
	secrets
	wirings {
		terraform
		helm
	}
	providerWirings
	outputs
}
fragment VersionFragment on Version {
	id
	readme
	version
	valuesTemplate
	package
	crds {
		... CrdFragment
	}
	dependencies {
		... DependenciesFragment
	}
}
fragment TerraformFragment on Terraform {
	id
	name
	package
	description
	dependencies {
		... DependenciesFragment
	}
	valuesTemplate
}
fragment CrdFragment on Crd {
	id
	name
	blob
}
`,
		Variables: &__GetPackageInstallationsInput{
			Id: id,
		},
	}
	var err error

	var data GetPackageInstallationsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GetRecipe(
	ctx context.Context,
	client graphql.Client,
	repo string,
	name string,
) (*GetRecipeResponse, error) {
	req := &graphql.Request{
		OpName: "GetRecipe",
		Query: `
query GetRecipe ($repo: String, $name: String) {
	recipe(repo: $repo, name: $name) {
		... RecipeFragment
		recipeSections {
			... RecipeSectionFragment
		}
		recipeDependencies {
			... RecipeFragment
		}
	}
}
fragment RecipeFragment on Recipe {
	id
	name
	description
	restricted
	provider
	tests {
		type
		name
		message
		args {
			name
			repo
			key
		}
	}
	repository {
		id
		name
	}
	oidcSettings {
		uriFormat
		uriFormats
		authMethod
		domainKey
		subdomain
	}
}
fragment RecipeSectionFragment on RecipeSection {
	index
	repository {
		... RepositoryFragment
	}
	recipeItems {
		... RecipeItemFragment
	}
	configuration {
		... RecipeConfigurationFragment
	}
}
fragment RepositoryFragment on Repository {
	id
	name
	notes
	icon
	darkIcon
	description
	publisher {
		name
	}
	recipes {
		name
	}
}
fragment RecipeItemFragment on RecipeItem {
	id
	chart {
		... ChartFragment
	}
	terraform {
		... TerraformFragment
	}
	configuration {
		... RecipeConfigurationFragment
	}
}
fragment RecipeConfigurationFragment on RecipeConfiguration {
	name
	type
	default
	documentation
	optional
	placeholder
	functionName
	condition {
		field
		operation
		value
	}
	validation {
		type
		regex
		message
	}
}
fragment ChartFragment on Chart {
	id
	name
	description
	latestVersion
}
fragment TerraformFragment on Terraform {
	id
	name
	package
	description
	dependencies {
		... DependenciesFragment
	}
	valuesTemplate
}
fragment DependenciesFragment on Dependencies {
	dependencies {
		type
		name
		repo
	}
	wait
	application
	providers
	secrets
	wirings {
		terraform
		helm
	}
	providerWirings
	outputs
}
`,
		Variables: &__GetRecipeInput{
			Repo: repo,
			Name: name,
		},
	}
	var err error

	var data GetRecipeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GetRepository(
	ctx context.Context,
	client graphql.Client,
	name string,
) (*GetRepositoryResponse, error) {
	req := &graphql.Request{
		OpName: "GetRepository",
		Query: `
query GetRepository ($name: String) {
	repository(name: $name) {
		... RepositoryFragment
	}
}
fragment RepositoryFragment on Repository {
	id
	name
	notes
	icon
	darkIcon
	description
	publisher {
		name
	}
	recipes {
		name
	}
}
`,
		Variables: &__GetRepositoryInput{
			Name: name,
		},
	}
	var err error

	var data GetRepositoryResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GetShell(
	ctx context.Context,
	client graphql.Client,
) (*GetShellResponse, error) {
	req := &graphql.Request{
		OpName: "GetShell",
		Query: `
query GetShell {
	shell {
		... CloudShellFragment
	}
}
fragment CloudShellFragment on CloudShell {
	id
	aesKey
	gitUrl
}
`,
	}
	var err error

	var data GetShellResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GetTerraform(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*GetTerraformResponse, error) {
	req := &graphql.Request{
		OpName: "GetTerraform",
		Query: `
query GetTerraform ($id: ID!) {
	terraform(repositoryId: $id, first: 100) {
		edges {
			node {
				... TerraformFragment
			}
		}
	}
}
fragment TerraformFragment on Terraform {
	id
	name
	package
	description
	dependencies {
		... DependenciesFragment
	}
	valuesTemplate
}
fragment DependenciesFragment on Dependencies {
	dependencies {
		type
		name
		repo
	}
	wait
	application
	providers
	secrets
	wirings {
		terraform
		helm
	}
	providerWirings
	outputs
}
`,
		Variables: &__GetTerraformInput{
			Id: id,
		},
	}
	var err error

	var data GetTerraformResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GetTerraformInstallations(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*GetTerraformInstallationsResponse, error) {
	req := &graphql.Request{
		OpName: "GetTerraformInstallations",
		Query: `
query GetTerraformInstallations ($id: ID!) {
	terraformInstallations(repositoryId: $id, first: 100) {
		edges {
			node {
				... TerraformInstallationFragment
			}
		}
	}
}
fragment TerraformInstallationFragment on TerraformInstallation {
	id
	terraform {
		... TerraformFragment
	}
	version {
		... VersionFragment
	}
}
fragment TerraformFragment on Terraform {
	id
	name
	package
	description
	dependencies {
		... DependenciesFragment
	}
	valuesTemplate
}
fragment VersionFragment on Version {
	id
	readme
	version
	valuesTemplate
	package
	crds {
		... CrdFragment
	}
	dependencies {
		... DependenciesFragment
	}
}
fragment DependenciesFragment on Dependencies {
	dependencies {
		type
		name
		repo
	}
	wait
	application
	providers
	secrets
	wirings {
		terraform
		helm
	}
	providerWirings
	outputs
}
fragment CrdFragment on Crd {
	id
	name
	blob
}
`,
		Variables: &__GetTerraformInstallationsInput{
			Id: id,
		},
	}
	var err error

	var data GetTerraformInstallationsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GetTfProviderScaffold(
	ctx context.Context,
	client graphql.Client,
	name Provider,
) (*GetTfProviderScaffoldResponse, error) {
	req := &graphql.Request{
		OpName: "GetTfProviderScaffold",
		Query: `
query GetTfProviderScaffold ($name: Provider!) {
	terraformProvider(name: $name) {
		name
		content
	}
}
`,
		Variables: &__GetTfProviderScaffoldInput{
			Name: name,
		},
	}
	var err error

	var data GetTfProviderScaffoldResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GetTfProviders(
	ctx context.Context,
	client graphql.Client,
) (*GetTfProvidersResponse, error) {
	req := &graphql.Request{
		OpName: "GetTfProviders",
		Query: `
query GetTfProviders {
	terraformProviders
}
`,
	}
	var err error

	var data GetTfProvidersResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GetVersions(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*GetVersionsResponse, error) {
	req := &graphql.Request{
		OpName: "GetVersions",
		Query: `
query GetVersions ($id: ID!) {
	versions(chartId: $id, first: 100) {
		edges {
			node {
				... VersionFragment
			}
		}
	}
}
fragment VersionFragment on Version {
	id
	readme
	version
	valuesTemplate
	package
	crds {
		... CrdFragment
	}
	dependencies {
		... DependenciesFragment
	}
}
fragment CrdFragment on Crd {
	id
	name
	blob
}
fragment DependenciesFragment on Dependencies {
	dependencies {
		type
		name
		repo
	}
	wait
	application
	providers
	secrets
	wirings {
		terraform
		helm
	}
	providerWirings
	outputs
}
`,
		Variables: &__GetVersionsInput{
			Id: id,
		},
	}
	var err error

	var data GetVersionsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func ImpersonateServiceAccount(
	ctx context.Context,
	client graphql.Client,
	email string,
) (*ImpersonateServiceAccountResponse, error) {
	req := &graphql.Request{
		OpName: "ImpersonateServiceAccount",
		Query: `
mutation ImpersonateServiceAccount ($email: String) {
	impersonateServiceAccount(email: $email) {
		jwt
		email
	}
}
`,
		Variables: &__ImpersonateServiceAccountInput{
			Email: email,
		},
	}
	var err error

	var data ImpersonateServiceAccountResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func InstallRecipe(
	ctx context.Context,
	client graphql.Client,
	id string,
	context map[string]interface{},
) (*InstallRecipeResponse, error) {
	req := &graphql.Request{
		OpName: "InstallRecipe",
		Query: `
mutation InstallRecipe ($id: ID!, $context: Map!) {
	installRecipe(recipeId: $id, context: $context) {
		id
	}
}
`,
		Variables: &__InstallRecipeInput{
			Id:      id,
			Context: context,
		},
	}
	var err error

	var data InstallRecipeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func ListArtifacts(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*ListArtifactsResponse, error) {
	req := &graphql.Request{
		OpName: "ListArtifacts",
		Query: `
query ListArtifacts ($id: ID!) {
	repository(id: $id) {
		artifacts {
			... ArtifactFragment
		}
	}
}
fragment ArtifactFragment on Artifact {
	id
	name
	readme
	platform
	arch
	blob
	sha
	filesize
}
`,
		Variables: &__ListArtifactsInput{
			Id: id,
		},
	}
	var err error

	var data ListArtifactsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func ListKeys(
	ctx context.Context,
	client graphql.Client,
	emails []string,
) (*ListKeysResponse, error) {
	req := &graphql.Request{
		OpName: "ListKeys",
		Query: `
query ListKeys ($emails: [String]) {
	publicKeys(emails: $emails, first: 1000) {
		edges {
			node {
				... PublicKeyFragment
			}
		}
	}
}
fragment PublicKeyFragment on PublicKey {
	id
	content
	user {
		... UserFragment
	}
}
fragment UserFragment on User {
	id
	name
	email
}
`,
		Variables: &__ListKeysInput{
			Emails: emails,
		},
	}
	var err error

	var data ListKeysResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func ListRecipes(
	ctx context.Context,
	client graphql.Client,
	repo string,
	provider Provider,
) (*ListRecipesResponse, error) {
	req := &graphql.Request{
		OpName: "ListRecipes",
		Query: `
query ListRecipes ($repo: String, $provider: Provider) {
	recipes(repositoryName: $repo, provider: $provider, first: 500) {
		edges {
			node {
				... RecipeFragment
			}
		}
	}
}
fragment RecipeFragment on Recipe {
	id
	name
	description
	restricted
	provider
	tests {
		type
		name
		message
		args {
			name
			repo
			key
		}
	}
	repository {
		id
		name
	}
	oidcSettings {
		uriFormat
		uriFormats
		authMethod
		domainKey
		subdomain
	}
}
`,
		Variables: &__ListRecipesInput{
			Repo:     repo,
			Provider: provider,
		},
	}
	var err error

	var data ListRecipesResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func ListRepositories(
	ctx context.Context,
	client graphql.Client,
	q string,
) (*ListRepositoriesResponse, error) {
	req := &graphql.Request{
		OpName: "ListRepositories",
		Query: `
query ListRepositories ($q: String) {
	repositories(q: $q, first: 100) {
		edges {
			node {
				... RepositoryFragment
			}
		}
	}
}
fragment RepositoryFragment on Repository {
	id
	name
	notes
	icon
	darkIcon
	description
	publisher {
		name
	}
	recipes {
		name
	}
}
`,
		Variables: &__ListRepositoriesInput{
			Q: q,
		},
	}
	var err error

	var data ListRepositoriesResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func ListTokens(
	ctx context.Context,
	client graphql.Client,
) (*ListTokensResponse, error) {
	req := &graphql.Request{
		OpName: "ListTokens",
		Query: `
query ListTokens {
	tokens(first: 3) {
		edges {
			node {
				token
			}
		}
	}
}
`,
	}
	var err error

	var data ListTokensResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func Login(
	ctx context.Context,
	client graphql.Client,
	email string,
	pwd string,
) (*LoginResponse, error) {
	req := &graphql.Request{
		OpName: "Login",
		Query: `
mutation Login ($email: String!, $pwd: String!) {
	login(email: $email, password: $pwd) {
		jwt
	}
}
`,
		Variables: &__LoginInput{
			Email: email,
			Pwd:   pwd,
		},
	}
	var err error

	var data LoginResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func Me(
	ctx context.Context,
	client graphql.Client,
) (*MeResponse, error) {
	req := &graphql.Request{
		OpName: "Me",
		Query: `
query Me {
	me {
		id
		email
	}
}
`,
	}
	var err error

	var data MeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func PollLoginToken(
	ctx context.Context,
	client graphql.Client,
	token string,
) (*PollLoginTokenResponse, error) {
	req := &graphql.Request{
		OpName: "PollLoginToken",
		Query: `
mutation PollLoginToken ($token: String!) {
	loginToken(token: $token) {
		jwt
	}
}
`,
		Variables: &__PollLoginTokenInput{
			Token: token,
		},
	}
	var err error

	var data PollLoginTokenResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func ReleaseLock(
	ctx context.Context,
	client graphql.Client,
	name string,
	attrs LockAttributes,
) (*ReleaseLockResponse, error) {
	req := &graphql.Request{
		OpName: "ReleaseLock",
		Query: `
mutation ReleaseLock ($name: String!, $attrs: LockAttributes!) {
	releaseLock(repository: $name, attributes: $attrs) {
		... ApplyLockFragment
	}
}
fragment ApplyLockFragment on ApplyLock {
	id
	lock
}
`,
		Variables: &__ReleaseLockInput{
			Name:  name,
			Attrs: attrs,
		},
	}
	var err error

	var data ReleaseLockResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func ResetInstallations(
	ctx context.Context,
	client graphql.Client,
) (*ResetInstallationsResponse, error) {
	req := &graphql.Request{
		OpName: "ResetInstallations",
		Query: `
mutation ResetInstallations {
	resetInstallations
}
`,
	}
	var err error

	var data ResetInstallationsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func Scaffolds(
	ctx context.Context,
	client graphql.Client,
	app string,
	pub string,
	cat Category,
	ing bool,
	pg bool,
) (*ScaffoldsResponse, error) {
	req := &graphql.Request{
		OpName: "Scaffolds",
		Query: `
query Scaffolds ($app: String!, $pub: String!, $cat: Category!, $ing: Boolean, $pg: Boolean) {
	scaffold(application: $app, publisher: $pub, category: $cat, ingress: $ing, postgres: $pg) {
		path
		content
	}
}
`,
		Variables: &__ScaffoldsInput{
			App: app,
			Pub: pub,
			Cat: cat,
			Ing: ing,
			Pg:  pg,
		},
	}
	var err error

	var data ScaffoldsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func UnlockRepository(
	ctx context.Context,
	client graphql.Client,
	name string,
) (*UnlockRepositoryResponse, error) {
	req := &graphql.Request{
		OpName: "UnlockRepository",
		Query: `
mutation UnlockRepository ($name: String!) {
	unlockRepository(name: $name)
}
`,
		Variables: &__UnlockRepositoryInput{
			Name: name,
		},
	}
	var err error

	var data UnlockRepositoryResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func UpdateRepository(
	ctx context.Context,
	client graphql.Client,
	name string,
	attrs RepositoryAttributes,
) (*UpdateRepositoryResponse, error) {
	req := &graphql.Request{
		OpName: "UpdateRepository",
		Query: `
mutation UpdateRepository ($name: String!, $attrs: RepositoryAttributes!) {
	updateRepository(repositoryName: $name, attributes: $attrs) {
		id
	}
}
`,
		Variables: &__UpdateRepositoryInput{
			Name:  name,
			Attrs: attrs,
		},
	}
	var err error

	var data UpdateRepositoryResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func UpdateVersion(
	ctx context.Context,
	client graphql.Client,
	spec VersionSpec,
	attributes VersionAttributes,
) (*UpdateVersionResponse, error) {
	req := &graphql.Request{
		OpName: "UpdateVersion",
		Query: `
mutation UpdateVersion ($spec: VersionSpec, $attributes: VersionAttributes!) {
	updateVersion(spec: $spec, attributes: $attributes) {
		id
	}
}
`,
		Variables: &__UpdateVersionInput{
			Spec:       spec,
			Attributes: attributes,
		},
	}
	var err error

	var data UpdateVersionResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func UploadTerraform(
	ctx context.Context,
	client graphql.Client,
	repoName string,
	name string,
	uploadOrUrl string,
) (*UploadTerraformResponse, error) {
	req := &graphql.Request{
		OpName: "UploadTerraform",
		Query: `
mutation UploadTerraform ($repoName: String!, $name: String!, $uploadOrUrl: UploadOrUrl!) {
	uploadTerraform(repositoryName: $repoName, name: $name, attributes: {name:$name,package:$uploadOrUrl}) {
		... TerraformFragment
	}
}
fragment TerraformFragment on Terraform {
	id
	name
	package
	description
	dependencies {
		... DependenciesFragment
	}
	valuesTemplate
}
fragment DependenciesFragment on Dependencies {
	dependencies {
		type
		name
		repo
	}
	wait
	application
	providers
	secrets
	wirings {
		terraform
		helm
	}
	providerWirings
	outputs
}
`,
		Variables: &__UploadTerraformInput{
			RepoName:    repoName,
			Name:        name,
			UploadOrUrl: uploadOrUrl,
		},
	}
	var err error

	var data UploadTerraformResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func UpsertOidcProvider(
	ctx context.Context,
	client graphql.Client,
	id string,
	attributes OidcAttributes,
) (*UpsertOidcProviderResponse, error) {
	req := &graphql.Request{
		OpName: "UpsertOidcProvider",
		Query: `
mutation UpsertOidcProvider ($id: ID!, $attributes: OidcAttributes!) {
	upsertOidcProvider(installationId: $id, attributes: $attributes) {
		id
	}
}
`,
		Variables: &__UpsertOidcProviderInput{
			Id:         id,
			Attributes: attributes,
		},
	}
	var err error

	var data UpsertOidcProviderResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
