// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package gqlclient

import (
	"context"
	"net/http"

	"github.com/Yamashou/gqlgenc/clientv2"
)

type Client struct {
	Client *clientv2.Client
}

func NewClient(cli *http.Client, baseURL string, options *clientv2.Options, interceptors ...clientv2.RequestInterceptor) *Client {
	return &Client{Client: clientv2.NewClient(cli, baseURL, options, interceptors...)}
}

type ConsoleInstanceFragment struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
	URL  string "json:\"url\" graphql:\"url\""
}

func (t *ConsoleInstanceFragment) GetID() string {
	if t == nil {
		t = &ConsoleInstanceFragment{}
	}
	return t.ID
}
func (t *ConsoleInstanceFragment) GetName() string {
	if t == nil {
		t = &ConsoleInstanceFragment{}
	}
	return t.Name
}
func (t *ConsoleInstanceFragment) GetURL() string {
	if t == nil {
		t = &ConsoleInstanceFragment{}
	}
	return t.URL
}

type DNSRecordFragment struct {
	Type    DNSRecordType "json:\"type\" graphql:\"type\""
	Name    string        "json:\"name\" graphql:\"name\""
	Records []*string     "json:\"records,omitempty\" graphql:\"records\""
}

func (t *DNSRecordFragment) GetType() *DNSRecordType {
	if t == nil {
		t = &DNSRecordFragment{}
	}
	return &t.Type
}
func (t *DNSRecordFragment) GetName() string {
	if t == nil {
		t = &DNSRecordFragment{}
	}
	return t.Name
}
func (t *DNSRecordFragment) GetRecords() []*string {
	if t == nil {
		t = &DNSRecordFragment{}
	}
	return t.Records
}

type ApplyLockFragment struct {
	ID   string  "json:\"id\" graphql:\"id\""
	Lock *string "json:\"lock,omitempty\" graphql:\"lock\""
}

func (t *ApplyLockFragment) GetID() string {
	if t == nil {
		t = &ApplyLockFragment{}
	}
	return t.ID
}
func (t *ApplyLockFragment) GetLock() *string {
	if t == nil {
		t = &ApplyLockFragment{}
	}
	return t.Lock
}

type ArtifactFragment struct {
	ID       *string           "json:\"id,omitempty\" graphql:\"id\""
	Name     *string           "json:\"name,omitempty\" graphql:\"name\""
	Readme   *string           "json:\"readme,omitempty\" graphql:\"readme\""
	Platform *ArtifactPlatform "json:\"platform,omitempty\" graphql:\"platform\""
	Arch     *string           "json:\"arch,omitempty\" graphql:\"arch\""
	Blob     *string           "json:\"blob,omitempty\" graphql:\"blob\""
	Sha      *string           "json:\"sha,omitempty\" graphql:\"sha\""
	Filesize *int64            "json:\"filesize,omitempty\" graphql:\"filesize\""
}

func (t *ArtifactFragment) GetID() *string {
	if t == nil {
		t = &ArtifactFragment{}
	}
	return t.ID
}
func (t *ArtifactFragment) GetName() *string {
	if t == nil {
		t = &ArtifactFragment{}
	}
	return t.Name
}
func (t *ArtifactFragment) GetReadme() *string {
	if t == nil {
		t = &ArtifactFragment{}
	}
	return t.Readme
}
func (t *ArtifactFragment) GetPlatform() *ArtifactPlatform {
	if t == nil {
		t = &ArtifactFragment{}
	}
	return t.Platform
}
func (t *ArtifactFragment) GetArch() *string {
	if t == nil {
		t = &ArtifactFragment{}
	}
	return t.Arch
}
func (t *ArtifactFragment) GetBlob() *string {
	if t == nil {
		t = &ArtifactFragment{}
	}
	return t.Blob
}
func (t *ArtifactFragment) GetSha() *string {
	if t == nil {
		t = &ArtifactFragment{}
	}
	return t.Sha
}
func (t *ArtifactFragment) GetFilesize() *int64 {
	if t == nil {
		t = &ArtifactFragment{}
	}
	return t.Filesize
}

type CloudShellFragment struct {
	ID     string "json:\"id\" graphql:\"id\""
	AesKey string "json:\"aesKey\" graphql:\"aesKey\""
	GitURL string "json:\"gitUrl\" graphql:\"gitUrl\""
}

func (t *CloudShellFragment) GetID() string {
	if t == nil {
		t = &CloudShellFragment{}
	}
	return t.ID
}
func (t *CloudShellFragment) GetAesKey() string {
	if t == nil {
		t = &CloudShellFragment{}
	}
	return t.AesKey
}
func (t *CloudShellFragment) GetGitURL() string {
	if t == nil {
		t = &CloudShellFragment{}
	}
	return t.GitURL
}

type ChartFragment struct {
	ID            *string "json:\"id,omitempty\" graphql:\"id\""
	Name          string  "json:\"name\" graphql:\"name\""
	Description   *string "json:\"description,omitempty\" graphql:\"description\""
	LatestVersion *string "json:\"latestVersion,omitempty\" graphql:\"latestVersion\""
}

func (t *ChartFragment) GetID() *string {
	if t == nil {
		t = &ChartFragment{}
	}
	return t.ID
}
func (t *ChartFragment) GetName() string {
	if t == nil {
		t = &ChartFragment{}
	}
	return t.Name
}
func (t *ChartFragment) GetDescription() *string {
	if t == nil {
		t = &ChartFragment{}
	}
	return t.Description
}
func (t *ChartFragment) GetLatestVersion() *string {
	if t == nil {
		t = &ChartFragment{}
	}
	return t.LatestVersion
}

type DependenciesFragment struct {
	Dependencies    []*DependenciesFragment_Dependencies "json:\"dependencies,omitempty\" graphql:\"dependencies\""
	Breaking        *bool                                "json:\"breaking,omitempty\" graphql:\"breaking\""
	Instructions    *DependenciesFragment_Instructions   "json:\"instructions,omitempty\" graphql:\"instructions\""
	Wait            *bool                                "json:\"wait,omitempty\" graphql:\"wait\""
	Application     *bool                                "json:\"application,omitempty\" graphql:\"application\""
	Providers       []*Provider                          "json:\"providers,omitempty\" graphql:\"providers\""
	Secrets         []*string                            "json:\"secrets,omitempty\" graphql:\"secrets\""
	Wirings         *DependenciesFragment_Wirings        "json:\"wirings,omitempty\" graphql:\"wirings\""
	ProviderWirings map[string]interface{}               "json:\"providerWirings,omitempty\" graphql:\"providerWirings\""
	Outputs         map[string]interface{}               "json:\"outputs,omitempty\" graphql:\"outputs\""
	ProviderVsn     *string                              "json:\"providerVsn,omitempty\" graphql:\"providerVsn\""
	CliVsn          *string                              "json:\"cliVsn,omitempty\" graphql:\"cliVsn\""
}

func (t *DependenciesFragment) GetDependencies() []*DependenciesFragment_Dependencies {
	if t == nil {
		t = &DependenciesFragment{}
	}
	return t.Dependencies
}
func (t *DependenciesFragment) GetBreaking() *bool {
	if t == nil {
		t = &DependenciesFragment{}
	}
	return t.Breaking
}
func (t *DependenciesFragment) GetInstructions() *DependenciesFragment_Instructions {
	if t == nil {
		t = &DependenciesFragment{}
	}
	return t.Instructions
}
func (t *DependenciesFragment) GetWait() *bool {
	if t == nil {
		t = &DependenciesFragment{}
	}
	return t.Wait
}
func (t *DependenciesFragment) GetApplication() *bool {
	if t == nil {
		t = &DependenciesFragment{}
	}
	return t.Application
}
func (t *DependenciesFragment) GetProviders() []*Provider {
	if t == nil {
		t = &DependenciesFragment{}
	}
	return t.Providers
}
func (t *DependenciesFragment) GetSecrets() []*string {
	if t == nil {
		t = &DependenciesFragment{}
	}
	return t.Secrets
}
func (t *DependenciesFragment) GetWirings() *DependenciesFragment_Wirings {
	if t == nil {
		t = &DependenciesFragment{}
	}
	return t.Wirings
}
func (t *DependenciesFragment) GetProviderWirings() map[string]interface{} {
	if t == nil {
		t = &DependenciesFragment{}
	}
	return t.ProviderWirings
}
func (t *DependenciesFragment) GetOutputs() map[string]interface{} {
	if t == nil {
		t = &DependenciesFragment{}
	}
	return t.Outputs
}
func (t *DependenciesFragment) GetProviderVsn() *string {
	if t == nil {
		t = &DependenciesFragment{}
	}
	return t.ProviderVsn
}
func (t *DependenciesFragment) GetCliVsn() *string {
	if t == nil {
		t = &DependenciesFragment{}
	}
	return t.CliVsn
}

type DNSDomainFragment struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *DNSDomainFragment) GetID() string {
	if t == nil {
		t = &DNSDomainFragment{}
	}
	return t.ID
}
func (t *DNSDomainFragment) GetName() string {
	if t == nil {
		t = &DNSDomainFragment{}
	}
	return t.Name
}

type RecipeSectionFragment struct {
	Index         *int64                         "json:\"index,omitempty\" graphql:\"index\""
	Repository    *RepositoryFragment            "json:\"repository,omitempty\" graphql:\"repository\""
	RecipeItems   []*RecipeItemFragment          "json:\"recipeItems,omitempty\" graphql:\"recipeItems\""
	Configuration []*RecipeConfigurationFragment "json:\"configuration,omitempty\" graphql:\"configuration\""
}

func (t *RecipeSectionFragment) GetIndex() *int64 {
	if t == nil {
		t = &RecipeSectionFragment{}
	}
	return t.Index
}
func (t *RecipeSectionFragment) GetRepository() *RepositoryFragment {
	if t == nil {
		t = &RecipeSectionFragment{}
	}
	return t.Repository
}
func (t *RecipeSectionFragment) GetRecipeItems() []*RecipeItemFragment {
	if t == nil {
		t = &RecipeSectionFragment{}
	}
	return t.RecipeItems
}
func (t *RecipeSectionFragment) GetConfiguration() []*RecipeConfigurationFragment {
	if t == nil {
		t = &RecipeSectionFragment{}
	}
	return t.Configuration
}

type RecipeFragment struct {
	ID             string                       "json:\"id\" graphql:\"id\""
	Name           string                       "json:\"name\" graphql:\"name\""
	Primary        *bool                        "json:\"primary,omitempty\" graphql:\"primary\""
	Description    *string                      "json:\"description,omitempty\" graphql:\"description\""
	Restricted     *bool                        "json:\"restricted,omitempty\" graphql:\"restricted\""
	Provider       *Provider                    "json:\"provider,omitempty\" graphql:\"provider\""
	Tests          []*RecipeFragment_Tests      "json:\"tests,omitempty\" graphql:\"tests\""
	Repository     *RecipeFragment_Repository   "json:\"repository,omitempty\" graphql:\"repository\""
	OidcSettings   *RecipeFragment_OidcSettings "json:\"oidcSettings,omitempty\" graphql:\"oidcSettings\""
	RecipeSections []*RecipeSectionFragment     "json:\"recipeSections,omitempty\" graphql:\"recipeSections\""
}

func (t *RecipeFragment) GetID() string {
	if t == nil {
		t = &RecipeFragment{}
	}
	return t.ID
}
func (t *RecipeFragment) GetName() string {
	if t == nil {
		t = &RecipeFragment{}
	}
	return t.Name
}
func (t *RecipeFragment) GetPrimary() *bool {
	if t == nil {
		t = &RecipeFragment{}
	}
	return t.Primary
}
func (t *RecipeFragment) GetDescription() *string {
	if t == nil {
		t = &RecipeFragment{}
	}
	return t.Description
}
func (t *RecipeFragment) GetRestricted() *bool {
	if t == nil {
		t = &RecipeFragment{}
	}
	return t.Restricted
}
func (t *RecipeFragment) GetProvider() *Provider {
	if t == nil {
		t = &RecipeFragment{}
	}
	return t.Provider
}
func (t *RecipeFragment) GetTests() []*RecipeFragment_Tests {
	if t == nil {
		t = &RecipeFragment{}
	}
	return t.Tests
}
func (t *RecipeFragment) GetRepository() *RecipeFragment_Repository {
	if t == nil {
		t = &RecipeFragment{}
	}
	return t.Repository
}
func (t *RecipeFragment) GetOidcSettings() *RecipeFragment_OidcSettings {
	if t == nil {
		t = &RecipeFragment{}
	}
	return t.OidcSettings
}
func (t *RecipeFragment) GetRecipeSections() []*RecipeSectionFragment {
	if t == nil {
		t = &RecipeFragment{}
	}
	return t.RecipeSections
}

type RecipeItemFragment struct {
	ID            *string                        "json:\"id,omitempty\" graphql:\"id\""
	Chart         *ChartFragment                 "json:\"chart,omitempty\" graphql:\"chart\""
	Terraform     *TerraformFragment             "json:\"terraform,omitempty\" graphql:\"terraform\""
	Configuration []*RecipeConfigurationFragment "json:\"configuration,omitempty\" graphql:\"configuration\""
}

func (t *RecipeItemFragment) GetID() *string {
	if t == nil {
		t = &RecipeItemFragment{}
	}
	return t.ID
}
func (t *RecipeItemFragment) GetChart() *ChartFragment {
	if t == nil {
		t = &RecipeItemFragment{}
	}
	return t.Chart
}
func (t *RecipeItemFragment) GetTerraform() *TerraformFragment {
	if t == nil {
		t = &RecipeItemFragment{}
	}
	return t.Terraform
}
func (t *RecipeItemFragment) GetConfiguration() []*RecipeConfigurationFragment {
	if t == nil {
		t = &RecipeItemFragment{}
	}
	return t.Configuration
}

type RecipeConfigurationFragment struct {
	Name          *string                                 "json:\"name,omitempty\" graphql:\"name\""
	Type          *Datatype                               "json:\"type,omitempty\" graphql:\"type\""
	Default       *string                                 "json:\"default,omitempty\" graphql:\"default\""
	Documentation *string                                 "json:\"documentation,omitempty\" graphql:\"documentation\""
	Optional      *bool                                   "json:\"optional,omitempty\" graphql:\"optional\""
	Placeholder   *string                                 "json:\"placeholder,omitempty\" graphql:\"placeholder\""
	FunctionName  *string                                 "json:\"functionName,omitempty\" graphql:\"functionName\""
	Condition     *RecipeConfigurationFragment_Condition  "json:\"condition,omitempty\" graphql:\"condition\""
	Validation    *RecipeConfigurationFragment_Validation "json:\"validation,omitempty\" graphql:\"validation\""
}

func (t *RecipeConfigurationFragment) GetName() *string {
	if t == nil {
		t = &RecipeConfigurationFragment{}
	}
	return t.Name
}
func (t *RecipeConfigurationFragment) GetType() *Datatype {
	if t == nil {
		t = &RecipeConfigurationFragment{}
	}
	return t.Type
}
func (t *RecipeConfigurationFragment) GetDefault() *string {
	if t == nil {
		t = &RecipeConfigurationFragment{}
	}
	return t.Default
}
func (t *RecipeConfigurationFragment) GetDocumentation() *string {
	if t == nil {
		t = &RecipeConfigurationFragment{}
	}
	return t.Documentation
}
func (t *RecipeConfigurationFragment) GetOptional() *bool {
	if t == nil {
		t = &RecipeConfigurationFragment{}
	}
	return t.Optional
}
func (t *RecipeConfigurationFragment) GetPlaceholder() *string {
	if t == nil {
		t = &RecipeConfigurationFragment{}
	}
	return t.Placeholder
}
func (t *RecipeConfigurationFragment) GetFunctionName() *string {
	if t == nil {
		t = &RecipeConfigurationFragment{}
	}
	return t.FunctionName
}
func (t *RecipeConfigurationFragment) GetCondition() *RecipeConfigurationFragment_Condition {
	if t == nil {
		t = &RecipeConfigurationFragment{}
	}
	return t.Condition
}
func (t *RecipeConfigurationFragment) GetValidation() *RecipeConfigurationFragment_Validation {
	if t == nil {
		t = &RecipeConfigurationFragment{}
	}
	return t.Validation
}

type RepositoryFragment struct {
	ID          string                        "json:\"id\" graphql:\"id\""
	Name        string                        "json:\"name\" graphql:\"name\""
	Notes       *string                       "json:\"notes,omitempty\" graphql:\"notes\""
	Icon        *string                       "json:\"icon,omitempty\" graphql:\"icon\""
	DarkIcon    *string                       "json:\"darkIcon,omitempty\" graphql:\"darkIcon\""
	Description *string                       "json:\"description,omitempty\" graphql:\"description\""
	Publisher   *RepositoryFragment_Publisher "json:\"publisher,omitempty\" graphql:\"publisher\""
	Recipes     []*RepositoryFragment_Recipes "json:\"recipes,omitempty\" graphql:\"recipes\""
}

func (t *RepositoryFragment) GetID() string {
	if t == nil {
		t = &RepositoryFragment{}
	}
	return t.ID
}
func (t *RepositoryFragment) GetName() string {
	if t == nil {
		t = &RepositoryFragment{}
	}
	return t.Name
}
func (t *RepositoryFragment) GetNotes() *string {
	if t == nil {
		t = &RepositoryFragment{}
	}
	return t.Notes
}
func (t *RepositoryFragment) GetIcon() *string {
	if t == nil {
		t = &RepositoryFragment{}
	}
	return t.Icon
}
func (t *RepositoryFragment) GetDarkIcon() *string {
	if t == nil {
		t = &RepositoryFragment{}
	}
	return t.DarkIcon
}
func (t *RepositoryFragment) GetDescription() *string {
	if t == nil {
		t = &RepositoryFragment{}
	}
	return t.Description
}
func (t *RepositoryFragment) GetPublisher() *RepositoryFragment_Publisher {
	if t == nil {
		t = &RepositoryFragment{}
	}
	return t.Publisher
}
func (t *RepositoryFragment) GetRecipes() []*RepositoryFragment_Recipes {
	if t == nil {
		t = &RepositoryFragment{}
	}
	return t.Recipes
}

type TerraformFragment struct {
	ID             *string               "json:\"id,omitempty\" graphql:\"id\""
	Name           *string               "json:\"name,omitempty\" graphql:\"name\""
	Package        *string               "json:\"package,omitempty\" graphql:\"package\""
	Description    *string               "json:\"description,omitempty\" graphql:\"description\""
	Dependencies   *DependenciesFragment "json:\"dependencies,omitempty\" graphql:\"dependencies\""
	ValuesTemplate *string               "json:\"valuesTemplate,omitempty\" graphql:\"valuesTemplate\""
}

func (t *TerraformFragment) GetID() *string {
	if t == nil {
		t = &TerraformFragment{}
	}
	return t.ID
}
func (t *TerraformFragment) GetName() *string {
	if t == nil {
		t = &TerraformFragment{}
	}
	return t.Name
}
func (t *TerraformFragment) GetPackage() *string {
	if t == nil {
		t = &TerraformFragment{}
	}
	return t.Package
}
func (t *TerraformFragment) GetDescription() *string {
	if t == nil {
		t = &TerraformFragment{}
	}
	return t.Description
}
func (t *TerraformFragment) GetDependencies() *DependenciesFragment {
	if t == nil {
		t = &TerraformFragment{}
	}
	return t.Dependencies
}
func (t *TerraformFragment) GetValuesTemplate() *string {
	if t == nil {
		t = &TerraformFragment{}
	}
	return t.ValuesTemplate
}

type TerraformInstallationFragment struct {
	ID        *string            "json:\"id,omitempty\" graphql:\"id\""
	Terraform *TerraformFragment "json:\"terraform,omitempty\" graphql:\"terraform\""
	Version   *VersionFragment   "json:\"version,omitempty\" graphql:\"version\""
}

func (t *TerraformInstallationFragment) GetID() *string {
	if t == nil {
		t = &TerraformInstallationFragment{}
	}
	return t.ID
}
func (t *TerraformInstallationFragment) GetTerraform() *TerraformFragment {
	if t == nil {
		t = &TerraformInstallationFragment{}
	}
	return t.Terraform
}
func (t *TerraformInstallationFragment) GetVersion() *VersionFragment {
	if t == nil {
		t = &TerraformInstallationFragment{}
	}
	return t.Version
}

type VersionFragment struct {
	ID             string                 "json:\"id\" graphql:\"id\""
	Helm           map[string]interface{} "json:\"helm,omitempty\" graphql:\"helm\""
	Readme         *string                "json:\"readme,omitempty\" graphql:\"readme\""
	Version        string                 "json:\"version\" graphql:\"version\""
	ValuesTemplate *string                "json:\"valuesTemplate,omitempty\" graphql:\"valuesTemplate\""
	TemplateType   *TemplateType          "json:\"templateType,omitempty\" graphql:\"templateType\""
	Package        *string                "json:\"package,omitempty\" graphql:\"package\""
	Crds           []*CrdFragment         "json:\"crds,omitempty\" graphql:\"crds\""
	Dependencies   *DependenciesFragment  "json:\"dependencies,omitempty\" graphql:\"dependencies\""
	InsertedAt     *string                "json:\"insertedAt,omitempty\" graphql:\"insertedAt\""
}

func (t *VersionFragment) GetID() string {
	if t == nil {
		t = &VersionFragment{}
	}
	return t.ID
}
func (t *VersionFragment) GetHelm() map[string]interface{} {
	if t == nil {
		t = &VersionFragment{}
	}
	return t.Helm
}
func (t *VersionFragment) GetReadme() *string {
	if t == nil {
		t = &VersionFragment{}
	}
	return t.Readme
}
func (t *VersionFragment) GetVersion() string {
	if t == nil {
		t = &VersionFragment{}
	}
	return t.Version
}
func (t *VersionFragment) GetValuesTemplate() *string {
	if t == nil {
		t = &VersionFragment{}
	}
	return t.ValuesTemplate
}
func (t *VersionFragment) GetTemplateType() *TemplateType {
	if t == nil {
		t = &VersionFragment{}
	}
	return t.TemplateType
}
func (t *VersionFragment) GetPackage() *string {
	if t == nil {
		t = &VersionFragment{}
	}
	return t.Package
}
func (t *VersionFragment) GetCrds() []*CrdFragment {
	if t == nil {
		t = &VersionFragment{}
	}
	return t.Crds
}
func (t *VersionFragment) GetDependencies() *DependenciesFragment {
	if t == nil {
		t = &VersionFragment{}
	}
	return t.Dependencies
}
func (t *VersionFragment) GetInsertedAt() *string {
	if t == nil {
		t = &VersionFragment{}
	}
	return t.InsertedAt
}

type CrdFragment struct {
	ID   string  "json:\"id\" graphql:\"id\""
	Name string  "json:\"name\" graphql:\"name\""
	Blob *string "json:\"blob,omitempty\" graphql:\"blob\""
}

func (t *CrdFragment) GetID() string {
	if t == nil {
		t = &CrdFragment{}
	}
	return t.ID
}
func (t *CrdFragment) GetName() string {
	if t == nil {
		t = &CrdFragment{}
	}
	return t.Name
}
func (t *CrdFragment) GetBlob() *string {
	if t == nil {
		t = &CrdFragment{}
	}
	return t.Blob
}

type ChartInstallationFragment struct {
	ID      *string                          "json:\"id,omitempty\" graphql:\"id\""
	Chart   *ChartInstallationFragment_Chart "json:\"chart,omitempty\" graphql:\"chart\""
	Version *VersionFragment                 "json:\"version,omitempty\" graphql:\"version\""
}

func (t *ChartInstallationFragment) GetID() *string {
	if t == nil {
		t = &ChartInstallationFragment{}
	}
	return t.ID
}
func (t *ChartInstallationFragment) GetChart() *ChartInstallationFragment_Chart {
	if t == nil {
		t = &ChartInstallationFragment{}
	}
	return t.Chart
}
func (t *ChartInstallationFragment) GetVersion() *VersionFragment {
	if t == nil {
		t = &ChartInstallationFragment{}
	}
	return t.Version
}

type InstallationFragment struct {
	ID           string                 "json:\"id\" graphql:\"id\""
	Context      map[string]interface{} "json:\"context,omitempty\" graphql:\"context\""
	LicenseKey   *string                "json:\"licenseKey,omitempty\" graphql:\"licenseKey\""
	AcmeKeyID    *string                "json:\"acmeKeyId,omitempty\" graphql:\"acmeKeyId\""
	AcmeSecret   *string                "json:\"acmeSecret,omitempty\" graphql:\"acmeSecret\""
	Repository   *RepositoryFragment    "json:\"repository,omitempty\" graphql:\"repository\""
	OidcProvider *OIDCProvider          "json:\"oidcProvider,omitempty\" graphql:\"oidcProvider\""
}

func (t *InstallationFragment) GetID() string {
	if t == nil {
		t = &InstallationFragment{}
	}
	return t.ID
}
func (t *InstallationFragment) GetContext() map[string]interface{} {
	if t == nil {
		t = &InstallationFragment{}
	}
	return t.Context
}
func (t *InstallationFragment) GetLicenseKey() *string {
	if t == nil {
		t = &InstallationFragment{}
	}
	return t.LicenseKey
}
func (t *InstallationFragment) GetAcmeKeyID() *string {
	if t == nil {
		t = &InstallationFragment{}
	}
	return t.AcmeKeyID
}
func (t *InstallationFragment) GetAcmeSecret() *string {
	if t == nil {
		t = &InstallationFragment{}
	}
	return t.AcmeSecret
}
func (t *InstallationFragment) GetRepository() *RepositoryFragment {
	if t == nil {
		t = &InstallationFragment{}
	}
	return t.Repository
}
func (t *InstallationFragment) GetOidcProvider() *OIDCProvider {
	if t == nil {
		t = &InstallationFragment{}
	}
	return t.OidcProvider
}

type OIDCProvider struct {
	ID            string                      "json:\"id\" graphql:\"id\""
	ClientID      string                      "json:\"clientId\" graphql:\"clientId\""
	ClientSecret  string                      "json:\"clientSecret\" graphql:\"clientSecret\""
	RedirectUris  []*string                   "json:\"redirectUris,omitempty\" graphql:\"redirectUris\""
	Bindings      []*OIDCProvider_Bindings    "json:\"bindings,omitempty\" graphql:\"bindings\""
	Configuration *OIDCProvider_Configuration "json:\"configuration,omitempty\" graphql:\"configuration\""
}

func (t *OIDCProvider) GetID() string {
	if t == nil {
		t = &OIDCProvider{}
	}
	return t.ID
}
func (t *OIDCProvider) GetClientID() string {
	if t == nil {
		t = &OIDCProvider{}
	}
	return t.ClientID
}
func (t *OIDCProvider) GetClientSecret() string {
	if t == nil {
		t = &OIDCProvider{}
	}
	return t.ClientSecret
}
func (t *OIDCProvider) GetRedirectUris() []*string {
	if t == nil {
		t = &OIDCProvider{}
	}
	return t.RedirectUris
}
func (t *OIDCProvider) GetBindings() []*OIDCProvider_Bindings {
	if t == nil {
		t = &OIDCProvider{}
	}
	return t.Bindings
}
func (t *OIDCProvider) GetConfiguration() *OIDCProvider_Configuration {
	if t == nil {
		t = &OIDCProvider{}
	}
	return t.Configuration
}

type PublicKeyFragment struct {
	ID      string        "json:\"id\" graphql:\"id\""
	Content string        "json:\"content\" graphql:\"content\""
	User    *UserFragment "json:\"user\" graphql:\"user\""
}

func (t *PublicKeyFragment) GetID() string {
	if t == nil {
		t = &PublicKeyFragment{}
	}
	return t.ID
}
func (t *PublicKeyFragment) GetContent() string {
	if t == nil {
		t = &PublicKeyFragment{}
	}
	return t.Content
}
func (t *PublicKeyFragment) GetUser() *UserFragment {
	if t == nil {
		t = &PublicKeyFragment{}
	}
	return t.User
}

type UserFragment struct {
	ID    string "json:\"id\" graphql:\"id\""
	Name  string "json:\"name\" graphql:\"name\""
	Email string "json:\"email\" graphql:\"email\""
}

func (t *UserFragment) GetID() string {
	if t == nil {
		t = &UserFragment{}
	}
	return t.ID
}
func (t *UserFragment) GetName() string {
	if t == nil {
		t = &UserFragment{}
	}
	return t.Name
}
func (t *UserFragment) GetEmail() string {
	if t == nil {
		t = &UserFragment{}
	}
	return t.Email
}

type EabCredentialFragment struct {
	ID       string   "json:\"id\" graphql:\"id\""
	KeyID    string   "json:\"keyId\" graphql:\"keyId\""
	HmacKey  string   "json:\"hmacKey\" graphql:\"hmacKey\""
	Cluster  string   "json:\"cluster\" graphql:\"cluster\""
	Provider Provider "json:\"provider\" graphql:\"provider\""
}

func (t *EabCredentialFragment) GetID() string {
	if t == nil {
		t = &EabCredentialFragment{}
	}
	return t.ID
}
func (t *EabCredentialFragment) GetKeyID() string {
	if t == nil {
		t = &EabCredentialFragment{}
	}
	return t.KeyID
}
func (t *EabCredentialFragment) GetHmacKey() string {
	if t == nil {
		t = &EabCredentialFragment{}
	}
	return t.HmacKey
}
func (t *EabCredentialFragment) GetCluster() string {
	if t == nil {
		t = &EabCredentialFragment{}
	}
	return t.Cluster
}
func (t *EabCredentialFragment) GetProvider() *Provider {
	if t == nil {
		t = &EabCredentialFragment{}
	}
	return &t.Provider
}

type TestFragment struct {
	ID         string                "json:\"id\" graphql:\"id\""
	Name       *string               "json:\"name,omitempty\" graphql:\"name\""
	Status     TestStatus            "json:\"status\" graphql:\"status\""
	PromoteTag string                "json:\"promoteTag\" graphql:\"promoteTag\""
	Steps      []*TestFragment_Steps "json:\"steps,omitempty\" graphql:\"steps\""
}

func (t *TestFragment) GetID() string {
	if t == nil {
		t = &TestFragment{}
	}
	return t.ID
}
func (t *TestFragment) GetName() *string {
	if t == nil {
		t = &TestFragment{}
	}
	return t.Name
}
func (t *TestFragment) GetStatus() *TestStatus {
	if t == nil {
		t = &TestFragment{}
	}
	return &t.Status
}
func (t *TestFragment) GetPromoteTag() string {
	if t == nil {
		t = &TestFragment{}
	}
	return t.PromoteTag
}
func (t *TestFragment) GetSteps() []*TestFragment_Steps {
	if t == nil {
		t = &TestFragment{}
	}
	return t.Steps
}

type StackFragment struct {
	ID          string            "json:\"id\" graphql:\"id\""
	Name        string            "json:\"name\" graphql:\"name\""
	Featured    *bool             "json:\"featured,omitempty\" graphql:\"featured\""
	Description *string           "json:\"description,omitempty\" graphql:\"description\""
	Bundles     []*RecipeFragment "json:\"bundles,omitempty\" graphql:\"bundles\""
}

func (t *StackFragment) GetID() string {
	if t == nil {
		t = &StackFragment{}
	}
	return t.ID
}
func (t *StackFragment) GetName() string {
	if t == nil {
		t = &StackFragment{}
	}
	return t.Name
}
func (t *StackFragment) GetFeatured() *bool {
	if t == nil {
		t = &StackFragment{}
	}
	return t.Featured
}
func (t *StackFragment) GetDescription() *string {
	if t == nil {
		t = &StackFragment{}
	}
	return t.Description
}
func (t *StackFragment) GetBundles() []*RecipeFragment {
	if t == nil {
		t = &StackFragment{}
	}
	return t.Bundles
}

type KeyBackupFragment struct {
	ID           string   "json:\"id\" graphql:\"id\""
	Name         string   "json:\"name\" graphql:\"name\""
	Digest       string   "json:\"digest\" graphql:\"digest\""
	Repositories []string "json:\"repositories,omitempty\" graphql:\"repositories\""
	InsertedAt   *string  "json:\"insertedAt,omitempty\" graphql:\"insertedAt\""
}

func (t *KeyBackupFragment) GetID() string {
	if t == nil {
		t = &KeyBackupFragment{}
	}
	return t.ID
}
func (t *KeyBackupFragment) GetName() string {
	if t == nil {
		t = &KeyBackupFragment{}
	}
	return t.Name
}
func (t *KeyBackupFragment) GetDigest() string {
	if t == nil {
		t = &KeyBackupFragment{}
	}
	return t.Digest
}
func (t *KeyBackupFragment) GetRepositories() []string {
	if t == nil {
		t = &KeyBackupFragment{}
	}
	return t.Repositories
}
func (t *KeyBackupFragment) GetInsertedAt() *string {
	if t == nil {
		t = &KeyBackupFragment{}
	}
	return t.InsertedAt
}

type ClusterFragment struct {
	ID       string        "json:\"id\" graphql:\"id\""
	Name     string        "json:\"name\" graphql:\"name\""
	Provider Provider      "json:\"provider\" graphql:\"provider\""
	Source   *Source       "json:\"source,omitempty\" graphql:\"source\""
	GitURL   *string       "json:\"gitUrl,omitempty\" graphql:\"gitUrl\""
	Owner    *UserFragment "json:\"owner,omitempty\" graphql:\"owner\""
}

func (t *ClusterFragment) GetID() string {
	if t == nil {
		t = &ClusterFragment{}
	}
	return t.ID
}
func (t *ClusterFragment) GetName() string {
	if t == nil {
		t = &ClusterFragment{}
	}
	return t.Name
}
func (t *ClusterFragment) GetProvider() *Provider {
	if t == nil {
		t = &ClusterFragment{}
	}
	return &t.Provider
}
func (t *ClusterFragment) GetSource() *Source {
	if t == nil {
		t = &ClusterFragment{}
	}
	return t.Source
}
func (t *ClusterFragment) GetGitURL() *string {
	if t == nil {
		t = &ClusterFragment{}
	}
	return t.GitURL
}
func (t *ClusterFragment) GetOwner() *UserFragment {
	if t == nil {
		t = &ClusterFragment{}
	}
	return t.Owner
}

type ChatMessageFragment struct {
	Role    string  "json:\"role\" graphql:\"role\""
	Content string  "json:\"content\" graphql:\"content\""
	Name    *string "json:\"name,omitempty\" graphql:\"name\""
}

func (t *ChatMessageFragment) GetRole() string {
	if t == nil {
		t = &ChatMessageFragment{}
	}
	return t.Role
}
func (t *ChatMessageFragment) GetContent() string {
	if t == nil {
		t = &ChatMessageFragment{}
	}
	return t.Content
}
func (t *ChatMessageFragment) GetName() *string {
	if t == nil {
		t = &ChatMessageFragment{}
	}
	return t.Name
}

type OidcTrustRelationshipFragment struct {
	ID         string   "json:\"id\" graphql:\"id\""
	Issuer     string   "json:\"issuer\" graphql:\"issuer\""
	Trust      string   "json:\"trust\" graphql:\"trust\""
	Scopes     []string "json:\"scopes,omitempty\" graphql:\"scopes\""
	InsertedAt *string  "json:\"insertedAt,omitempty\" graphql:\"insertedAt\""
}

func (t *OidcTrustRelationshipFragment) GetID() string {
	if t == nil {
		t = &OidcTrustRelationshipFragment{}
	}
	return t.ID
}
func (t *OidcTrustRelationshipFragment) GetIssuer() string {
	if t == nil {
		t = &OidcTrustRelationshipFragment{}
	}
	return t.Issuer
}
func (t *OidcTrustRelationshipFragment) GetTrust() string {
	if t == nil {
		t = &OidcTrustRelationshipFragment{}
	}
	return t.Trust
}
func (t *OidcTrustRelationshipFragment) GetScopes() []string {
	if t == nil {
		t = &OidcTrustRelationshipFragment{}
	}
	return t.Scopes
}
func (t *OidcTrustRelationshipFragment) GetInsertedAt() *string {
	if t == nil {
		t = &OidcTrustRelationshipFragment{}
	}
	return t.InsertedAt
}

type DependenciesFragment_Dependencies struct {
	Type     *DependencyType "json:\"type,omitempty\" graphql:\"type\""
	Name     *string         "json:\"name,omitempty\" graphql:\"name\""
	Repo     *string         "json:\"repo,omitempty\" graphql:\"repo\""
	Optional *bool           "json:\"optional,omitempty\" graphql:\"optional\""
	Version  *string         "json:\"version,omitempty\" graphql:\"version\""
}

func (t *DependenciesFragment_Dependencies) GetType() *DependencyType {
	if t == nil {
		t = &DependenciesFragment_Dependencies{}
	}
	return t.Type
}
func (t *DependenciesFragment_Dependencies) GetName() *string {
	if t == nil {
		t = &DependenciesFragment_Dependencies{}
	}
	return t.Name
}
func (t *DependenciesFragment_Dependencies) GetRepo() *string {
	if t == nil {
		t = &DependenciesFragment_Dependencies{}
	}
	return t.Repo
}
func (t *DependenciesFragment_Dependencies) GetOptional() *bool {
	if t == nil {
		t = &DependenciesFragment_Dependencies{}
	}
	return t.Optional
}
func (t *DependenciesFragment_Dependencies) GetVersion() *string {
	if t == nil {
		t = &DependenciesFragment_Dependencies{}
	}
	return t.Version
}

type DependenciesFragment_Instructions struct {
	Instructions *string "json:\"instructions,omitempty\" graphql:\"instructions\""
	Script       *string "json:\"script,omitempty\" graphql:\"script\""
}

func (t *DependenciesFragment_Instructions) GetInstructions() *string {
	if t == nil {
		t = &DependenciesFragment_Instructions{}
	}
	return t.Instructions
}
func (t *DependenciesFragment_Instructions) GetScript() *string {
	if t == nil {
		t = &DependenciesFragment_Instructions{}
	}
	return t.Script
}

type DependenciesFragment_Wirings struct {
	Terraform map[string]interface{} "json:\"terraform,omitempty\" graphql:\"terraform\""
	Helm      map[string]interface{} "json:\"helm,omitempty\" graphql:\"helm\""
}

func (t *DependenciesFragment_Wirings) GetTerraform() map[string]interface{} {
	if t == nil {
		t = &DependenciesFragment_Wirings{}
	}
	return t.Terraform
}
func (t *DependenciesFragment_Wirings) GetHelm() map[string]interface{} {
	if t == nil {
		t = &DependenciesFragment_Wirings{}
	}
	return t.Helm
}

type RecipeSectionFragment_Repository_RepositoryFragment_Publisher struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *RecipeSectionFragment_Repository_RepositoryFragment_Publisher) GetName() string {
	if t == nil {
		t = &RecipeSectionFragment_Repository_RepositoryFragment_Publisher{}
	}
	return t.Name
}

type RecipeSectionFragment_Repository_RepositoryFragment_Recipes struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *RecipeSectionFragment_Repository_RepositoryFragment_Recipes) GetName() string {
	if t == nil {
		t = &RecipeSectionFragment_Repository_RepositoryFragment_Recipes{}
	}
	return t.Name
}

type RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies struct {
	Type     *DependencyType "json:\"type,omitempty\" graphql:\"type\""
	Name     *string         "json:\"name,omitempty\" graphql:\"name\""
	Repo     *string         "json:\"repo,omitempty\" graphql:\"repo\""
	Optional *bool           "json:\"optional,omitempty\" graphql:\"optional\""
	Version  *string         "json:\"version,omitempty\" graphql:\"version\""
}

func (t *RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetType() *DependencyType {
	if t == nil {
		t = &RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Type
}
func (t *RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetName() *string {
	if t == nil {
		t = &RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Name
}
func (t *RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetRepo() *string {
	if t == nil {
		t = &RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Repo
}
func (t *RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetOptional() *bool {
	if t == nil {
		t = &RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Optional
}
func (t *RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetVersion() *string {
	if t == nil {
		t = &RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Version
}

type RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions struct {
	Instructions *string "json:\"instructions,omitempty\" graphql:\"instructions\""
	Script       *string "json:\"script,omitempty\" graphql:\"script\""
}

func (t *RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions) GetInstructions() *string {
	if t == nil {
		t = &RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions{}
	}
	return t.Instructions
}
func (t *RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions) GetScript() *string {
	if t == nil {
		t = &RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions{}
	}
	return t.Script
}

type RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings struct {
	Terraform map[string]interface{} "json:\"terraform,omitempty\" graphql:\"terraform\""
	Helm      map[string]interface{} "json:\"helm,omitempty\" graphql:\"helm\""
}

func (t *RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings) GetTerraform() map[string]interface{} {
	if t == nil {
		t = &RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings{}
	}
	return t.Terraform
}
func (t *RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings) GetHelm() map[string]interface{} {
	if t == nil {
		t = &RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings{}
	}
	return t.Helm
}

type RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition struct {
	Field     string    "json:\"field\" graphql:\"field\""
	Operation Operation "json:\"operation\" graphql:\"operation\""
	Value     *string   "json:\"value,omitempty\" graphql:\"value\""
}

func (t *RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition) GetField() string {
	if t == nil {
		t = &RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return t.Field
}
func (t *RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition) GetOperation() *Operation {
	if t == nil {
		t = &RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return &t.Operation
}
func (t *RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition) GetValue() *string {
	if t == nil {
		t = &RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return t.Value
}

type RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation struct {
	Type    ValidationType "json:\"type\" graphql:\"type\""
	Regex   *string        "json:\"regex,omitempty\" graphql:\"regex\""
	Message string         "json:\"message\" graphql:\"message\""
}

func (t *RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation) GetType() *ValidationType {
	if t == nil {
		t = &RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return &t.Type
}
func (t *RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation) GetRegex() *string {
	if t == nil {
		t = &RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return t.Regex
}
func (t *RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation) GetMessage() string {
	if t == nil {
		t = &RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return t.Message
}

type RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition struct {
	Field     string    "json:\"field\" graphql:\"field\""
	Operation Operation "json:\"operation\" graphql:\"operation\""
	Value     *string   "json:\"value,omitempty\" graphql:\"value\""
}

func (t *RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition) GetField() string {
	if t == nil {
		t = &RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return t.Field
}
func (t *RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition) GetOperation() *Operation {
	if t == nil {
		t = &RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return &t.Operation
}
func (t *RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition) GetValue() *string {
	if t == nil {
		t = &RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return t.Value
}

type RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation struct {
	Type    ValidationType "json:\"type\" graphql:\"type\""
	Regex   *string        "json:\"regex,omitempty\" graphql:\"regex\""
	Message string         "json:\"message\" graphql:\"message\""
}

func (t *RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation) GetType() *ValidationType {
	if t == nil {
		t = &RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return &t.Type
}
func (t *RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation) GetRegex() *string {
	if t == nil {
		t = &RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return t.Regex
}
func (t *RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation) GetMessage() string {
	if t == nil {
		t = &RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return t.Message
}

type RecipeFragment_Tests_Args struct {
	Name string "json:\"name\" graphql:\"name\""
	Repo string "json:\"repo\" graphql:\"repo\""
	Key  string "json:\"key\" graphql:\"key\""
}

func (t *RecipeFragment_Tests_Args) GetName() string {
	if t == nil {
		t = &RecipeFragment_Tests_Args{}
	}
	return t.Name
}
func (t *RecipeFragment_Tests_Args) GetRepo() string {
	if t == nil {
		t = &RecipeFragment_Tests_Args{}
	}
	return t.Repo
}
func (t *RecipeFragment_Tests_Args) GetKey() string {
	if t == nil {
		t = &RecipeFragment_Tests_Args{}
	}
	return t.Key
}

type RecipeFragment_Tests struct {
	Type    TestType                     "json:\"type\" graphql:\"type\""
	Name    string                       "json:\"name\" graphql:\"name\""
	Message *string                      "json:\"message,omitempty\" graphql:\"message\""
	Args    []*RecipeFragment_Tests_Args "json:\"args,omitempty\" graphql:\"args\""
}

func (t *RecipeFragment_Tests) GetType() *TestType {
	if t == nil {
		t = &RecipeFragment_Tests{}
	}
	return &t.Type
}
func (t *RecipeFragment_Tests) GetName() string {
	if t == nil {
		t = &RecipeFragment_Tests{}
	}
	return t.Name
}
func (t *RecipeFragment_Tests) GetMessage() *string {
	if t == nil {
		t = &RecipeFragment_Tests{}
	}
	return t.Message
}
func (t *RecipeFragment_Tests) GetArgs() []*RecipeFragment_Tests_Args {
	if t == nil {
		t = &RecipeFragment_Tests{}
	}
	return t.Args
}

type RecipeFragment_Repository struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *RecipeFragment_Repository) GetID() string {
	if t == nil {
		t = &RecipeFragment_Repository{}
	}
	return t.ID
}
func (t *RecipeFragment_Repository) GetName() string {
	if t == nil {
		t = &RecipeFragment_Repository{}
	}
	return t.Name
}

type RecipeFragment_OidcSettings struct {
	URIFormat  *string        "json:\"uriFormat,omitempty\" graphql:\"uriFormat\""
	URIFormats []*string      "json:\"uriFormats,omitempty\" graphql:\"uriFormats\""
	AuthMethod OidcAuthMethod "json:\"authMethod\" graphql:\"authMethod\""
	DomainKey  *string        "json:\"domainKey,omitempty\" graphql:\"domainKey\""
	Subdomain  *bool          "json:\"subdomain,omitempty\" graphql:\"subdomain\""
}

func (t *RecipeFragment_OidcSettings) GetURIFormat() *string {
	if t == nil {
		t = &RecipeFragment_OidcSettings{}
	}
	return t.URIFormat
}
func (t *RecipeFragment_OidcSettings) GetURIFormats() []*string {
	if t == nil {
		t = &RecipeFragment_OidcSettings{}
	}
	return t.URIFormats
}
func (t *RecipeFragment_OidcSettings) GetAuthMethod() *OidcAuthMethod {
	if t == nil {
		t = &RecipeFragment_OidcSettings{}
	}
	return &t.AuthMethod
}
func (t *RecipeFragment_OidcSettings) GetDomainKey() *string {
	if t == nil {
		t = &RecipeFragment_OidcSettings{}
	}
	return t.DomainKey
}
func (t *RecipeFragment_OidcSettings) GetSubdomain() *bool {
	if t == nil {
		t = &RecipeFragment_OidcSettings{}
	}
	return t.Subdomain
}

type RecipeFragment_RecipeSections_RecipeSectionFragment_Repository_RepositoryFragment_Publisher struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *RecipeFragment_RecipeSections_RecipeSectionFragment_Repository_RepositoryFragment_Publisher) GetName() string {
	if t == nil {
		t = &RecipeFragment_RecipeSections_RecipeSectionFragment_Repository_RepositoryFragment_Publisher{}
	}
	return t.Name
}

type RecipeFragment_RecipeSections_RecipeSectionFragment_Repository_RepositoryFragment_Recipes struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *RecipeFragment_RecipeSections_RecipeSectionFragment_Repository_RepositoryFragment_Recipes) GetName() string {
	if t == nil {
		t = &RecipeFragment_RecipeSections_RecipeSectionFragment_Repository_RepositoryFragment_Recipes{}
	}
	return t.Name
}

type RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies struct {
	Type     *DependencyType "json:\"type,omitempty\" graphql:\"type\""
	Name     *string         "json:\"name,omitempty\" graphql:\"name\""
	Repo     *string         "json:\"repo,omitempty\" graphql:\"repo\""
	Optional *bool           "json:\"optional,omitempty\" graphql:\"optional\""
	Version  *string         "json:\"version,omitempty\" graphql:\"version\""
}

func (t *RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetType() *DependencyType {
	if t == nil {
		t = &RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Type
}
func (t *RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetName() *string {
	if t == nil {
		t = &RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Name
}
func (t *RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetRepo() *string {
	if t == nil {
		t = &RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Repo
}
func (t *RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetOptional() *bool {
	if t == nil {
		t = &RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Optional
}
func (t *RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetVersion() *string {
	if t == nil {
		t = &RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Version
}

type RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions struct {
	Instructions *string "json:\"instructions,omitempty\" graphql:\"instructions\""
	Script       *string "json:\"script,omitempty\" graphql:\"script\""
}

func (t *RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions) GetInstructions() *string {
	if t == nil {
		t = &RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions{}
	}
	return t.Instructions
}
func (t *RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions) GetScript() *string {
	if t == nil {
		t = &RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions{}
	}
	return t.Script
}

type RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings struct {
	Terraform map[string]interface{} "json:\"terraform,omitempty\" graphql:\"terraform\""
	Helm      map[string]interface{} "json:\"helm,omitempty\" graphql:\"helm\""
}

func (t *RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings) GetTerraform() map[string]interface{} {
	if t == nil {
		t = &RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings{}
	}
	return t.Terraform
}
func (t *RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings) GetHelm() map[string]interface{} {
	if t == nil {
		t = &RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings{}
	}
	return t.Helm
}

type RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition struct {
	Field     string    "json:\"field\" graphql:\"field\""
	Operation Operation "json:\"operation\" graphql:\"operation\""
	Value     *string   "json:\"value,omitempty\" graphql:\"value\""
}

func (t *RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition) GetField() string {
	if t == nil {
		t = &RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return t.Field
}
func (t *RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition) GetOperation() *Operation {
	if t == nil {
		t = &RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return &t.Operation
}
func (t *RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition) GetValue() *string {
	if t == nil {
		t = &RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return t.Value
}

type RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation struct {
	Type    ValidationType "json:\"type\" graphql:\"type\""
	Regex   *string        "json:\"regex,omitempty\" graphql:\"regex\""
	Message string         "json:\"message\" graphql:\"message\""
}

func (t *RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation) GetType() *ValidationType {
	if t == nil {
		t = &RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return &t.Type
}
func (t *RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation) GetRegex() *string {
	if t == nil {
		t = &RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return t.Regex
}
func (t *RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation) GetMessage() string {
	if t == nil {
		t = &RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return t.Message
}

type RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition struct {
	Field     string    "json:\"field\" graphql:\"field\""
	Operation Operation "json:\"operation\" graphql:\"operation\""
	Value     *string   "json:\"value,omitempty\" graphql:\"value\""
}

func (t *RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition) GetField() string {
	if t == nil {
		t = &RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return t.Field
}
func (t *RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition) GetOperation() *Operation {
	if t == nil {
		t = &RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return &t.Operation
}
func (t *RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition) GetValue() *string {
	if t == nil {
		t = &RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return t.Value
}

type RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation struct {
	Type    ValidationType "json:\"type\" graphql:\"type\""
	Regex   *string        "json:\"regex,omitempty\" graphql:\"regex\""
	Message string         "json:\"message\" graphql:\"message\""
}

func (t *RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation) GetType() *ValidationType {
	if t == nil {
		t = &RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return &t.Type
}
func (t *RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation) GetRegex() *string {
	if t == nil {
		t = &RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return t.Regex
}
func (t *RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation) GetMessage() string {
	if t == nil {
		t = &RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return t.Message
}

type RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies struct {
	Type     *DependencyType "json:\"type,omitempty\" graphql:\"type\""
	Name     *string         "json:\"name,omitempty\" graphql:\"name\""
	Repo     *string         "json:\"repo,omitempty\" graphql:\"repo\""
	Optional *bool           "json:\"optional,omitempty\" graphql:\"optional\""
	Version  *string         "json:\"version,omitempty\" graphql:\"version\""
}

func (t *RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetType() *DependencyType {
	if t == nil {
		t = &RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Type
}
func (t *RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetName() *string {
	if t == nil {
		t = &RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Name
}
func (t *RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetRepo() *string {
	if t == nil {
		t = &RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Repo
}
func (t *RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetOptional() *bool {
	if t == nil {
		t = &RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Optional
}
func (t *RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetVersion() *string {
	if t == nil {
		t = &RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Version
}

type RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions struct {
	Instructions *string "json:\"instructions,omitempty\" graphql:\"instructions\""
	Script       *string "json:\"script,omitempty\" graphql:\"script\""
}

func (t *RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions) GetInstructions() *string {
	if t == nil {
		t = &RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions{}
	}
	return t.Instructions
}
func (t *RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions) GetScript() *string {
	if t == nil {
		t = &RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions{}
	}
	return t.Script
}

type RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings struct {
	Terraform map[string]interface{} "json:\"terraform,omitempty\" graphql:\"terraform\""
	Helm      map[string]interface{} "json:\"helm,omitempty\" graphql:\"helm\""
}

func (t *RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings) GetTerraform() map[string]interface{} {
	if t == nil {
		t = &RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings{}
	}
	return t.Terraform
}
func (t *RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings) GetHelm() map[string]interface{} {
	if t == nil {
		t = &RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings{}
	}
	return t.Helm
}

type RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition struct {
	Field     string    "json:\"field\" graphql:\"field\""
	Operation Operation "json:\"operation\" graphql:\"operation\""
	Value     *string   "json:\"value,omitempty\" graphql:\"value\""
}

func (t *RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition) GetField() string {
	if t == nil {
		t = &RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return t.Field
}
func (t *RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition) GetOperation() *Operation {
	if t == nil {
		t = &RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return &t.Operation
}
func (t *RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition) GetValue() *string {
	if t == nil {
		t = &RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return t.Value
}

type RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation struct {
	Type    ValidationType "json:\"type\" graphql:\"type\""
	Regex   *string        "json:\"regex,omitempty\" graphql:\"regex\""
	Message string         "json:\"message\" graphql:\"message\""
}

func (t *RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation) GetType() *ValidationType {
	if t == nil {
		t = &RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return &t.Type
}
func (t *RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation) GetRegex() *string {
	if t == nil {
		t = &RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return t.Regex
}
func (t *RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation) GetMessage() string {
	if t == nil {
		t = &RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return t.Message
}

type RecipeConfigurationFragment_Condition struct {
	Field     string    "json:\"field\" graphql:\"field\""
	Operation Operation "json:\"operation\" graphql:\"operation\""
	Value     *string   "json:\"value,omitempty\" graphql:\"value\""
}

func (t *RecipeConfigurationFragment_Condition) GetField() string {
	if t == nil {
		t = &RecipeConfigurationFragment_Condition{}
	}
	return t.Field
}
func (t *RecipeConfigurationFragment_Condition) GetOperation() *Operation {
	if t == nil {
		t = &RecipeConfigurationFragment_Condition{}
	}
	return &t.Operation
}
func (t *RecipeConfigurationFragment_Condition) GetValue() *string {
	if t == nil {
		t = &RecipeConfigurationFragment_Condition{}
	}
	return t.Value
}

type RecipeConfigurationFragment_Validation struct {
	Type    ValidationType "json:\"type\" graphql:\"type\""
	Regex   *string        "json:\"regex,omitempty\" graphql:\"regex\""
	Message string         "json:\"message\" graphql:\"message\""
}

func (t *RecipeConfigurationFragment_Validation) GetType() *ValidationType {
	if t == nil {
		t = &RecipeConfigurationFragment_Validation{}
	}
	return &t.Type
}
func (t *RecipeConfigurationFragment_Validation) GetRegex() *string {
	if t == nil {
		t = &RecipeConfigurationFragment_Validation{}
	}
	return t.Regex
}
func (t *RecipeConfigurationFragment_Validation) GetMessage() string {
	if t == nil {
		t = &RecipeConfigurationFragment_Validation{}
	}
	return t.Message
}

type RepositoryFragment_Publisher struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *RepositoryFragment_Publisher) GetName() string {
	if t == nil {
		t = &RepositoryFragment_Publisher{}
	}
	return t.Name
}

type RepositoryFragment_Recipes struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *RepositoryFragment_Recipes) GetName() string {
	if t == nil {
		t = &RepositoryFragment_Recipes{}
	}
	return t.Name
}

type TerraformFragment_Dependencies_DependenciesFragment_Dependencies struct {
	Type     *DependencyType "json:\"type,omitempty\" graphql:\"type\""
	Name     *string         "json:\"name,omitempty\" graphql:\"name\""
	Repo     *string         "json:\"repo,omitempty\" graphql:\"repo\""
	Optional *bool           "json:\"optional,omitempty\" graphql:\"optional\""
	Version  *string         "json:\"version,omitempty\" graphql:\"version\""
}

func (t *TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetType() *DependencyType {
	if t == nil {
		t = &TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Type
}
func (t *TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetName() *string {
	if t == nil {
		t = &TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Name
}
func (t *TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetRepo() *string {
	if t == nil {
		t = &TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Repo
}
func (t *TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetOptional() *bool {
	if t == nil {
		t = &TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Optional
}
func (t *TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetVersion() *string {
	if t == nil {
		t = &TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Version
}

type TerraformFragment_Dependencies_DependenciesFragment_Instructions struct {
	Instructions *string "json:\"instructions,omitempty\" graphql:\"instructions\""
	Script       *string "json:\"script,omitempty\" graphql:\"script\""
}

func (t *TerraformFragment_Dependencies_DependenciesFragment_Instructions) GetInstructions() *string {
	if t == nil {
		t = &TerraformFragment_Dependencies_DependenciesFragment_Instructions{}
	}
	return t.Instructions
}
func (t *TerraformFragment_Dependencies_DependenciesFragment_Instructions) GetScript() *string {
	if t == nil {
		t = &TerraformFragment_Dependencies_DependenciesFragment_Instructions{}
	}
	return t.Script
}

type TerraformFragment_Dependencies_DependenciesFragment_Wirings struct {
	Terraform map[string]interface{} "json:\"terraform,omitempty\" graphql:\"terraform\""
	Helm      map[string]interface{} "json:\"helm,omitempty\" graphql:\"helm\""
}

func (t *TerraformFragment_Dependencies_DependenciesFragment_Wirings) GetTerraform() map[string]interface{} {
	if t == nil {
		t = &TerraformFragment_Dependencies_DependenciesFragment_Wirings{}
	}
	return t.Terraform
}
func (t *TerraformFragment_Dependencies_DependenciesFragment_Wirings) GetHelm() map[string]interface{} {
	if t == nil {
		t = &TerraformFragment_Dependencies_DependenciesFragment_Wirings{}
	}
	return t.Helm
}

type TerraformInstallationFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies struct {
	Type     *DependencyType "json:\"type,omitempty\" graphql:\"type\""
	Name     *string         "json:\"name,omitempty\" graphql:\"name\""
	Repo     *string         "json:\"repo,omitempty\" graphql:\"repo\""
	Optional *bool           "json:\"optional,omitempty\" graphql:\"optional\""
	Version  *string         "json:\"version,omitempty\" graphql:\"version\""
}

func (t *TerraformInstallationFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetType() *DependencyType {
	if t == nil {
		t = &TerraformInstallationFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Type
}
func (t *TerraformInstallationFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetName() *string {
	if t == nil {
		t = &TerraformInstallationFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Name
}
func (t *TerraformInstallationFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetRepo() *string {
	if t == nil {
		t = &TerraformInstallationFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Repo
}
func (t *TerraformInstallationFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetOptional() *bool {
	if t == nil {
		t = &TerraformInstallationFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Optional
}
func (t *TerraformInstallationFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetVersion() *string {
	if t == nil {
		t = &TerraformInstallationFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Version
}

type TerraformInstallationFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions struct {
	Instructions *string "json:\"instructions,omitempty\" graphql:\"instructions\""
	Script       *string "json:\"script,omitempty\" graphql:\"script\""
}

func (t *TerraformInstallationFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions) GetInstructions() *string {
	if t == nil {
		t = &TerraformInstallationFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions{}
	}
	return t.Instructions
}
func (t *TerraformInstallationFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions) GetScript() *string {
	if t == nil {
		t = &TerraformInstallationFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions{}
	}
	return t.Script
}

type TerraformInstallationFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings struct {
	Terraform map[string]interface{} "json:\"terraform,omitempty\" graphql:\"terraform\""
	Helm      map[string]interface{} "json:\"helm,omitempty\" graphql:\"helm\""
}

func (t *TerraformInstallationFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings) GetTerraform() map[string]interface{} {
	if t == nil {
		t = &TerraformInstallationFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings{}
	}
	return t.Terraform
}
func (t *TerraformInstallationFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings) GetHelm() map[string]interface{} {
	if t == nil {
		t = &TerraformInstallationFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings{}
	}
	return t.Helm
}

type TerraformInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies struct {
	Type     *DependencyType "json:\"type,omitempty\" graphql:\"type\""
	Name     *string         "json:\"name,omitempty\" graphql:\"name\""
	Repo     *string         "json:\"repo,omitempty\" graphql:\"repo\""
	Optional *bool           "json:\"optional,omitempty\" graphql:\"optional\""
	Version  *string         "json:\"version,omitempty\" graphql:\"version\""
}

func (t *TerraformInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies) GetType() *DependencyType {
	if t == nil {
		t = &TerraformInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Type
}
func (t *TerraformInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies) GetName() *string {
	if t == nil {
		t = &TerraformInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Name
}
func (t *TerraformInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies) GetRepo() *string {
	if t == nil {
		t = &TerraformInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Repo
}
func (t *TerraformInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies) GetOptional() *bool {
	if t == nil {
		t = &TerraformInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Optional
}
func (t *TerraformInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies) GetVersion() *string {
	if t == nil {
		t = &TerraformInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Version
}

type TerraformInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Instructions struct {
	Instructions *string "json:\"instructions,omitempty\" graphql:\"instructions\""
	Script       *string "json:\"script,omitempty\" graphql:\"script\""
}

func (t *TerraformInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Instructions) GetInstructions() *string {
	if t == nil {
		t = &TerraformInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Instructions{}
	}
	return t.Instructions
}
func (t *TerraformInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Instructions) GetScript() *string {
	if t == nil {
		t = &TerraformInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Instructions{}
	}
	return t.Script
}

type TerraformInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Wirings struct {
	Terraform map[string]interface{} "json:\"terraform,omitempty\" graphql:\"terraform\""
	Helm      map[string]interface{} "json:\"helm,omitempty\" graphql:\"helm\""
}

func (t *TerraformInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Wirings) GetTerraform() map[string]interface{} {
	if t == nil {
		t = &TerraformInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Wirings{}
	}
	return t.Terraform
}
func (t *TerraformInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Wirings) GetHelm() map[string]interface{} {
	if t == nil {
		t = &TerraformInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Wirings{}
	}
	return t.Helm
}

type VersionFragment_Dependencies_DependenciesFragment_Dependencies struct {
	Type     *DependencyType "json:\"type,omitempty\" graphql:\"type\""
	Name     *string         "json:\"name,omitempty\" graphql:\"name\""
	Repo     *string         "json:\"repo,omitempty\" graphql:\"repo\""
	Optional *bool           "json:\"optional,omitempty\" graphql:\"optional\""
	Version  *string         "json:\"version,omitempty\" graphql:\"version\""
}

func (t *VersionFragment_Dependencies_DependenciesFragment_Dependencies) GetType() *DependencyType {
	if t == nil {
		t = &VersionFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Type
}
func (t *VersionFragment_Dependencies_DependenciesFragment_Dependencies) GetName() *string {
	if t == nil {
		t = &VersionFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Name
}
func (t *VersionFragment_Dependencies_DependenciesFragment_Dependencies) GetRepo() *string {
	if t == nil {
		t = &VersionFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Repo
}
func (t *VersionFragment_Dependencies_DependenciesFragment_Dependencies) GetOptional() *bool {
	if t == nil {
		t = &VersionFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Optional
}
func (t *VersionFragment_Dependencies_DependenciesFragment_Dependencies) GetVersion() *string {
	if t == nil {
		t = &VersionFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Version
}

type VersionFragment_Dependencies_DependenciesFragment_Instructions struct {
	Instructions *string "json:\"instructions,omitempty\" graphql:\"instructions\""
	Script       *string "json:\"script,omitempty\" graphql:\"script\""
}

func (t *VersionFragment_Dependencies_DependenciesFragment_Instructions) GetInstructions() *string {
	if t == nil {
		t = &VersionFragment_Dependencies_DependenciesFragment_Instructions{}
	}
	return t.Instructions
}
func (t *VersionFragment_Dependencies_DependenciesFragment_Instructions) GetScript() *string {
	if t == nil {
		t = &VersionFragment_Dependencies_DependenciesFragment_Instructions{}
	}
	return t.Script
}

type VersionFragment_Dependencies_DependenciesFragment_Wirings struct {
	Terraform map[string]interface{} "json:\"terraform,omitempty\" graphql:\"terraform\""
	Helm      map[string]interface{} "json:\"helm,omitempty\" graphql:\"helm\""
}

func (t *VersionFragment_Dependencies_DependenciesFragment_Wirings) GetTerraform() map[string]interface{} {
	if t == nil {
		t = &VersionFragment_Dependencies_DependenciesFragment_Wirings{}
	}
	return t.Terraform
}
func (t *VersionFragment_Dependencies_DependenciesFragment_Wirings) GetHelm() map[string]interface{} {
	if t == nil {
		t = &VersionFragment_Dependencies_DependenciesFragment_Wirings{}
	}
	return t.Helm
}

type ChartInstallationFragment_Chart_Dependencies_DependenciesFragment_Dependencies struct {
	Type     *DependencyType "json:\"type,omitempty\" graphql:\"type\""
	Name     *string         "json:\"name,omitempty\" graphql:\"name\""
	Repo     *string         "json:\"repo,omitempty\" graphql:\"repo\""
	Optional *bool           "json:\"optional,omitempty\" graphql:\"optional\""
	Version  *string         "json:\"version,omitempty\" graphql:\"version\""
}

func (t *ChartInstallationFragment_Chart_Dependencies_DependenciesFragment_Dependencies) GetType() *DependencyType {
	if t == nil {
		t = &ChartInstallationFragment_Chart_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Type
}
func (t *ChartInstallationFragment_Chart_Dependencies_DependenciesFragment_Dependencies) GetName() *string {
	if t == nil {
		t = &ChartInstallationFragment_Chart_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Name
}
func (t *ChartInstallationFragment_Chart_Dependencies_DependenciesFragment_Dependencies) GetRepo() *string {
	if t == nil {
		t = &ChartInstallationFragment_Chart_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Repo
}
func (t *ChartInstallationFragment_Chart_Dependencies_DependenciesFragment_Dependencies) GetOptional() *bool {
	if t == nil {
		t = &ChartInstallationFragment_Chart_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Optional
}
func (t *ChartInstallationFragment_Chart_Dependencies_DependenciesFragment_Dependencies) GetVersion() *string {
	if t == nil {
		t = &ChartInstallationFragment_Chart_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Version
}

type ChartInstallationFragment_Chart_Dependencies_DependenciesFragment_Instructions struct {
	Instructions *string "json:\"instructions,omitempty\" graphql:\"instructions\""
	Script       *string "json:\"script,omitempty\" graphql:\"script\""
}

func (t *ChartInstallationFragment_Chart_Dependencies_DependenciesFragment_Instructions) GetInstructions() *string {
	if t == nil {
		t = &ChartInstallationFragment_Chart_Dependencies_DependenciesFragment_Instructions{}
	}
	return t.Instructions
}
func (t *ChartInstallationFragment_Chart_Dependencies_DependenciesFragment_Instructions) GetScript() *string {
	if t == nil {
		t = &ChartInstallationFragment_Chart_Dependencies_DependenciesFragment_Instructions{}
	}
	return t.Script
}

type ChartInstallationFragment_Chart_Dependencies_DependenciesFragment_Wirings struct {
	Terraform map[string]interface{} "json:\"terraform,omitempty\" graphql:\"terraform\""
	Helm      map[string]interface{} "json:\"helm,omitempty\" graphql:\"helm\""
}

func (t *ChartInstallationFragment_Chart_Dependencies_DependenciesFragment_Wirings) GetTerraform() map[string]interface{} {
	if t == nil {
		t = &ChartInstallationFragment_Chart_Dependencies_DependenciesFragment_Wirings{}
	}
	return t.Terraform
}
func (t *ChartInstallationFragment_Chart_Dependencies_DependenciesFragment_Wirings) GetHelm() map[string]interface{} {
	if t == nil {
		t = &ChartInstallationFragment_Chart_Dependencies_DependenciesFragment_Wirings{}
	}
	return t.Helm
}

type ChartInstallationFragment_Chart struct {
	ID            *string               "json:\"id,omitempty\" graphql:\"id\""
	Name          string                "json:\"name\" graphql:\"name\""
	Description   *string               "json:\"description,omitempty\" graphql:\"description\""
	LatestVersion *string               "json:\"latestVersion,omitempty\" graphql:\"latestVersion\""
	Dependencies  *DependenciesFragment "json:\"dependencies,omitempty\" graphql:\"dependencies\""
}

func (t *ChartInstallationFragment_Chart) GetID() *string {
	if t == nil {
		t = &ChartInstallationFragment_Chart{}
	}
	return t.ID
}
func (t *ChartInstallationFragment_Chart) GetName() string {
	if t == nil {
		t = &ChartInstallationFragment_Chart{}
	}
	return t.Name
}
func (t *ChartInstallationFragment_Chart) GetDescription() *string {
	if t == nil {
		t = &ChartInstallationFragment_Chart{}
	}
	return t.Description
}
func (t *ChartInstallationFragment_Chart) GetLatestVersion() *string {
	if t == nil {
		t = &ChartInstallationFragment_Chart{}
	}
	return t.LatestVersion
}
func (t *ChartInstallationFragment_Chart) GetDependencies() *DependenciesFragment {
	if t == nil {
		t = &ChartInstallationFragment_Chart{}
	}
	return t.Dependencies
}

type ChartInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies struct {
	Type     *DependencyType "json:\"type,omitempty\" graphql:\"type\""
	Name     *string         "json:\"name,omitempty\" graphql:\"name\""
	Repo     *string         "json:\"repo,omitempty\" graphql:\"repo\""
	Optional *bool           "json:\"optional,omitempty\" graphql:\"optional\""
	Version  *string         "json:\"version,omitempty\" graphql:\"version\""
}

func (t *ChartInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies) GetType() *DependencyType {
	if t == nil {
		t = &ChartInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Type
}
func (t *ChartInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies) GetName() *string {
	if t == nil {
		t = &ChartInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Name
}
func (t *ChartInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies) GetRepo() *string {
	if t == nil {
		t = &ChartInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Repo
}
func (t *ChartInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies) GetOptional() *bool {
	if t == nil {
		t = &ChartInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Optional
}
func (t *ChartInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies) GetVersion() *string {
	if t == nil {
		t = &ChartInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Version
}

type ChartInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Instructions struct {
	Instructions *string "json:\"instructions,omitempty\" graphql:\"instructions\""
	Script       *string "json:\"script,omitempty\" graphql:\"script\""
}

func (t *ChartInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Instructions) GetInstructions() *string {
	if t == nil {
		t = &ChartInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Instructions{}
	}
	return t.Instructions
}
func (t *ChartInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Instructions) GetScript() *string {
	if t == nil {
		t = &ChartInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Instructions{}
	}
	return t.Script
}

type ChartInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Wirings struct {
	Terraform map[string]interface{} "json:\"terraform,omitempty\" graphql:\"terraform\""
	Helm      map[string]interface{} "json:\"helm,omitempty\" graphql:\"helm\""
}

func (t *ChartInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Wirings) GetTerraform() map[string]interface{} {
	if t == nil {
		t = &ChartInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Wirings{}
	}
	return t.Terraform
}
func (t *ChartInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Wirings) GetHelm() map[string]interface{} {
	if t == nil {
		t = &ChartInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Wirings{}
	}
	return t.Helm
}

type InstallationFragment_Repository_RepositoryFragment_Publisher struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *InstallationFragment_Repository_RepositoryFragment_Publisher) GetName() string {
	if t == nil {
		t = &InstallationFragment_Repository_RepositoryFragment_Publisher{}
	}
	return t.Name
}

type InstallationFragment_Repository_RepositoryFragment_Recipes struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *InstallationFragment_Repository_RepositoryFragment_Recipes) GetName() string {
	if t == nil {
		t = &InstallationFragment_Repository_RepositoryFragment_Recipes{}
	}
	return t.Name
}

type InstallationFragment_OidcProvider_OIDCProvider_Bindings_User struct {
	ID    string "json:\"id\" graphql:\"id\""
	Email string "json:\"email\" graphql:\"email\""
}

func (t *InstallationFragment_OidcProvider_OIDCProvider_Bindings_User) GetID() string {
	if t == nil {
		t = &InstallationFragment_OidcProvider_OIDCProvider_Bindings_User{}
	}
	return t.ID
}
func (t *InstallationFragment_OidcProvider_OIDCProvider_Bindings_User) GetEmail() string {
	if t == nil {
		t = &InstallationFragment_OidcProvider_OIDCProvider_Bindings_User{}
	}
	return t.Email
}

type InstallationFragment_OidcProvider_OIDCProvider_Bindings_Group struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *InstallationFragment_OidcProvider_OIDCProvider_Bindings_Group) GetID() string {
	if t == nil {
		t = &InstallationFragment_OidcProvider_OIDCProvider_Bindings_Group{}
	}
	return t.ID
}
func (t *InstallationFragment_OidcProvider_OIDCProvider_Bindings_Group) GetName() string {
	if t == nil {
		t = &InstallationFragment_OidcProvider_OIDCProvider_Bindings_Group{}
	}
	return t.Name
}

type InstallationFragment_OidcProvider_OIDCProvider_Bindings struct {
	User  *InstallationFragment_OidcProvider_OIDCProvider_Bindings_User  "json:\"user,omitempty\" graphql:\"user\""
	Group *InstallationFragment_OidcProvider_OIDCProvider_Bindings_Group "json:\"group,omitempty\" graphql:\"group\""
}

func (t *InstallationFragment_OidcProvider_OIDCProvider_Bindings) GetUser() *InstallationFragment_OidcProvider_OIDCProvider_Bindings_User {
	if t == nil {
		t = &InstallationFragment_OidcProvider_OIDCProvider_Bindings{}
	}
	return t.User
}
func (t *InstallationFragment_OidcProvider_OIDCProvider_Bindings) GetGroup() *InstallationFragment_OidcProvider_OIDCProvider_Bindings_Group {
	if t == nil {
		t = &InstallationFragment_OidcProvider_OIDCProvider_Bindings{}
	}
	return t.Group
}

type InstallationFragment_OidcProvider_OIDCProvider_Configuration struct {
	Issuer                *string "json:\"issuer,omitempty\" graphql:\"issuer\""
	AuthorizationEndpoint *string "json:\"authorizationEndpoint,omitempty\" graphql:\"authorizationEndpoint\""
	TokenEndpoint         *string "json:\"tokenEndpoint,omitempty\" graphql:\"tokenEndpoint\""
	JwksURI               *string "json:\"jwksUri,omitempty\" graphql:\"jwksUri\""
	UserinfoEndpoint      *string "json:\"userinfoEndpoint,omitempty\" graphql:\"userinfoEndpoint\""
}

func (t *InstallationFragment_OidcProvider_OIDCProvider_Configuration) GetIssuer() *string {
	if t == nil {
		t = &InstallationFragment_OidcProvider_OIDCProvider_Configuration{}
	}
	return t.Issuer
}
func (t *InstallationFragment_OidcProvider_OIDCProvider_Configuration) GetAuthorizationEndpoint() *string {
	if t == nil {
		t = &InstallationFragment_OidcProvider_OIDCProvider_Configuration{}
	}
	return t.AuthorizationEndpoint
}
func (t *InstallationFragment_OidcProvider_OIDCProvider_Configuration) GetTokenEndpoint() *string {
	if t == nil {
		t = &InstallationFragment_OidcProvider_OIDCProvider_Configuration{}
	}
	return t.TokenEndpoint
}
func (t *InstallationFragment_OidcProvider_OIDCProvider_Configuration) GetJwksURI() *string {
	if t == nil {
		t = &InstallationFragment_OidcProvider_OIDCProvider_Configuration{}
	}
	return t.JwksURI
}
func (t *InstallationFragment_OidcProvider_OIDCProvider_Configuration) GetUserinfoEndpoint() *string {
	if t == nil {
		t = &InstallationFragment_OidcProvider_OIDCProvider_Configuration{}
	}
	return t.UserinfoEndpoint
}

type OIDCProvider_Bindings_User struct {
	ID    string "json:\"id\" graphql:\"id\""
	Email string "json:\"email\" graphql:\"email\""
}

func (t *OIDCProvider_Bindings_User) GetID() string {
	if t == nil {
		t = &OIDCProvider_Bindings_User{}
	}
	return t.ID
}
func (t *OIDCProvider_Bindings_User) GetEmail() string {
	if t == nil {
		t = &OIDCProvider_Bindings_User{}
	}
	return t.Email
}

type OIDCProvider_Bindings_Group struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *OIDCProvider_Bindings_Group) GetID() string {
	if t == nil {
		t = &OIDCProvider_Bindings_Group{}
	}
	return t.ID
}
func (t *OIDCProvider_Bindings_Group) GetName() string {
	if t == nil {
		t = &OIDCProvider_Bindings_Group{}
	}
	return t.Name
}

type OIDCProvider_Bindings struct {
	User  *OIDCProvider_Bindings_User  "json:\"user,omitempty\" graphql:\"user\""
	Group *OIDCProvider_Bindings_Group "json:\"group,omitempty\" graphql:\"group\""
}

func (t *OIDCProvider_Bindings) GetUser() *OIDCProvider_Bindings_User {
	if t == nil {
		t = &OIDCProvider_Bindings{}
	}
	return t.User
}
func (t *OIDCProvider_Bindings) GetGroup() *OIDCProvider_Bindings_Group {
	if t == nil {
		t = &OIDCProvider_Bindings{}
	}
	return t.Group
}

type OIDCProvider_Configuration struct {
	Issuer                *string "json:\"issuer,omitempty\" graphql:\"issuer\""
	AuthorizationEndpoint *string "json:\"authorizationEndpoint,omitempty\" graphql:\"authorizationEndpoint\""
	TokenEndpoint         *string "json:\"tokenEndpoint,omitempty\" graphql:\"tokenEndpoint\""
	JwksURI               *string "json:\"jwksUri,omitempty\" graphql:\"jwksUri\""
	UserinfoEndpoint      *string "json:\"userinfoEndpoint,omitempty\" graphql:\"userinfoEndpoint\""
}

func (t *OIDCProvider_Configuration) GetIssuer() *string {
	if t == nil {
		t = &OIDCProvider_Configuration{}
	}
	return t.Issuer
}
func (t *OIDCProvider_Configuration) GetAuthorizationEndpoint() *string {
	if t == nil {
		t = &OIDCProvider_Configuration{}
	}
	return t.AuthorizationEndpoint
}
func (t *OIDCProvider_Configuration) GetTokenEndpoint() *string {
	if t == nil {
		t = &OIDCProvider_Configuration{}
	}
	return t.TokenEndpoint
}
func (t *OIDCProvider_Configuration) GetJwksURI() *string {
	if t == nil {
		t = &OIDCProvider_Configuration{}
	}
	return t.JwksURI
}
func (t *OIDCProvider_Configuration) GetUserinfoEndpoint() *string {
	if t == nil {
		t = &OIDCProvider_Configuration{}
	}
	return t.UserinfoEndpoint
}

type TestFragment_Steps struct {
	ID          string     "json:\"id\" graphql:\"id\""
	Name        string     "json:\"name\" graphql:\"name\""
	Description string     "json:\"description\" graphql:\"description\""
	Status      TestStatus "json:\"status\" graphql:\"status\""
}

func (t *TestFragment_Steps) GetID() string {
	if t == nil {
		t = &TestFragment_Steps{}
	}
	return t.ID
}
func (t *TestFragment_Steps) GetName() string {
	if t == nil {
		t = &TestFragment_Steps{}
	}
	return t.Name
}
func (t *TestFragment_Steps) GetDescription() string {
	if t == nil {
		t = &TestFragment_Steps{}
	}
	return t.Description
}
func (t *TestFragment_Steps) GetStatus() *TestStatus {
	if t == nil {
		t = &TestFragment_Steps{}
	}
	return &t.Status
}

type StackFragment_Bundles_RecipeFragment_Tests_Args struct {
	Name string "json:\"name\" graphql:\"name\""
	Repo string "json:\"repo\" graphql:\"repo\""
	Key  string "json:\"key\" graphql:\"key\""
}

func (t *StackFragment_Bundles_RecipeFragment_Tests_Args) GetName() string {
	if t == nil {
		t = &StackFragment_Bundles_RecipeFragment_Tests_Args{}
	}
	return t.Name
}
func (t *StackFragment_Bundles_RecipeFragment_Tests_Args) GetRepo() string {
	if t == nil {
		t = &StackFragment_Bundles_RecipeFragment_Tests_Args{}
	}
	return t.Repo
}
func (t *StackFragment_Bundles_RecipeFragment_Tests_Args) GetKey() string {
	if t == nil {
		t = &StackFragment_Bundles_RecipeFragment_Tests_Args{}
	}
	return t.Key
}

type StackFragment_Bundles_RecipeFragment_Tests struct {
	Type    TestType                                           "json:\"type\" graphql:\"type\""
	Name    string                                             "json:\"name\" graphql:\"name\""
	Message *string                                            "json:\"message,omitempty\" graphql:\"message\""
	Args    []*StackFragment_Bundles_RecipeFragment_Tests_Args "json:\"args,omitempty\" graphql:\"args\""
}

func (t *StackFragment_Bundles_RecipeFragment_Tests) GetType() *TestType {
	if t == nil {
		t = &StackFragment_Bundles_RecipeFragment_Tests{}
	}
	return &t.Type
}
func (t *StackFragment_Bundles_RecipeFragment_Tests) GetName() string {
	if t == nil {
		t = &StackFragment_Bundles_RecipeFragment_Tests{}
	}
	return t.Name
}
func (t *StackFragment_Bundles_RecipeFragment_Tests) GetMessage() *string {
	if t == nil {
		t = &StackFragment_Bundles_RecipeFragment_Tests{}
	}
	return t.Message
}
func (t *StackFragment_Bundles_RecipeFragment_Tests) GetArgs() []*StackFragment_Bundles_RecipeFragment_Tests_Args {
	if t == nil {
		t = &StackFragment_Bundles_RecipeFragment_Tests{}
	}
	return t.Args
}

type StackFragment_Bundles_RecipeFragment_Repository struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *StackFragment_Bundles_RecipeFragment_Repository) GetID() string {
	if t == nil {
		t = &StackFragment_Bundles_RecipeFragment_Repository{}
	}
	return t.ID
}
func (t *StackFragment_Bundles_RecipeFragment_Repository) GetName() string {
	if t == nil {
		t = &StackFragment_Bundles_RecipeFragment_Repository{}
	}
	return t.Name
}

type StackFragment_Bundles_RecipeFragment_OidcSettings struct {
	URIFormat  *string        "json:\"uriFormat,omitempty\" graphql:\"uriFormat\""
	URIFormats []*string      "json:\"uriFormats,omitempty\" graphql:\"uriFormats\""
	AuthMethod OidcAuthMethod "json:\"authMethod\" graphql:\"authMethod\""
	DomainKey  *string        "json:\"domainKey,omitempty\" graphql:\"domainKey\""
	Subdomain  *bool          "json:\"subdomain,omitempty\" graphql:\"subdomain\""
}

func (t *StackFragment_Bundles_RecipeFragment_OidcSettings) GetURIFormat() *string {
	if t == nil {
		t = &StackFragment_Bundles_RecipeFragment_OidcSettings{}
	}
	return t.URIFormat
}
func (t *StackFragment_Bundles_RecipeFragment_OidcSettings) GetURIFormats() []*string {
	if t == nil {
		t = &StackFragment_Bundles_RecipeFragment_OidcSettings{}
	}
	return t.URIFormats
}
func (t *StackFragment_Bundles_RecipeFragment_OidcSettings) GetAuthMethod() *OidcAuthMethod {
	if t == nil {
		t = &StackFragment_Bundles_RecipeFragment_OidcSettings{}
	}
	return &t.AuthMethod
}
func (t *StackFragment_Bundles_RecipeFragment_OidcSettings) GetDomainKey() *string {
	if t == nil {
		t = &StackFragment_Bundles_RecipeFragment_OidcSettings{}
	}
	return t.DomainKey
}
func (t *StackFragment_Bundles_RecipeFragment_OidcSettings) GetSubdomain() *bool {
	if t == nil {
		t = &StackFragment_Bundles_RecipeFragment_OidcSettings{}
	}
	return t.Subdomain
}

type StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_Repository_RepositoryFragment_Publisher struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_Repository_RepositoryFragment_Publisher) GetName() string {
	if t == nil {
		t = &StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_Repository_RepositoryFragment_Publisher{}
	}
	return t.Name
}

type StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_Repository_RepositoryFragment_Recipes struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_Repository_RepositoryFragment_Recipes) GetName() string {
	if t == nil {
		t = &StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_Repository_RepositoryFragment_Recipes{}
	}
	return t.Name
}

type StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies struct {
	Type     *DependencyType "json:\"type,omitempty\" graphql:\"type\""
	Name     *string         "json:\"name,omitempty\" graphql:\"name\""
	Repo     *string         "json:\"repo,omitempty\" graphql:\"repo\""
	Optional *bool           "json:\"optional,omitempty\" graphql:\"optional\""
	Version  *string         "json:\"version,omitempty\" graphql:\"version\""
}

func (t *StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetType() *DependencyType {
	if t == nil {
		t = &StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Type
}
func (t *StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetName() *string {
	if t == nil {
		t = &StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Name
}
func (t *StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetRepo() *string {
	if t == nil {
		t = &StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Repo
}
func (t *StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetOptional() *bool {
	if t == nil {
		t = &StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Optional
}
func (t *StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetVersion() *string {
	if t == nil {
		t = &StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Version
}

type StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions struct {
	Instructions *string "json:\"instructions,omitempty\" graphql:\"instructions\""
	Script       *string "json:\"script,omitempty\" graphql:\"script\""
}

func (t *StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions) GetInstructions() *string {
	if t == nil {
		t = &StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions{}
	}
	return t.Instructions
}
func (t *StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions) GetScript() *string {
	if t == nil {
		t = &StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions{}
	}
	return t.Script
}

type StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings struct {
	Terraform map[string]interface{} "json:\"terraform,omitempty\" graphql:\"terraform\""
	Helm      map[string]interface{} "json:\"helm,omitempty\" graphql:\"helm\""
}

func (t *StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings) GetTerraform() map[string]interface{} {
	if t == nil {
		t = &StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings{}
	}
	return t.Terraform
}
func (t *StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings) GetHelm() map[string]interface{} {
	if t == nil {
		t = &StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings{}
	}
	return t.Helm
}

type StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition struct {
	Field     string    "json:\"field\" graphql:\"field\""
	Operation Operation "json:\"operation\" graphql:\"operation\""
	Value     *string   "json:\"value,omitempty\" graphql:\"value\""
}

func (t *StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition) GetField() string {
	if t == nil {
		t = &StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return t.Field
}
func (t *StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition) GetOperation() *Operation {
	if t == nil {
		t = &StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return &t.Operation
}
func (t *StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition) GetValue() *string {
	if t == nil {
		t = &StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return t.Value
}

type StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation struct {
	Type    ValidationType "json:\"type\" graphql:\"type\""
	Regex   *string        "json:\"regex,omitempty\" graphql:\"regex\""
	Message string         "json:\"message\" graphql:\"message\""
}

func (t *StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation) GetType() *ValidationType {
	if t == nil {
		t = &StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return &t.Type
}
func (t *StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation) GetRegex() *string {
	if t == nil {
		t = &StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return t.Regex
}
func (t *StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation) GetMessage() string {
	if t == nil {
		t = &StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return t.Message
}

type StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition struct {
	Field     string    "json:\"field\" graphql:\"field\""
	Operation Operation "json:\"operation\" graphql:\"operation\""
	Value     *string   "json:\"value,omitempty\" graphql:\"value\""
}

func (t *StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition) GetField() string {
	if t == nil {
		t = &StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return t.Field
}
func (t *StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition) GetOperation() *Operation {
	if t == nil {
		t = &StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return &t.Operation
}
func (t *StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition) GetValue() *string {
	if t == nil {
		t = &StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return t.Value
}

type StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation struct {
	Type    ValidationType "json:\"type\" graphql:\"type\""
	Regex   *string        "json:\"regex,omitempty\" graphql:\"regex\""
	Message string         "json:\"message\" graphql:\"message\""
}

func (t *StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation) GetType() *ValidationType {
	if t == nil {
		t = &StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return &t.Type
}
func (t *StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation) GetRegex() *string {
	if t == nil {
		t = &StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return t.Regex
}
func (t *StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation) GetMessage() string {
	if t == nil {
		t = &StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return t.Message
}

type ListArtifacts_Repository struct {
	Artifacts []*ArtifactFragment "json:\"artifacts,omitempty\" graphql:\"artifacts\""
}

func (t *ListArtifacts_Repository) GetArtifacts() []*ArtifactFragment {
	if t == nil {
		t = &ListArtifacts_Repository{}
	}
	return t.Artifacts
}

type GetCharts_Charts_Edges struct {
	Node *ChartFragment "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetCharts_Charts_Edges) GetNode() *ChartFragment {
	if t == nil {
		t = &GetCharts_Charts_Edges{}
	}
	return t.Node
}

type GetCharts_Charts struct {
	Edges []*GetCharts_Charts_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetCharts_Charts) GetEdges() []*GetCharts_Charts_Edges {
	if t == nil {
		t = &GetCharts_Charts{}
	}
	return t.Edges
}

type GetVersions_Versions_Edges_Node_VersionFragment_Dependencies_DependenciesFragment_Dependencies struct {
	Type     *DependencyType "json:\"type,omitempty\" graphql:\"type\""
	Name     *string         "json:\"name,omitempty\" graphql:\"name\""
	Repo     *string         "json:\"repo,omitempty\" graphql:\"repo\""
	Optional *bool           "json:\"optional,omitempty\" graphql:\"optional\""
	Version  *string         "json:\"version,omitempty\" graphql:\"version\""
}

func (t *GetVersions_Versions_Edges_Node_VersionFragment_Dependencies_DependenciesFragment_Dependencies) GetType() *DependencyType {
	if t == nil {
		t = &GetVersions_Versions_Edges_Node_VersionFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Type
}
func (t *GetVersions_Versions_Edges_Node_VersionFragment_Dependencies_DependenciesFragment_Dependencies) GetName() *string {
	if t == nil {
		t = &GetVersions_Versions_Edges_Node_VersionFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Name
}
func (t *GetVersions_Versions_Edges_Node_VersionFragment_Dependencies_DependenciesFragment_Dependencies) GetRepo() *string {
	if t == nil {
		t = &GetVersions_Versions_Edges_Node_VersionFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Repo
}
func (t *GetVersions_Versions_Edges_Node_VersionFragment_Dependencies_DependenciesFragment_Dependencies) GetOptional() *bool {
	if t == nil {
		t = &GetVersions_Versions_Edges_Node_VersionFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Optional
}
func (t *GetVersions_Versions_Edges_Node_VersionFragment_Dependencies_DependenciesFragment_Dependencies) GetVersion() *string {
	if t == nil {
		t = &GetVersions_Versions_Edges_Node_VersionFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Version
}

type GetVersions_Versions_Edges_Node_VersionFragment_Dependencies_DependenciesFragment_Instructions struct {
	Instructions *string "json:\"instructions,omitempty\" graphql:\"instructions\""
	Script       *string "json:\"script,omitempty\" graphql:\"script\""
}

func (t *GetVersions_Versions_Edges_Node_VersionFragment_Dependencies_DependenciesFragment_Instructions) GetInstructions() *string {
	if t == nil {
		t = &GetVersions_Versions_Edges_Node_VersionFragment_Dependencies_DependenciesFragment_Instructions{}
	}
	return t.Instructions
}
func (t *GetVersions_Versions_Edges_Node_VersionFragment_Dependencies_DependenciesFragment_Instructions) GetScript() *string {
	if t == nil {
		t = &GetVersions_Versions_Edges_Node_VersionFragment_Dependencies_DependenciesFragment_Instructions{}
	}
	return t.Script
}

type GetVersions_Versions_Edges_Node_VersionFragment_Dependencies_DependenciesFragment_Wirings struct {
	Terraform map[string]interface{} "json:\"terraform,omitempty\" graphql:\"terraform\""
	Helm      map[string]interface{} "json:\"helm,omitempty\" graphql:\"helm\""
}

func (t *GetVersions_Versions_Edges_Node_VersionFragment_Dependencies_DependenciesFragment_Wirings) GetTerraform() map[string]interface{} {
	if t == nil {
		t = &GetVersions_Versions_Edges_Node_VersionFragment_Dependencies_DependenciesFragment_Wirings{}
	}
	return t.Terraform
}
func (t *GetVersions_Versions_Edges_Node_VersionFragment_Dependencies_DependenciesFragment_Wirings) GetHelm() map[string]interface{} {
	if t == nil {
		t = &GetVersions_Versions_Edges_Node_VersionFragment_Dependencies_DependenciesFragment_Wirings{}
	}
	return t.Helm
}

type GetVersions_Versions_Edges struct {
	Node *VersionFragment "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetVersions_Versions_Edges) GetNode() *VersionFragment {
	if t == nil {
		t = &GetVersions_Versions_Edges{}
	}
	return t.Node
}

type GetVersions_Versions struct {
	Edges []*GetVersions_Versions_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetVersions_Versions) GetEdges() []*GetVersions_Versions_Edges {
	if t == nil {
		t = &GetVersions_Versions{}
	}
	return t.Edges
}

type GetChartInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Chart_Dependencies_DependenciesFragment_Dependencies struct {
	Type     *DependencyType "json:\"type,omitempty\" graphql:\"type\""
	Name     *string         "json:\"name,omitempty\" graphql:\"name\""
	Repo     *string         "json:\"repo,omitempty\" graphql:\"repo\""
	Optional *bool           "json:\"optional,omitempty\" graphql:\"optional\""
	Version  *string         "json:\"version,omitempty\" graphql:\"version\""
}

func (t *GetChartInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Chart_Dependencies_DependenciesFragment_Dependencies) GetType() *DependencyType {
	if t == nil {
		t = &GetChartInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Chart_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Type
}
func (t *GetChartInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Chart_Dependencies_DependenciesFragment_Dependencies) GetName() *string {
	if t == nil {
		t = &GetChartInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Chart_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Name
}
func (t *GetChartInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Chart_Dependencies_DependenciesFragment_Dependencies) GetRepo() *string {
	if t == nil {
		t = &GetChartInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Chart_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Repo
}
func (t *GetChartInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Chart_Dependencies_DependenciesFragment_Dependencies) GetOptional() *bool {
	if t == nil {
		t = &GetChartInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Chart_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Optional
}
func (t *GetChartInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Chart_Dependencies_DependenciesFragment_Dependencies) GetVersion() *string {
	if t == nil {
		t = &GetChartInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Chart_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Version
}

type GetChartInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Chart_Dependencies_DependenciesFragment_Instructions struct {
	Instructions *string "json:\"instructions,omitempty\" graphql:\"instructions\""
	Script       *string "json:\"script,omitempty\" graphql:\"script\""
}

func (t *GetChartInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Chart_Dependencies_DependenciesFragment_Instructions) GetInstructions() *string {
	if t == nil {
		t = &GetChartInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Chart_Dependencies_DependenciesFragment_Instructions{}
	}
	return t.Instructions
}
func (t *GetChartInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Chart_Dependencies_DependenciesFragment_Instructions) GetScript() *string {
	if t == nil {
		t = &GetChartInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Chart_Dependencies_DependenciesFragment_Instructions{}
	}
	return t.Script
}

type GetChartInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Chart_Dependencies_DependenciesFragment_Wirings struct {
	Terraform map[string]interface{} "json:\"terraform,omitempty\" graphql:\"terraform\""
	Helm      map[string]interface{} "json:\"helm,omitempty\" graphql:\"helm\""
}

func (t *GetChartInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Chart_Dependencies_DependenciesFragment_Wirings) GetTerraform() map[string]interface{} {
	if t == nil {
		t = &GetChartInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Chart_Dependencies_DependenciesFragment_Wirings{}
	}
	return t.Terraform
}
func (t *GetChartInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Chart_Dependencies_DependenciesFragment_Wirings) GetHelm() map[string]interface{} {
	if t == nil {
		t = &GetChartInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Chart_Dependencies_DependenciesFragment_Wirings{}
	}
	return t.Helm
}

type GetChartInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Chart struct {
	ID            *string               "json:\"id,omitempty\" graphql:\"id\""
	Name          string                "json:\"name\" graphql:\"name\""
	Description   *string               "json:\"description,omitempty\" graphql:\"description\""
	LatestVersion *string               "json:\"latestVersion,omitempty\" graphql:\"latestVersion\""
	Dependencies  *DependenciesFragment "json:\"dependencies,omitempty\" graphql:\"dependencies\""
}

func (t *GetChartInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Chart) GetID() *string {
	if t == nil {
		t = &GetChartInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Chart{}
	}
	return t.ID
}
func (t *GetChartInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Chart) GetName() string {
	if t == nil {
		t = &GetChartInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Chart{}
	}
	return t.Name
}
func (t *GetChartInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Chart) GetDescription() *string {
	if t == nil {
		t = &GetChartInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Chart{}
	}
	return t.Description
}
func (t *GetChartInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Chart) GetLatestVersion() *string {
	if t == nil {
		t = &GetChartInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Chart{}
	}
	return t.LatestVersion
}
func (t *GetChartInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Chart) GetDependencies() *DependenciesFragment {
	if t == nil {
		t = &GetChartInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Chart{}
	}
	return t.Dependencies
}

type GetChartInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies struct {
	Type     *DependencyType "json:\"type,omitempty\" graphql:\"type\""
	Name     *string         "json:\"name,omitempty\" graphql:\"name\""
	Repo     *string         "json:\"repo,omitempty\" graphql:\"repo\""
	Optional *bool           "json:\"optional,omitempty\" graphql:\"optional\""
	Version  *string         "json:\"version,omitempty\" graphql:\"version\""
}

func (t *GetChartInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies) GetType() *DependencyType {
	if t == nil {
		t = &GetChartInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Type
}
func (t *GetChartInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies) GetName() *string {
	if t == nil {
		t = &GetChartInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Name
}
func (t *GetChartInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies) GetRepo() *string {
	if t == nil {
		t = &GetChartInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Repo
}
func (t *GetChartInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies) GetOptional() *bool {
	if t == nil {
		t = &GetChartInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Optional
}
func (t *GetChartInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies) GetVersion() *string {
	if t == nil {
		t = &GetChartInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Version
}

type GetChartInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Instructions struct {
	Instructions *string "json:\"instructions,omitempty\" graphql:\"instructions\""
	Script       *string "json:\"script,omitempty\" graphql:\"script\""
}

func (t *GetChartInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Instructions) GetInstructions() *string {
	if t == nil {
		t = &GetChartInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Instructions{}
	}
	return t.Instructions
}
func (t *GetChartInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Instructions) GetScript() *string {
	if t == nil {
		t = &GetChartInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Instructions{}
	}
	return t.Script
}

type GetChartInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Wirings struct {
	Terraform map[string]interface{} "json:\"terraform,omitempty\" graphql:\"terraform\""
	Helm      map[string]interface{} "json:\"helm,omitempty\" graphql:\"helm\""
}

func (t *GetChartInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Wirings) GetTerraform() map[string]interface{} {
	if t == nil {
		t = &GetChartInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Wirings{}
	}
	return t.Terraform
}
func (t *GetChartInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Wirings) GetHelm() map[string]interface{} {
	if t == nil {
		t = &GetChartInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Wirings{}
	}
	return t.Helm
}

type GetChartInstallations_ChartInstallations_Edges struct {
	Node *ChartInstallationFragment "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetChartInstallations_ChartInstallations_Edges) GetNode() *ChartInstallationFragment {
	if t == nil {
		t = &GetChartInstallations_ChartInstallations_Edges{}
	}
	return t.Node
}

type GetChartInstallations_ChartInstallations struct {
	Edges []*GetChartInstallations_ChartInstallations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetChartInstallations_ChartInstallations) GetEdges() []*GetChartInstallations_ChartInstallations_Edges {
	if t == nil {
		t = &GetChartInstallations_ChartInstallations{}
	}
	return t.Edges
}

type GetPackageInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Chart_Dependencies_DependenciesFragment_Dependencies struct {
	Type     *DependencyType "json:\"type,omitempty\" graphql:\"type\""
	Name     *string         "json:\"name,omitempty\" graphql:\"name\""
	Repo     *string         "json:\"repo,omitempty\" graphql:\"repo\""
	Optional *bool           "json:\"optional,omitempty\" graphql:\"optional\""
	Version  *string         "json:\"version,omitempty\" graphql:\"version\""
}

func (t *GetPackageInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Chart_Dependencies_DependenciesFragment_Dependencies) GetType() *DependencyType {
	if t == nil {
		t = &GetPackageInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Chart_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Type
}
func (t *GetPackageInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Chart_Dependencies_DependenciesFragment_Dependencies) GetName() *string {
	if t == nil {
		t = &GetPackageInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Chart_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Name
}
func (t *GetPackageInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Chart_Dependencies_DependenciesFragment_Dependencies) GetRepo() *string {
	if t == nil {
		t = &GetPackageInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Chart_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Repo
}
func (t *GetPackageInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Chart_Dependencies_DependenciesFragment_Dependencies) GetOptional() *bool {
	if t == nil {
		t = &GetPackageInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Chart_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Optional
}
func (t *GetPackageInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Chart_Dependencies_DependenciesFragment_Dependencies) GetVersion() *string {
	if t == nil {
		t = &GetPackageInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Chart_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Version
}

type GetPackageInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Chart_Dependencies_DependenciesFragment_Instructions struct {
	Instructions *string "json:\"instructions,omitempty\" graphql:\"instructions\""
	Script       *string "json:\"script,omitempty\" graphql:\"script\""
}

func (t *GetPackageInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Chart_Dependencies_DependenciesFragment_Instructions) GetInstructions() *string {
	if t == nil {
		t = &GetPackageInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Chart_Dependencies_DependenciesFragment_Instructions{}
	}
	return t.Instructions
}
func (t *GetPackageInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Chart_Dependencies_DependenciesFragment_Instructions) GetScript() *string {
	if t == nil {
		t = &GetPackageInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Chart_Dependencies_DependenciesFragment_Instructions{}
	}
	return t.Script
}

type GetPackageInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Chart_Dependencies_DependenciesFragment_Wirings struct {
	Terraform map[string]interface{} "json:\"terraform,omitempty\" graphql:\"terraform\""
	Helm      map[string]interface{} "json:\"helm,omitempty\" graphql:\"helm\""
}

func (t *GetPackageInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Chart_Dependencies_DependenciesFragment_Wirings) GetTerraform() map[string]interface{} {
	if t == nil {
		t = &GetPackageInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Chart_Dependencies_DependenciesFragment_Wirings{}
	}
	return t.Terraform
}
func (t *GetPackageInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Chart_Dependencies_DependenciesFragment_Wirings) GetHelm() map[string]interface{} {
	if t == nil {
		t = &GetPackageInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Chart_Dependencies_DependenciesFragment_Wirings{}
	}
	return t.Helm
}

type GetPackageInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Chart struct {
	ID            *string               "json:\"id,omitempty\" graphql:\"id\""
	Name          string                "json:\"name\" graphql:\"name\""
	Description   *string               "json:\"description,omitempty\" graphql:\"description\""
	LatestVersion *string               "json:\"latestVersion,omitempty\" graphql:\"latestVersion\""
	Dependencies  *DependenciesFragment "json:\"dependencies,omitempty\" graphql:\"dependencies\""
}

func (t *GetPackageInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Chart) GetID() *string {
	if t == nil {
		t = &GetPackageInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Chart{}
	}
	return t.ID
}
func (t *GetPackageInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Chart) GetName() string {
	if t == nil {
		t = &GetPackageInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Chart{}
	}
	return t.Name
}
func (t *GetPackageInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Chart) GetDescription() *string {
	if t == nil {
		t = &GetPackageInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Chart{}
	}
	return t.Description
}
func (t *GetPackageInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Chart) GetLatestVersion() *string {
	if t == nil {
		t = &GetPackageInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Chart{}
	}
	return t.LatestVersion
}
func (t *GetPackageInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Chart) GetDependencies() *DependenciesFragment {
	if t == nil {
		t = &GetPackageInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Chart{}
	}
	return t.Dependencies
}

type GetPackageInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies struct {
	Type     *DependencyType "json:\"type,omitempty\" graphql:\"type\""
	Name     *string         "json:\"name,omitempty\" graphql:\"name\""
	Repo     *string         "json:\"repo,omitempty\" graphql:\"repo\""
	Optional *bool           "json:\"optional,omitempty\" graphql:\"optional\""
	Version  *string         "json:\"version,omitempty\" graphql:\"version\""
}

func (t *GetPackageInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies) GetType() *DependencyType {
	if t == nil {
		t = &GetPackageInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Type
}
func (t *GetPackageInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies) GetName() *string {
	if t == nil {
		t = &GetPackageInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Name
}
func (t *GetPackageInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies) GetRepo() *string {
	if t == nil {
		t = &GetPackageInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Repo
}
func (t *GetPackageInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies) GetOptional() *bool {
	if t == nil {
		t = &GetPackageInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Optional
}
func (t *GetPackageInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies) GetVersion() *string {
	if t == nil {
		t = &GetPackageInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Version
}

type GetPackageInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Instructions struct {
	Instructions *string "json:\"instructions,omitempty\" graphql:\"instructions\""
	Script       *string "json:\"script,omitempty\" graphql:\"script\""
}

func (t *GetPackageInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Instructions) GetInstructions() *string {
	if t == nil {
		t = &GetPackageInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Instructions{}
	}
	return t.Instructions
}
func (t *GetPackageInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Instructions) GetScript() *string {
	if t == nil {
		t = &GetPackageInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Instructions{}
	}
	return t.Script
}

type GetPackageInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Wirings struct {
	Terraform map[string]interface{} "json:\"terraform,omitempty\" graphql:\"terraform\""
	Helm      map[string]interface{} "json:\"helm,omitempty\" graphql:\"helm\""
}

func (t *GetPackageInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Wirings) GetTerraform() map[string]interface{} {
	if t == nil {
		t = &GetPackageInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Wirings{}
	}
	return t.Terraform
}
func (t *GetPackageInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Wirings) GetHelm() map[string]interface{} {
	if t == nil {
		t = &GetPackageInstallations_ChartInstallations_Edges_Node_ChartInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Wirings{}
	}
	return t.Helm
}

type GetPackageInstallations_ChartInstallations_Edges struct {
	Node *ChartInstallationFragment "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetPackageInstallations_ChartInstallations_Edges) GetNode() *ChartInstallationFragment {
	if t == nil {
		t = &GetPackageInstallations_ChartInstallations_Edges{}
	}
	return t.Node
}

type GetPackageInstallations_ChartInstallations struct {
	Edges []*GetPackageInstallations_ChartInstallations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetPackageInstallations_ChartInstallations) GetEdges() []*GetPackageInstallations_ChartInstallations_Edges {
	if t == nil {
		t = &GetPackageInstallations_ChartInstallations{}
	}
	return t.Edges
}

type GetPackageInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies struct {
	Type     *DependencyType "json:\"type,omitempty\" graphql:\"type\""
	Name     *string         "json:\"name,omitempty\" graphql:\"name\""
	Repo     *string         "json:\"repo,omitempty\" graphql:\"repo\""
	Optional *bool           "json:\"optional,omitempty\" graphql:\"optional\""
	Version  *string         "json:\"version,omitempty\" graphql:\"version\""
}

func (t *GetPackageInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetType() *DependencyType {
	if t == nil {
		t = &GetPackageInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Type
}
func (t *GetPackageInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetName() *string {
	if t == nil {
		t = &GetPackageInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Name
}
func (t *GetPackageInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetRepo() *string {
	if t == nil {
		t = &GetPackageInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Repo
}
func (t *GetPackageInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetOptional() *bool {
	if t == nil {
		t = &GetPackageInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Optional
}
func (t *GetPackageInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetVersion() *string {
	if t == nil {
		t = &GetPackageInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Version
}

type GetPackageInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions struct {
	Instructions *string "json:\"instructions,omitempty\" graphql:\"instructions\""
	Script       *string "json:\"script,omitempty\" graphql:\"script\""
}

func (t *GetPackageInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions) GetInstructions() *string {
	if t == nil {
		t = &GetPackageInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions{}
	}
	return t.Instructions
}
func (t *GetPackageInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions) GetScript() *string {
	if t == nil {
		t = &GetPackageInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions{}
	}
	return t.Script
}

type GetPackageInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings struct {
	Terraform map[string]interface{} "json:\"terraform,omitempty\" graphql:\"terraform\""
	Helm      map[string]interface{} "json:\"helm,omitempty\" graphql:\"helm\""
}

func (t *GetPackageInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings) GetTerraform() map[string]interface{} {
	if t == nil {
		t = &GetPackageInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings{}
	}
	return t.Terraform
}
func (t *GetPackageInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings) GetHelm() map[string]interface{} {
	if t == nil {
		t = &GetPackageInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings{}
	}
	return t.Helm
}

type GetPackageInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies struct {
	Type     *DependencyType "json:\"type,omitempty\" graphql:\"type\""
	Name     *string         "json:\"name,omitempty\" graphql:\"name\""
	Repo     *string         "json:\"repo,omitempty\" graphql:\"repo\""
	Optional *bool           "json:\"optional,omitempty\" graphql:\"optional\""
	Version  *string         "json:\"version,omitempty\" graphql:\"version\""
}

func (t *GetPackageInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies) GetType() *DependencyType {
	if t == nil {
		t = &GetPackageInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Type
}
func (t *GetPackageInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies) GetName() *string {
	if t == nil {
		t = &GetPackageInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Name
}
func (t *GetPackageInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies) GetRepo() *string {
	if t == nil {
		t = &GetPackageInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Repo
}
func (t *GetPackageInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies) GetOptional() *bool {
	if t == nil {
		t = &GetPackageInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Optional
}
func (t *GetPackageInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies) GetVersion() *string {
	if t == nil {
		t = &GetPackageInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Version
}

type GetPackageInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Instructions struct {
	Instructions *string "json:\"instructions,omitempty\" graphql:\"instructions\""
	Script       *string "json:\"script,omitempty\" graphql:\"script\""
}

func (t *GetPackageInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Instructions) GetInstructions() *string {
	if t == nil {
		t = &GetPackageInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Instructions{}
	}
	return t.Instructions
}
func (t *GetPackageInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Instructions) GetScript() *string {
	if t == nil {
		t = &GetPackageInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Instructions{}
	}
	return t.Script
}

type GetPackageInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Wirings struct {
	Terraform map[string]interface{} "json:\"terraform,omitempty\" graphql:\"terraform\""
	Helm      map[string]interface{} "json:\"helm,omitempty\" graphql:\"helm\""
}

func (t *GetPackageInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Wirings) GetTerraform() map[string]interface{} {
	if t == nil {
		t = &GetPackageInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Wirings{}
	}
	return t.Terraform
}
func (t *GetPackageInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Wirings) GetHelm() map[string]interface{} {
	if t == nil {
		t = &GetPackageInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Wirings{}
	}
	return t.Helm
}

type GetPackageInstallations_TerraformInstallations_Edges struct {
	Node *TerraformInstallationFragment "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetPackageInstallations_TerraformInstallations_Edges) GetNode() *TerraformInstallationFragment {
	if t == nil {
		t = &GetPackageInstallations_TerraformInstallations_Edges{}
	}
	return t.Node
}

type GetPackageInstallations_TerraformInstallations struct {
	Edges []*GetPackageInstallations_TerraformInstallations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetPackageInstallations_TerraformInstallations) GetEdges() []*GetPackageInstallations_TerraformInstallations_Edges {
	if t == nil {
		t = &GetPackageInstallations_TerraformInstallations{}
	}
	return t.Edges
}

type CreateCrd_CreateCrd struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateCrd_CreateCrd) GetID() string {
	if t == nil {
		t = &CreateCrd_CreateCrd{}
	}
	return t.ID
}

type UninstallChart_DeleteChartInstallation struct {
	ID *string "json:\"id,omitempty\" graphql:\"id\""
}

func (t *UninstallChart_DeleteChartInstallation) GetID() *string {
	if t == nil {
		t = &UninstallChart_DeleteChartInstallation{}
	}
	return t.ID
}

type GetConsoleInstances_ConsoleInstances_Edges struct {
	Node *ConsoleInstanceFragment "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetConsoleInstances_ConsoleInstances_Edges) GetNode() *ConsoleInstanceFragment {
	if t == nil {
		t = &GetConsoleInstances_ConsoleInstances_Edges{}
	}
	return t.Node
}

type GetConsoleInstances_ConsoleInstances struct {
	Edges []*GetConsoleInstances_ConsoleInstances_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetConsoleInstances_ConsoleInstances) GetEdges() []*GetConsoleInstances_ConsoleInstances_Edges {
	if t == nil {
		t = &GetConsoleInstances_ConsoleInstances{}
	}
	return t.Edges
}

type Clusters_Clusters_PageInfo struct {
	HasNextPage bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	EndCursor   *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
}

func (t *Clusters_Clusters_PageInfo) GetHasNextPage() bool {
	if t == nil {
		t = &Clusters_Clusters_PageInfo{}
	}
	return t.HasNextPage
}
func (t *Clusters_Clusters_PageInfo) GetEndCursor() *string {
	if t == nil {
		t = &Clusters_Clusters_PageInfo{}
	}
	return t.EndCursor
}

type Clusters_Clusters_Edges struct {
	Node *ClusterFragment "json:\"node,omitempty\" graphql:\"node\""
}

func (t *Clusters_Clusters_Edges) GetNode() *ClusterFragment {
	if t == nil {
		t = &Clusters_Clusters_Edges{}
	}
	return t.Node
}

type Clusters_Clusters struct {
	PageInfo Clusters_Clusters_PageInfo "json:\"pageInfo\" graphql:\"pageInfo\""
	Edges    []*Clusters_Clusters_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *Clusters_Clusters) GetPageInfo() *Clusters_Clusters_PageInfo {
	if t == nil {
		t = &Clusters_Clusters{}
	}
	return &t.PageInfo
}
func (t *Clusters_Clusters) GetEdges() []*Clusters_Clusters_Edges {
	if t == nil {
		t = &Clusters_Clusters{}
	}
	return t.Edges
}

type ClusterInfo_Cluster_UpgradeInfo_Installation_Repository_RepositoryFragment_Publisher struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *ClusterInfo_Cluster_UpgradeInfo_Installation_Repository_RepositoryFragment_Publisher) GetName() string {
	if t == nil {
		t = &ClusterInfo_Cluster_UpgradeInfo_Installation_Repository_RepositoryFragment_Publisher{}
	}
	return t.Name
}

type ClusterInfo_Cluster_UpgradeInfo_Installation_Repository_RepositoryFragment_Recipes struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *ClusterInfo_Cluster_UpgradeInfo_Installation_Repository_RepositoryFragment_Recipes) GetName() string {
	if t == nil {
		t = &ClusterInfo_Cluster_UpgradeInfo_Installation_Repository_RepositoryFragment_Recipes{}
	}
	return t.Name
}

type ClusterInfo_Cluster_UpgradeInfo_Installation struct {
	Repository *RepositoryFragment "json:\"repository,omitempty\" graphql:\"repository\""
}

func (t *ClusterInfo_Cluster_UpgradeInfo_Installation) GetRepository() *RepositoryFragment {
	if t == nil {
		t = &ClusterInfo_Cluster_UpgradeInfo_Installation{}
	}
	return t.Repository
}

type ClusterInfo_Cluster_UpgradeInfo struct {
	Installation *ClusterInfo_Cluster_UpgradeInfo_Installation "json:\"installation,omitempty\" graphql:\"installation\""
	Count        *int64                                        "json:\"count,omitempty\" graphql:\"count\""
}

func (t *ClusterInfo_Cluster_UpgradeInfo) GetInstallation() *ClusterInfo_Cluster_UpgradeInfo_Installation {
	if t == nil {
		t = &ClusterInfo_Cluster_UpgradeInfo{}
	}
	return t.Installation
}
func (t *ClusterInfo_Cluster_UpgradeInfo) GetCount() *int64 {
	if t == nil {
		t = &ClusterInfo_Cluster_UpgradeInfo{}
	}
	return t.Count
}

type ClusterInfo_Cluster struct {
	ID          string                             "json:\"id\" graphql:\"id\""
	Name        string                             "json:\"name\" graphql:\"name\""
	Provider    Provider                           "json:\"provider\" graphql:\"provider\""
	Source      *Source                            "json:\"source,omitempty\" graphql:\"source\""
	GitURL      *string                            "json:\"gitUrl,omitempty\" graphql:\"gitUrl\""
	Owner       *UserFragment                      "json:\"owner,omitempty\" graphql:\"owner\""
	UpgradeInfo []*ClusterInfo_Cluster_UpgradeInfo "json:\"upgradeInfo,omitempty\" graphql:\"upgradeInfo\""
}

func (t *ClusterInfo_Cluster) GetID() string {
	if t == nil {
		t = &ClusterInfo_Cluster{}
	}
	return t.ID
}
func (t *ClusterInfo_Cluster) GetName() string {
	if t == nil {
		t = &ClusterInfo_Cluster{}
	}
	return t.Name
}
func (t *ClusterInfo_Cluster) GetProvider() *Provider {
	if t == nil {
		t = &ClusterInfo_Cluster{}
	}
	return &t.Provider
}
func (t *ClusterInfo_Cluster) GetSource() *Source {
	if t == nil {
		t = &ClusterInfo_Cluster{}
	}
	return t.Source
}
func (t *ClusterInfo_Cluster) GetGitURL() *string {
	if t == nil {
		t = &ClusterInfo_Cluster{}
	}
	return t.GitURL
}
func (t *ClusterInfo_Cluster) GetOwner() *UserFragment {
	if t == nil {
		t = &ClusterInfo_Cluster{}
	}
	return t.Owner
}
func (t *ClusterInfo_Cluster) GetUpgradeInfo() []*ClusterInfo_Cluster_UpgradeInfo {
	if t == nil {
		t = &ClusterInfo_Cluster{}
	}
	return t.UpgradeInfo
}

type CreateDependency_CreateClusterDependency struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateDependency_CreateClusterDependency) GetID() string {
	if t == nil {
		t = &CreateDependency_CreateClusterDependency{}
	}
	return t.ID
}

type TransferOwnership_TransferOwnership struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *TransferOwnership_TransferOwnership) GetID() string {
	if t == nil {
		t = &TransferOwnership_TransferOwnership{}
	}
	return t.ID
}

type GetDnsRecords_DNSRecords_Edges struct {
	Node *DNSRecordFragment "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetDnsRecords_DNSRecords_Edges) GetNode() *DNSRecordFragment {
	if t == nil {
		t = &GetDnsRecords_DNSRecords_Edges{}
	}
	return t.Node
}

type GetDnsRecords_DNSRecords struct {
	Edges []*GetDnsRecords_DNSRecords_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetDnsRecords_DNSRecords) GetEdges() []*GetDnsRecords_DNSRecords_Edges {
	if t == nil {
		t = &GetDnsRecords_DNSRecords{}
	}
	return t.Edges
}

type GetInstallation_Installation_InstallationFragment_Repository_RepositoryFragment_Publisher struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetInstallation_Installation_InstallationFragment_Repository_RepositoryFragment_Publisher) GetName() string {
	if t == nil {
		t = &GetInstallation_Installation_InstallationFragment_Repository_RepositoryFragment_Publisher{}
	}
	return t.Name
}

type GetInstallation_Installation_InstallationFragment_Repository_RepositoryFragment_Recipes struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetInstallation_Installation_InstallationFragment_Repository_RepositoryFragment_Recipes) GetName() string {
	if t == nil {
		t = &GetInstallation_Installation_InstallationFragment_Repository_RepositoryFragment_Recipes{}
	}
	return t.Name
}

type GetInstallation_Installation_InstallationFragment_OidcProvider_OIDCProvider_Bindings_User struct {
	ID    string "json:\"id\" graphql:\"id\""
	Email string "json:\"email\" graphql:\"email\""
}

func (t *GetInstallation_Installation_InstallationFragment_OidcProvider_OIDCProvider_Bindings_User) GetID() string {
	if t == nil {
		t = &GetInstallation_Installation_InstallationFragment_OidcProvider_OIDCProvider_Bindings_User{}
	}
	return t.ID
}
func (t *GetInstallation_Installation_InstallationFragment_OidcProvider_OIDCProvider_Bindings_User) GetEmail() string {
	if t == nil {
		t = &GetInstallation_Installation_InstallationFragment_OidcProvider_OIDCProvider_Bindings_User{}
	}
	return t.Email
}

type GetInstallation_Installation_InstallationFragment_OidcProvider_OIDCProvider_Bindings_Group struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetInstallation_Installation_InstallationFragment_OidcProvider_OIDCProvider_Bindings_Group) GetID() string {
	if t == nil {
		t = &GetInstallation_Installation_InstallationFragment_OidcProvider_OIDCProvider_Bindings_Group{}
	}
	return t.ID
}
func (t *GetInstallation_Installation_InstallationFragment_OidcProvider_OIDCProvider_Bindings_Group) GetName() string {
	if t == nil {
		t = &GetInstallation_Installation_InstallationFragment_OidcProvider_OIDCProvider_Bindings_Group{}
	}
	return t.Name
}

type GetInstallation_Installation_InstallationFragment_OidcProvider_OIDCProvider_Bindings struct {
	User  *GetInstallation_Installation_InstallationFragment_OidcProvider_OIDCProvider_Bindings_User  "json:\"user,omitempty\" graphql:\"user\""
	Group *GetInstallation_Installation_InstallationFragment_OidcProvider_OIDCProvider_Bindings_Group "json:\"group,omitempty\" graphql:\"group\""
}

func (t *GetInstallation_Installation_InstallationFragment_OidcProvider_OIDCProvider_Bindings) GetUser() *GetInstallation_Installation_InstallationFragment_OidcProvider_OIDCProvider_Bindings_User {
	if t == nil {
		t = &GetInstallation_Installation_InstallationFragment_OidcProvider_OIDCProvider_Bindings{}
	}
	return t.User
}
func (t *GetInstallation_Installation_InstallationFragment_OidcProvider_OIDCProvider_Bindings) GetGroup() *GetInstallation_Installation_InstallationFragment_OidcProvider_OIDCProvider_Bindings_Group {
	if t == nil {
		t = &GetInstallation_Installation_InstallationFragment_OidcProvider_OIDCProvider_Bindings{}
	}
	return t.Group
}

type GetInstallation_Installation_InstallationFragment_OidcProvider_OIDCProvider_Configuration struct {
	Issuer                *string "json:\"issuer,omitempty\" graphql:\"issuer\""
	AuthorizationEndpoint *string "json:\"authorizationEndpoint,omitempty\" graphql:\"authorizationEndpoint\""
	TokenEndpoint         *string "json:\"tokenEndpoint,omitempty\" graphql:\"tokenEndpoint\""
	JwksURI               *string "json:\"jwksUri,omitempty\" graphql:\"jwksUri\""
	UserinfoEndpoint      *string "json:\"userinfoEndpoint,omitempty\" graphql:\"userinfoEndpoint\""
}

func (t *GetInstallation_Installation_InstallationFragment_OidcProvider_OIDCProvider_Configuration) GetIssuer() *string {
	if t == nil {
		t = &GetInstallation_Installation_InstallationFragment_OidcProvider_OIDCProvider_Configuration{}
	}
	return t.Issuer
}
func (t *GetInstallation_Installation_InstallationFragment_OidcProvider_OIDCProvider_Configuration) GetAuthorizationEndpoint() *string {
	if t == nil {
		t = &GetInstallation_Installation_InstallationFragment_OidcProvider_OIDCProvider_Configuration{}
	}
	return t.AuthorizationEndpoint
}
func (t *GetInstallation_Installation_InstallationFragment_OidcProvider_OIDCProvider_Configuration) GetTokenEndpoint() *string {
	if t == nil {
		t = &GetInstallation_Installation_InstallationFragment_OidcProvider_OIDCProvider_Configuration{}
	}
	return t.TokenEndpoint
}
func (t *GetInstallation_Installation_InstallationFragment_OidcProvider_OIDCProvider_Configuration) GetJwksURI() *string {
	if t == nil {
		t = &GetInstallation_Installation_InstallationFragment_OidcProvider_OIDCProvider_Configuration{}
	}
	return t.JwksURI
}
func (t *GetInstallation_Installation_InstallationFragment_OidcProvider_OIDCProvider_Configuration) GetUserinfoEndpoint() *string {
	if t == nil {
		t = &GetInstallation_Installation_InstallationFragment_OidcProvider_OIDCProvider_Configuration{}
	}
	return t.UserinfoEndpoint
}

type GetInstallationById_Installation_InstallationFragment_Repository_RepositoryFragment_Publisher struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetInstallationById_Installation_InstallationFragment_Repository_RepositoryFragment_Publisher) GetName() string {
	if t == nil {
		t = &GetInstallationById_Installation_InstallationFragment_Repository_RepositoryFragment_Publisher{}
	}
	return t.Name
}

type GetInstallationById_Installation_InstallationFragment_Repository_RepositoryFragment_Recipes struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetInstallationById_Installation_InstallationFragment_Repository_RepositoryFragment_Recipes) GetName() string {
	if t == nil {
		t = &GetInstallationById_Installation_InstallationFragment_Repository_RepositoryFragment_Recipes{}
	}
	return t.Name
}

type GetInstallationById_Installation_InstallationFragment_OidcProvider_OIDCProvider_Bindings_User struct {
	ID    string "json:\"id\" graphql:\"id\""
	Email string "json:\"email\" graphql:\"email\""
}

func (t *GetInstallationById_Installation_InstallationFragment_OidcProvider_OIDCProvider_Bindings_User) GetID() string {
	if t == nil {
		t = &GetInstallationById_Installation_InstallationFragment_OidcProvider_OIDCProvider_Bindings_User{}
	}
	return t.ID
}
func (t *GetInstallationById_Installation_InstallationFragment_OidcProvider_OIDCProvider_Bindings_User) GetEmail() string {
	if t == nil {
		t = &GetInstallationById_Installation_InstallationFragment_OidcProvider_OIDCProvider_Bindings_User{}
	}
	return t.Email
}

type GetInstallationById_Installation_InstallationFragment_OidcProvider_OIDCProvider_Bindings_Group struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetInstallationById_Installation_InstallationFragment_OidcProvider_OIDCProvider_Bindings_Group) GetID() string {
	if t == nil {
		t = &GetInstallationById_Installation_InstallationFragment_OidcProvider_OIDCProvider_Bindings_Group{}
	}
	return t.ID
}
func (t *GetInstallationById_Installation_InstallationFragment_OidcProvider_OIDCProvider_Bindings_Group) GetName() string {
	if t == nil {
		t = &GetInstallationById_Installation_InstallationFragment_OidcProvider_OIDCProvider_Bindings_Group{}
	}
	return t.Name
}

type GetInstallationById_Installation_InstallationFragment_OidcProvider_OIDCProvider_Bindings struct {
	User  *GetInstallationById_Installation_InstallationFragment_OidcProvider_OIDCProvider_Bindings_User  "json:\"user,omitempty\" graphql:\"user\""
	Group *GetInstallationById_Installation_InstallationFragment_OidcProvider_OIDCProvider_Bindings_Group "json:\"group,omitempty\" graphql:\"group\""
}

func (t *GetInstallationById_Installation_InstallationFragment_OidcProvider_OIDCProvider_Bindings) GetUser() *GetInstallationById_Installation_InstallationFragment_OidcProvider_OIDCProvider_Bindings_User {
	if t == nil {
		t = &GetInstallationById_Installation_InstallationFragment_OidcProvider_OIDCProvider_Bindings{}
	}
	return t.User
}
func (t *GetInstallationById_Installation_InstallationFragment_OidcProvider_OIDCProvider_Bindings) GetGroup() *GetInstallationById_Installation_InstallationFragment_OidcProvider_OIDCProvider_Bindings_Group {
	if t == nil {
		t = &GetInstallationById_Installation_InstallationFragment_OidcProvider_OIDCProvider_Bindings{}
	}
	return t.Group
}

type GetInstallationById_Installation_InstallationFragment_OidcProvider_OIDCProvider_Configuration struct {
	Issuer                *string "json:\"issuer,omitempty\" graphql:\"issuer\""
	AuthorizationEndpoint *string "json:\"authorizationEndpoint,omitempty\" graphql:\"authorizationEndpoint\""
	TokenEndpoint         *string "json:\"tokenEndpoint,omitempty\" graphql:\"tokenEndpoint\""
	JwksURI               *string "json:\"jwksUri,omitempty\" graphql:\"jwksUri\""
	UserinfoEndpoint      *string "json:\"userinfoEndpoint,omitempty\" graphql:\"userinfoEndpoint\""
}

func (t *GetInstallationById_Installation_InstallationFragment_OidcProvider_OIDCProvider_Configuration) GetIssuer() *string {
	if t == nil {
		t = &GetInstallationById_Installation_InstallationFragment_OidcProvider_OIDCProvider_Configuration{}
	}
	return t.Issuer
}
func (t *GetInstallationById_Installation_InstallationFragment_OidcProvider_OIDCProvider_Configuration) GetAuthorizationEndpoint() *string {
	if t == nil {
		t = &GetInstallationById_Installation_InstallationFragment_OidcProvider_OIDCProvider_Configuration{}
	}
	return t.AuthorizationEndpoint
}
func (t *GetInstallationById_Installation_InstallationFragment_OidcProvider_OIDCProvider_Configuration) GetTokenEndpoint() *string {
	if t == nil {
		t = &GetInstallationById_Installation_InstallationFragment_OidcProvider_OIDCProvider_Configuration{}
	}
	return t.TokenEndpoint
}
func (t *GetInstallationById_Installation_InstallationFragment_OidcProvider_OIDCProvider_Configuration) GetJwksURI() *string {
	if t == nil {
		t = &GetInstallationById_Installation_InstallationFragment_OidcProvider_OIDCProvider_Configuration{}
	}
	return t.JwksURI
}
func (t *GetInstallationById_Installation_InstallationFragment_OidcProvider_OIDCProvider_Configuration) GetUserinfoEndpoint() *string {
	if t == nil {
		t = &GetInstallationById_Installation_InstallationFragment_OidcProvider_OIDCProvider_Configuration{}
	}
	return t.UserinfoEndpoint
}

type GetInstallations_Installations_Edges_Node_InstallationFragment_Repository_RepositoryFragment_Publisher struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetInstallations_Installations_Edges_Node_InstallationFragment_Repository_RepositoryFragment_Publisher) GetName() string {
	if t == nil {
		t = &GetInstallations_Installations_Edges_Node_InstallationFragment_Repository_RepositoryFragment_Publisher{}
	}
	return t.Name
}

type GetInstallations_Installations_Edges_Node_InstallationFragment_Repository_RepositoryFragment_Recipes struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetInstallations_Installations_Edges_Node_InstallationFragment_Repository_RepositoryFragment_Recipes) GetName() string {
	if t == nil {
		t = &GetInstallations_Installations_Edges_Node_InstallationFragment_Repository_RepositoryFragment_Recipes{}
	}
	return t.Name
}

type GetInstallations_Installations_Edges_Node_InstallationFragment_OidcProvider_OIDCProvider_Bindings_User struct {
	ID    string "json:\"id\" graphql:\"id\""
	Email string "json:\"email\" graphql:\"email\""
}

func (t *GetInstallations_Installations_Edges_Node_InstallationFragment_OidcProvider_OIDCProvider_Bindings_User) GetID() string {
	if t == nil {
		t = &GetInstallations_Installations_Edges_Node_InstallationFragment_OidcProvider_OIDCProvider_Bindings_User{}
	}
	return t.ID
}
func (t *GetInstallations_Installations_Edges_Node_InstallationFragment_OidcProvider_OIDCProvider_Bindings_User) GetEmail() string {
	if t == nil {
		t = &GetInstallations_Installations_Edges_Node_InstallationFragment_OidcProvider_OIDCProvider_Bindings_User{}
	}
	return t.Email
}

type GetInstallations_Installations_Edges_Node_InstallationFragment_OidcProvider_OIDCProvider_Bindings_Group struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetInstallations_Installations_Edges_Node_InstallationFragment_OidcProvider_OIDCProvider_Bindings_Group) GetID() string {
	if t == nil {
		t = &GetInstallations_Installations_Edges_Node_InstallationFragment_OidcProvider_OIDCProvider_Bindings_Group{}
	}
	return t.ID
}
func (t *GetInstallations_Installations_Edges_Node_InstallationFragment_OidcProvider_OIDCProvider_Bindings_Group) GetName() string {
	if t == nil {
		t = &GetInstallations_Installations_Edges_Node_InstallationFragment_OidcProvider_OIDCProvider_Bindings_Group{}
	}
	return t.Name
}

type GetInstallations_Installations_Edges_Node_InstallationFragment_OidcProvider_OIDCProvider_Bindings struct {
	User  *GetInstallations_Installations_Edges_Node_InstallationFragment_OidcProvider_OIDCProvider_Bindings_User  "json:\"user,omitempty\" graphql:\"user\""
	Group *GetInstallations_Installations_Edges_Node_InstallationFragment_OidcProvider_OIDCProvider_Bindings_Group "json:\"group,omitempty\" graphql:\"group\""
}

func (t *GetInstallations_Installations_Edges_Node_InstallationFragment_OidcProvider_OIDCProvider_Bindings) GetUser() *GetInstallations_Installations_Edges_Node_InstallationFragment_OidcProvider_OIDCProvider_Bindings_User {
	if t == nil {
		t = &GetInstallations_Installations_Edges_Node_InstallationFragment_OidcProvider_OIDCProvider_Bindings{}
	}
	return t.User
}
func (t *GetInstallations_Installations_Edges_Node_InstallationFragment_OidcProvider_OIDCProvider_Bindings) GetGroup() *GetInstallations_Installations_Edges_Node_InstallationFragment_OidcProvider_OIDCProvider_Bindings_Group {
	if t == nil {
		t = &GetInstallations_Installations_Edges_Node_InstallationFragment_OidcProvider_OIDCProvider_Bindings{}
	}
	return t.Group
}

type GetInstallations_Installations_Edges_Node_InstallationFragment_OidcProvider_OIDCProvider_Configuration struct {
	Issuer                *string "json:\"issuer,omitempty\" graphql:\"issuer\""
	AuthorizationEndpoint *string "json:\"authorizationEndpoint,omitempty\" graphql:\"authorizationEndpoint\""
	TokenEndpoint         *string "json:\"tokenEndpoint,omitempty\" graphql:\"tokenEndpoint\""
	JwksURI               *string "json:\"jwksUri,omitempty\" graphql:\"jwksUri\""
	UserinfoEndpoint      *string "json:\"userinfoEndpoint,omitempty\" graphql:\"userinfoEndpoint\""
}

func (t *GetInstallations_Installations_Edges_Node_InstallationFragment_OidcProvider_OIDCProvider_Configuration) GetIssuer() *string {
	if t == nil {
		t = &GetInstallations_Installations_Edges_Node_InstallationFragment_OidcProvider_OIDCProvider_Configuration{}
	}
	return t.Issuer
}
func (t *GetInstallations_Installations_Edges_Node_InstallationFragment_OidcProvider_OIDCProvider_Configuration) GetAuthorizationEndpoint() *string {
	if t == nil {
		t = &GetInstallations_Installations_Edges_Node_InstallationFragment_OidcProvider_OIDCProvider_Configuration{}
	}
	return t.AuthorizationEndpoint
}
func (t *GetInstallations_Installations_Edges_Node_InstallationFragment_OidcProvider_OIDCProvider_Configuration) GetTokenEndpoint() *string {
	if t == nil {
		t = &GetInstallations_Installations_Edges_Node_InstallationFragment_OidcProvider_OIDCProvider_Configuration{}
	}
	return t.TokenEndpoint
}
func (t *GetInstallations_Installations_Edges_Node_InstallationFragment_OidcProvider_OIDCProvider_Configuration) GetJwksURI() *string {
	if t == nil {
		t = &GetInstallations_Installations_Edges_Node_InstallationFragment_OidcProvider_OIDCProvider_Configuration{}
	}
	return t.JwksURI
}
func (t *GetInstallations_Installations_Edges_Node_InstallationFragment_OidcProvider_OIDCProvider_Configuration) GetUserinfoEndpoint() *string {
	if t == nil {
		t = &GetInstallations_Installations_Edges_Node_InstallationFragment_OidcProvider_OIDCProvider_Configuration{}
	}
	return t.UserinfoEndpoint
}

type GetInstallations_Installations_Edges struct {
	Node *InstallationFragment "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetInstallations_Installations_Edges) GetNode() *InstallationFragment {
	if t == nil {
		t = &GetInstallations_Installations_Edges{}
	}
	return t.Node
}

type GetInstallations_Installations struct {
	Edges []*GetInstallations_Installations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetInstallations_Installations) GetEdges() []*GetInstallations_Installations_Edges {
	if t == nil {
		t = &GetInstallations_Installations{}
	}
	return t.Edges
}

type UpsertOidcProvider_UpsertOidcProvider struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpsertOidcProvider_UpsertOidcProvider) GetID() string {
	if t == nil {
		t = &UpsertOidcProvider_UpsertOidcProvider{}
	}
	return t.ID
}

type CreateInstallation_CreateInstallation struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateInstallation_CreateInstallation) GetID() string {
	if t == nil {
		t = &CreateInstallation_CreateInstallation{}
	}
	return t.ID
}

type DeleteInstallation_DeleteInstallation struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *DeleteInstallation_DeleteInstallation) GetID() string {
	if t == nil {
		t = &DeleteInstallation_DeleteInstallation{}
	}
	return t.ID
}

type GetRecipe_Recipe_RecipeFragment_Tests_Args struct {
	Name string "json:\"name\" graphql:\"name\""
	Repo string "json:\"repo\" graphql:\"repo\""
	Key  string "json:\"key\" graphql:\"key\""
}

func (t *GetRecipe_Recipe_RecipeFragment_Tests_Args) GetName() string {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeFragment_Tests_Args{}
	}
	return t.Name
}
func (t *GetRecipe_Recipe_RecipeFragment_Tests_Args) GetRepo() string {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeFragment_Tests_Args{}
	}
	return t.Repo
}
func (t *GetRecipe_Recipe_RecipeFragment_Tests_Args) GetKey() string {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeFragment_Tests_Args{}
	}
	return t.Key
}

type GetRecipe_Recipe_RecipeFragment_Tests struct {
	Type    TestType                                      "json:\"type\" graphql:\"type\""
	Name    string                                        "json:\"name\" graphql:\"name\""
	Message *string                                       "json:\"message,omitempty\" graphql:\"message\""
	Args    []*GetRecipe_Recipe_RecipeFragment_Tests_Args "json:\"args,omitempty\" graphql:\"args\""
}

func (t *GetRecipe_Recipe_RecipeFragment_Tests) GetType() *TestType {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeFragment_Tests{}
	}
	return &t.Type
}
func (t *GetRecipe_Recipe_RecipeFragment_Tests) GetName() string {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeFragment_Tests{}
	}
	return t.Name
}
func (t *GetRecipe_Recipe_RecipeFragment_Tests) GetMessage() *string {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeFragment_Tests{}
	}
	return t.Message
}
func (t *GetRecipe_Recipe_RecipeFragment_Tests) GetArgs() []*GetRecipe_Recipe_RecipeFragment_Tests_Args {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeFragment_Tests{}
	}
	return t.Args
}

type GetRecipe_Recipe_RecipeFragment_Repository struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetRecipe_Recipe_RecipeFragment_Repository) GetID() string {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeFragment_Repository{}
	}
	return t.ID
}
func (t *GetRecipe_Recipe_RecipeFragment_Repository) GetName() string {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeFragment_Repository{}
	}
	return t.Name
}

type GetRecipe_Recipe_RecipeFragment_OidcSettings struct {
	URIFormat  *string        "json:\"uriFormat,omitempty\" graphql:\"uriFormat\""
	URIFormats []*string      "json:\"uriFormats,omitempty\" graphql:\"uriFormats\""
	AuthMethod OidcAuthMethod "json:\"authMethod\" graphql:\"authMethod\""
	DomainKey  *string        "json:\"domainKey,omitempty\" graphql:\"domainKey\""
	Subdomain  *bool          "json:\"subdomain,omitempty\" graphql:\"subdomain\""
}

func (t *GetRecipe_Recipe_RecipeFragment_OidcSettings) GetURIFormat() *string {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeFragment_OidcSettings{}
	}
	return t.URIFormat
}
func (t *GetRecipe_Recipe_RecipeFragment_OidcSettings) GetURIFormats() []*string {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeFragment_OidcSettings{}
	}
	return t.URIFormats
}
func (t *GetRecipe_Recipe_RecipeFragment_OidcSettings) GetAuthMethod() *OidcAuthMethod {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeFragment_OidcSettings{}
	}
	return &t.AuthMethod
}
func (t *GetRecipe_Recipe_RecipeFragment_OidcSettings) GetDomainKey() *string {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeFragment_OidcSettings{}
	}
	return t.DomainKey
}
func (t *GetRecipe_Recipe_RecipeFragment_OidcSettings) GetSubdomain() *bool {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeFragment_OidcSettings{}
	}
	return t.Subdomain
}

type GetRecipe_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_Repository_RepositoryFragment_Publisher struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetRecipe_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_Repository_RepositoryFragment_Publisher) GetName() string {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_Repository_RepositoryFragment_Publisher{}
	}
	return t.Name
}

type GetRecipe_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_Repository_RepositoryFragment_Recipes struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetRecipe_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_Repository_RepositoryFragment_Recipes) GetName() string {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_Repository_RepositoryFragment_Recipes{}
	}
	return t.Name
}

type GetRecipe_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies struct {
	Type     *DependencyType "json:\"type,omitempty\" graphql:\"type\""
	Name     *string         "json:\"name,omitempty\" graphql:\"name\""
	Repo     *string         "json:\"repo,omitempty\" graphql:\"repo\""
	Optional *bool           "json:\"optional,omitempty\" graphql:\"optional\""
	Version  *string         "json:\"version,omitempty\" graphql:\"version\""
}

func (t *GetRecipe_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetType() *DependencyType {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Type
}
func (t *GetRecipe_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetName() *string {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Name
}
func (t *GetRecipe_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetRepo() *string {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Repo
}
func (t *GetRecipe_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetOptional() *bool {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Optional
}
func (t *GetRecipe_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetVersion() *string {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Version
}

type GetRecipe_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions struct {
	Instructions *string "json:\"instructions,omitempty\" graphql:\"instructions\""
	Script       *string "json:\"script,omitempty\" graphql:\"script\""
}

func (t *GetRecipe_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions) GetInstructions() *string {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions{}
	}
	return t.Instructions
}
func (t *GetRecipe_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions) GetScript() *string {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions{}
	}
	return t.Script
}

type GetRecipe_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings struct {
	Terraform map[string]interface{} "json:\"terraform,omitempty\" graphql:\"terraform\""
	Helm      map[string]interface{} "json:\"helm,omitempty\" graphql:\"helm\""
}

func (t *GetRecipe_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings) GetTerraform() map[string]interface{} {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings{}
	}
	return t.Terraform
}
func (t *GetRecipe_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings) GetHelm() map[string]interface{} {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings{}
	}
	return t.Helm
}

type GetRecipe_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition struct {
	Field     string    "json:\"field\" graphql:\"field\""
	Operation Operation "json:\"operation\" graphql:\"operation\""
	Value     *string   "json:\"value,omitempty\" graphql:\"value\""
}

func (t *GetRecipe_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition) GetField() string {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return t.Field
}
func (t *GetRecipe_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition) GetOperation() *Operation {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return &t.Operation
}
func (t *GetRecipe_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition) GetValue() *string {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return t.Value
}

type GetRecipe_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation struct {
	Type    ValidationType "json:\"type\" graphql:\"type\""
	Regex   *string        "json:\"regex,omitempty\" graphql:\"regex\""
	Message string         "json:\"message\" graphql:\"message\""
}

func (t *GetRecipe_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation) GetType() *ValidationType {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return &t.Type
}
func (t *GetRecipe_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation) GetRegex() *string {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return t.Regex
}
func (t *GetRecipe_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation) GetMessage() string {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return t.Message
}

type GetRecipe_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition struct {
	Field     string    "json:\"field\" graphql:\"field\""
	Operation Operation "json:\"operation\" graphql:\"operation\""
	Value     *string   "json:\"value,omitempty\" graphql:\"value\""
}

func (t *GetRecipe_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition) GetField() string {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return t.Field
}
func (t *GetRecipe_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition) GetOperation() *Operation {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return &t.Operation
}
func (t *GetRecipe_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition) GetValue() *string {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return t.Value
}

type GetRecipe_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation struct {
	Type    ValidationType "json:\"type\" graphql:\"type\""
	Regex   *string        "json:\"regex,omitempty\" graphql:\"regex\""
	Message string         "json:\"message\" graphql:\"message\""
}

func (t *GetRecipe_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation) GetType() *ValidationType {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return &t.Type
}
func (t *GetRecipe_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation) GetRegex() *string {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return t.Regex
}
func (t *GetRecipe_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation) GetMessage() string {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return t.Message
}

type GetRecipe_Recipe_RecipeDependencies_RecipeFragment_Tests_Args struct {
	Name string "json:\"name\" graphql:\"name\""
	Repo string "json:\"repo\" graphql:\"repo\""
	Key  string "json:\"key\" graphql:\"key\""
}

func (t *GetRecipe_Recipe_RecipeDependencies_RecipeFragment_Tests_Args) GetName() string {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeDependencies_RecipeFragment_Tests_Args{}
	}
	return t.Name
}
func (t *GetRecipe_Recipe_RecipeDependencies_RecipeFragment_Tests_Args) GetRepo() string {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeDependencies_RecipeFragment_Tests_Args{}
	}
	return t.Repo
}
func (t *GetRecipe_Recipe_RecipeDependencies_RecipeFragment_Tests_Args) GetKey() string {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeDependencies_RecipeFragment_Tests_Args{}
	}
	return t.Key
}

type GetRecipe_Recipe_RecipeDependencies_RecipeFragment_Tests struct {
	Type    TestType                                                         "json:\"type\" graphql:\"type\""
	Name    string                                                           "json:\"name\" graphql:\"name\""
	Message *string                                                          "json:\"message,omitempty\" graphql:\"message\""
	Args    []*GetRecipe_Recipe_RecipeDependencies_RecipeFragment_Tests_Args "json:\"args,omitempty\" graphql:\"args\""
}

func (t *GetRecipe_Recipe_RecipeDependencies_RecipeFragment_Tests) GetType() *TestType {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeDependencies_RecipeFragment_Tests{}
	}
	return &t.Type
}
func (t *GetRecipe_Recipe_RecipeDependencies_RecipeFragment_Tests) GetName() string {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeDependencies_RecipeFragment_Tests{}
	}
	return t.Name
}
func (t *GetRecipe_Recipe_RecipeDependencies_RecipeFragment_Tests) GetMessage() *string {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeDependencies_RecipeFragment_Tests{}
	}
	return t.Message
}
func (t *GetRecipe_Recipe_RecipeDependencies_RecipeFragment_Tests) GetArgs() []*GetRecipe_Recipe_RecipeDependencies_RecipeFragment_Tests_Args {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeDependencies_RecipeFragment_Tests{}
	}
	return t.Args
}

type GetRecipe_Recipe_RecipeDependencies_RecipeFragment_Repository struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetRecipe_Recipe_RecipeDependencies_RecipeFragment_Repository) GetID() string {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeDependencies_RecipeFragment_Repository{}
	}
	return t.ID
}
func (t *GetRecipe_Recipe_RecipeDependencies_RecipeFragment_Repository) GetName() string {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeDependencies_RecipeFragment_Repository{}
	}
	return t.Name
}

type GetRecipe_Recipe_RecipeDependencies_RecipeFragment_OidcSettings struct {
	URIFormat  *string        "json:\"uriFormat,omitempty\" graphql:\"uriFormat\""
	URIFormats []*string      "json:\"uriFormats,omitempty\" graphql:\"uriFormats\""
	AuthMethod OidcAuthMethod "json:\"authMethod\" graphql:\"authMethod\""
	DomainKey  *string        "json:\"domainKey,omitempty\" graphql:\"domainKey\""
	Subdomain  *bool          "json:\"subdomain,omitempty\" graphql:\"subdomain\""
}

func (t *GetRecipe_Recipe_RecipeDependencies_RecipeFragment_OidcSettings) GetURIFormat() *string {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeDependencies_RecipeFragment_OidcSettings{}
	}
	return t.URIFormat
}
func (t *GetRecipe_Recipe_RecipeDependencies_RecipeFragment_OidcSettings) GetURIFormats() []*string {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeDependencies_RecipeFragment_OidcSettings{}
	}
	return t.URIFormats
}
func (t *GetRecipe_Recipe_RecipeDependencies_RecipeFragment_OidcSettings) GetAuthMethod() *OidcAuthMethod {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeDependencies_RecipeFragment_OidcSettings{}
	}
	return &t.AuthMethod
}
func (t *GetRecipe_Recipe_RecipeDependencies_RecipeFragment_OidcSettings) GetDomainKey() *string {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeDependencies_RecipeFragment_OidcSettings{}
	}
	return t.DomainKey
}
func (t *GetRecipe_Recipe_RecipeDependencies_RecipeFragment_OidcSettings) GetSubdomain() *bool {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeDependencies_RecipeFragment_OidcSettings{}
	}
	return t.Subdomain
}

type GetRecipe_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_Repository_RepositoryFragment_Publisher struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetRecipe_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_Repository_RepositoryFragment_Publisher) GetName() string {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_Repository_RepositoryFragment_Publisher{}
	}
	return t.Name
}

type GetRecipe_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_Repository_RepositoryFragment_Recipes struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetRecipe_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_Repository_RepositoryFragment_Recipes) GetName() string {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_Repository_RepositoryFragment_Recipes{}
	}
	return t.Name
}

type GetRecipe_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies struct {
	Type     *DependencyType "json:\"type,omitempty\" graphql:\"type\""
	Name     *string         "json:\"name,omitempty\" graphql:\"name\""
	Repo     *string         "json:\"repo,omitempty\" graphql:\"repo\""
	Optional *bool           "json:\"optional,omitempty\" graphql:\"optional\""
	Version  *string         "json:\"version,omitempty\" graphql:\"version\""
}

func (t *GetRecipe_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetType() *DependencyType {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Type
}
func (t *GetRecipe_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetName() *string {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Name
}
func (t *GetRecipe_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetRepo() *string {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Repo
}
func (t *GetRecipe_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetOptional() *bool {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Optional
}
func (t *GetRecipe_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetVersion() *string {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Version
}

type GetRecipe_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions struct {
	Instructions *string "json:\"instructions,omitempty\" graphql:\"instructions\""
	Script       *string "json:\"script,omitempty\" graphql:\"script\""
}

func (t *GetRecipe_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions) GetInstructions() *string {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions{}
	}
	return t.Instructions
}
func (t *GetRecipe_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions) GetScript() *string {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions{}
	}
	return t.Script
}

type GetRecipe_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings struct {
	Terraform map[string]interface{} "json:\"terraform,omitempty\" graphql:\"terraform\""
	Helm      map[string]interface{} "json:\"helm,omitempty\" graphql:\"helm\""
}

func (t *GetRecipe_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings) GetTerraform() map[string]interface{} {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings{}
	}
	return t.Terraform
}
func (t *GetRecipe_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings) GetHelm() map[string]interface{} {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings{}
	}
	return t.Helm
}

type GetRecipe_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition struct {
	Field     string    "json:\"field\" graphql:\"field\""
	Operation Operation "json:\"operation\" graphql:\"operation\""
	Value     *string   "json:\"value,omitempty\" graphql:\"value\""
}

func (t *GetRecipe_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition) GetField() string {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return t.Field
}
func (t *GetRecipe_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition) GetOperation() *Operation {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return &t.Operation
}
func (t *GetRecipe_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition) GetValue() *string {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return t.Value
}

type GetRecipe_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation struct {
	Type    ValidationType "json:\"type\" graphql:\"type\""
	Regex   *string        "json:\"regex,omitempty\" graphql:\"regex\""
	Message string         "json:\"message\" graphql:\"message\""
}

func (t *GetRecipe_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation) GetType() *ValidationType {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return &t.Type
}
func (t *GetRecipe_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation) GetRegex() *string {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return t.Regex
}
func (t *GetRecipe_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation) GetMessage() string {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return t.Message
}

type GetRecipe_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition struct {
	Field     string    "json:\"field\" graphql:\"field\""
	Operation Operation "json:\"operation\" graphql:\"operation\""
	Value     *string   "json:\"value,omitempty\" graphql:\"value\""
}

func (t *GetRecipe_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition) GetField() string {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return t.Field
}
func (t *GetRecipe_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition) GetOperation() *Operation {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return &t.Operation
}
func (t *GetRecipe_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition) GetValue() *string {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return t.Value
}

type GetRecipe_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation struct {
	Type    ValidationType "json:\"type\" graphql:\"type\""
	Regex   *string        "json:\"regex,omitempty\" graphql:\"regex\""
	Message string         "json:\"message\" graphql:\"message\""
}

func (t *GetRecipe_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation) GetType() *ValidationType {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return &t.Type
}
func (t *GetRecipe_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation) GetRegex() *string {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return t.Regex
}
func (t *GetRecipe_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation) GetMessage() string {
	if t == nil {
		t = &GetRecipe_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return t.Message
}

type GetRecipe_Recipe struct {
	ID                 string                                        "json:\"id\" graphql:\"id\""
	Name               string                                        "json:\"name\" graphql:\"name\""
	Primary            *bool                                         "json:\"primary,omitempty\" graphql:\"primary\""
	Description        *string                                       "json:\"description,omitempty\" graphql:\"description\""
	Restricted         *bool                                         "json:\"restricted,omitempty\" graphql:\"restricted\""
	Provider           *Provider                                     "json:\"provider,omitempty\" graphql:\"provider\""
	Tests              []*GetRecipe_Recipe_RecipeFragment_Tests      "json:\"tests,omitempty\" graphql:\"tests\""
	Repository         *GetRecipe_Recipe_RecipeFragment_Repository   "json:\"repository,omitempty\" graphql:\"repository\""
	OidcSettings       *GetRecipe_Recipe_RecipeFragment_OidcSettings "json:\"oidcSettings,omitempty\" graphql:\"oidcSettings\""
	RecipeSections     []*RecipeSectionFragment                      "json:\"recipeSections,omitempty\" graphql:\"recipeSections\""
	RecipeDependencies []*RecipeFragment                             "json:\"recipeDependencies,omitempty\" graphql:\"recipeDependencies\""
}

func (t *GetRecipe_Recipe) GetID() string {
	if t == nil {
		t = &GetRecipe_Recipe{}
	}
	return t.ID
}
func (t *GetRecipe_Recipe) GetName() string {
	if t == nil {
		t = &GetRecipe_Recipe{}
	}
	return t.Name
}
func (t *GetRecipe_Recipe) GetPrimary() *bool {
	if t == nil {
		t = &GetRecipe_Recipe{}
	}
	return t.Primary
}
func (t *GetRecipe_Recipe) GetDescription() *string {
	if t == nil {
		t = &GetRecipe_Recipe{}
	}
	return t.Description
}
func (t *GetRecipe_Recipe) GetRestricted() *bool {
	if t == nil {
		t = &GetRecipe_Recipe{}
	}
	return t.Restricted
}
func (t *GetRecipe_Recipe) GetProvider() *Provider {
	if t == nil {
		t = &GetRecipe_Recipe{}
	}
	return t.Provider
}
func (t *GetRecipe_Recipe) GetTests() []*GetRecipe_Recipe_RecipeFragment_Tests {
	if t == nil {
		t = &GetRecipe_Recipe{}
	}
	return t.Tests
}
func (t *GetRecipe_Recipe) GetRepository() *GetRecipe_Recipe_RecipeFragment_Repository {
	if t == nil {
		t = &GetRecipe_Recipe{}
	}
	return t.Repository
}
func (t *GetRecipe_Recipe) GetOidcSettings() *GetRecipe_Recipe_RecipeFragment_OidcSettings {
	if t == nil {
		t = &GetRecipe_Recipe{}
	}
	return t.OidcSettings
}
func (t *GetRecipe_Recipe) GetRecipeSections() []*RecipeSectionFragment {
	if t == nil {
		t = &GetRecipe_Recipe{}
	}
	return t.RecipeSections
}
func (t *GetRecipe_Recipe) GetRecipeDependencies() []*RecipeFragment {
	if t == nil {
		t = &GetRecipe_Recipe{}
	}
	return t.RecipeDependencies
}

type GetRecipeByID_Recipe_RecipeFragment_Tests_Args struct {
	Name string "json:\"name\" graphql:\"name\""
	Repo string "json:\"repo\" graphql:\"repo\""
	Key  string "json:\"key\" graphql:\"key\""
}

func (t *GetRecipeByID_Recipe_RecipeFragment_Tests_Args) GetName() string {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeFragment_Tests_Args{}
	}
	return t.Name
}
func (t *GetRecipeByID_Recipe_RecipeFragment_Tests_Args) GetRepo() string {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeFragment_Tests_Args{}
	}
	return t.Repo
}
func (t *GetRecipeByID_Recipe_RecipeFragment_Tests_Args) GetKey() string {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeFragment_Tests_Args{}
	}
	return t.Key
}

type GetRecipeByID_Recipe_RecipeFragment_Tests struct {
	Type    TestType                                          "json:\"type\" graphql:\"type\""
	Name    string                                            "json:\"name\" graphql:\"name\""
	Message *string                                           "json:\"message,omitempty\" graphql:\"message\""
	Args    []*GetRecipeByID_Recipe_RecipeFragment_Tests_Args "json:\"args,omitempty\" graphql:\"args\""
}

func (t *GetRecipeByID_Recipe_RecipeFragment_Tests) GetType() *TestType {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeFragment_Tests{}
	}
	return &t.Type
}
func (t *GetRecipeByID_Recipe_RecipeFragment_Tests) GetName() string {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeFragment_Tests{}
	}
	return t.Name
}
func (t *GetRecipeByID_Recipe_RecipeFragment_Tests) GetMessage() *string {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeFragment_Tests{}
	}
	return t.Message
}
func (t *GetRecipeByID_Recipe_RecipeFragment_Tests) GetArgs() []*GetRecipeByID_Recipe_RecipeFragment_Tests_Args {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeFragment_Tests{}
	}
	return t.Args
}

type GetRecipeByID_Recipe_RecipeFragment_Repository struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetRecipeByID_Recipe_RecipeFragment_Repository) GetID() string {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeFragment_Repository{}
	}
	return t.ID
}
func (t *GetRecipeByID_Recipe_RecipeFragment_Repository) GetName() string {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeFragment_Repository{}
	}
	return t.Name
}

type GetRecipeByID_Recipe_RecipeFragment_OidcSettings struct {
	URIFormat  *string        "json:\"uriFormat,omitempty\" graphql:\"uriFormat\""
	URIFormats []*string      "json:\"uriFormats,omitempty\" graphql:\"uriFormats\""
	AuthMethod OidcAuthMethod "json:\"authMethod\" graphql:\"authMethod\""
	DomainKey  *string        "json:\"domainKey,omitempty\" graphql:\"domainKey\""
	Subdomain  *bool          "json:\"subdomain,omitempty\" graphql:\"subdomain\""
}

func (t *GetRecipeByID_Recipe_RecipeFragment_OidcSettings) GetURIFormat() *string {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeFragment_OidcSettings{}
	}
	return t.URIFormat
}
func (t *GetRecipeByID_Recipe_RecipeFragment_OidcSettings) GetURIFormats() []*string {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeFragment_OidcSettings{}
	}
	return t.URIFormats
}
func (t *GetRecipeByID_Recipe_RecipeFragment_OidcSettings) GetAuthMethod() *OidcAuthMethod {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeFragment_OidcSettings{}
	}
	return &t.AuthMethod
}
func (t *GetRecipeByID_Recipe_RecipeFragment_OidcSettings) GetDomainKey() *string {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeFragment_OidcSettings{}
	}
	return t.DomainKey
}
func (t *GetRecipeByID_Recipe_RecipeFragment_OidcSettings) GetSubdomain() *bool {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeFragment_OidcSettings{}
	}
	return t.Subdomain
}

type GetRecipeByID_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_Repository_RepositoryFragment_Publisher struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetRecipeByID_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_Repository_RepositoryFragment_Publisher) GetName() string {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_Repository_RepositoryFragment_Publisher{}
	}
	return t.Name
}

type GetRecipeByID_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_Repository_RepositoryFragment_Recipes struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetRecipeByID_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_Repository_RepositoryFragment_Recipes) GetName() string {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_Repository_RepositoryFragment_Recipes{}
	}
	return t.Name
}

type GetRecipeByID_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies struct {
	Type     *DependencyType "json:\"type,omitempty\" graphql:\"type\""
	Name     *string         "json:\"name,omitempty\" graphql:\"name\""
	Repo     *string         "json:\"repo,omitempty\" graphql:\"repo\""
	Optional *bool           "json:\"optional,omitempty\" graphql:\"optional\""
	Version  *string         "json:\"version,omitempty\" graphql:\"version\""
}

func (t *GetRecipeByID_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetType() *DependencyType {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Type
}
func (t *GetRecipeByID_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetName() *string {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Name
}
func (t *GetRecipeByID_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetRepo() *string {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Repo
}
func (t *GetRecipeByID_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetOptional() *bool {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Optional
}
func (t *GetRecipeByID_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetVersion() *string {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Version
}

type GetRecipeByID_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions struct {
	Instructions *string "json:\"instructions,omitempty\" graphql:\"instructions\""
	Script       *string "json:\"script,omitempty\" graphql:\"script\""
}

func (t *GetRecipeByID_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions) GetInstructions() *string {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions{}
	}
	return t.Instructions
}
func (t *GetRecipeByID_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions) GetScript() *string {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions{}
	}
	return t.Script
}

type GetRecipeByID_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings struct {
	Terraform map[string]interface{} "json:\"terraform,omitempty\" graphql:\"terraform\""
	Helm      map[string]interface{} "json:\"helm,omitempty\" graphql:\"helm\""
}

func (t *GetRecipeByID_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings) GetTerraform() map[string]interface{} {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings{}
	}
	return t.Terraform
}
func (t *GetRecipeByID_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings) GetHelm() map[string]interface{} {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings{}
	}
	return t.Helm
}

type GetRecipeByID_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition struct {
	Field     string    "json:\"field\" graphql:\"field\""
	Operation Operation "json:\"operation\" graphql:\"operation\""
	Value     *string   "json:\"value,omitempty\" graphql:\"value\""
}

func (t *GetRecipeByID_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition) GetField() string {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return t.Field
}
func (t *GetRecipeByID_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition) GetOperation() *Operation {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return &t.Operation
}
func (t *GetRecipeByID_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition) GetValue() *string {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return t.Value
}

type GetRecipeByID_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation struct {
	Type    ValidationType "json:\"type\" graphql:\"type\""
	Regex   *string        "json:\"regex,omitempty\" graphql:\"regex\""
	Message string         "json:\"message\" graphql:\"message\""
}

func (t *GetRecipeByID_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation) GetType() *ValidationType {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return &t.Type
}
func (t *GetRecipeByID_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation) GetRegex() *string {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return t.Regex
}
func (t *GetRecipeByID_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation) GetMessage() string {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return t.Message
}

type GetRecipeByID_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition struct {
	Field     string    "json:\"field\" graphql:\"field\""
	Operation Operation "json:\"operation\" graphql:\"operation\""
	Value     *string   "json:\"value,omitempty\" graphql:\"value\""
}

func (t *GetRecipeByID_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition) GetField() string {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return t.Field
}
func (t *GetRecipeByID_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition) GetOperation() *Operation {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return &t.Operation
}
func (t *GetRecipeByID_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition) GetValue() *string {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return t.Value
}

type GetRecipeByID_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation struct {
	Type    ValidationType "json:\"type\" graphql:\"type\""
	Regex   *string        "json:\"regex,omitempty\" graphql:\"regex\""
	Message string         "json:\"message\" graphql:\"message\""
}

func (t *GetRecipeByID_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation) GetType() *ValidationType {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return &t.Type
}
func (t *GetRecipeByID_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation) GetRegex() *string {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return t.Regex
}
func (t *GetRecipeByID_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation) GetMessage() string {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return t.Message
}

type GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_Tests_Args struct {
	Name string "json:\"name\" graphql:\"name\""
	Repo string "json:\"repo\" graphql:\"repo\""
	Key  string "json:\"key\" graphql:\"key\""
}

func (t *GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_Tests_Args) GetName() string {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_Tests_Args{}
	}
	return t.Name
}
func (t *GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_Tests_Args) GetRepo() string {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_Tests_Args{}
	}
	return t.Repo
}
func (t *GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_Tests_Args) GetKey() string {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_Tests_Args{}
	}
	return t.Key
}

type GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_Tests struct {
	Type    TestType                                                             "json:\"type\" graphql:\"type\""
	Name    string                                                               "json:\"name\" graphql:\"name\""
	Message *string                                                              "json:\"message,omitempty\" graphql:\"message\""
	Args    []*GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_Tests_Args "json:\"args,omitempty\" graphql:\"args\""
}

func (t *GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_Tests) GetType() *TestType {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_Tests{}
	}
	return &t.Type
}
func (t *GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_Tests) GetName() string {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_Tests{}
	}
	return t.Name
}
func (t *GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_Tests) GetMessage() *string {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_Tests{}
	}
	return t.Message
}
func (t *GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_Tests) GetArgs() []*GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_Tests_Args {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_Tests{}
	}
	return t.Args
}

type GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_Repository struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_Repository) GetID() string {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_Repository{}
	}
	return t.ID
}
func (t *GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_Repository) GetName() string {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_Repository{}
	}
	return t.Name
}

type GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_OidcSettings struct {
	URIFormat  *string        "json:\"uriFormat,omitempty\" graphql:\"uriFormat\""
	URIFormats []*string      "json:\"uriFormats,omitempty\" graphql:\"uriFormats\""
	AuthMethod OidcAuthMethod "json:\"authMethod\" graphql:\"authMethod\""
	DomainKey  *string        "json:\"domainKey,omitempty\" graphql:\"domainKey\""
	Subdomain  *bool          "json:\"subdomain,omitempty\" graphql:\"subdomain\""
}

func (t *GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_OidcSettings) GetURIFormat() *string {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_OidcSettings{}
	}
	return t.URIFormat
}
func (t *GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_OidcSettings) GetURIFormats() []*string {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_OidcSettings{}
	}
	return t.URIFormats
}
func (t *GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_OidcSettings) GetAuthMethod() *OidcAuthMethod {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_OidcSettings{}
	}
	return &t.AuthMethod
}
func (t *GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_OidcSettings) GetDomainKey() *string {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_OidcSettings{}
	}
	return t.DomainKey
}
func (t *GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_OidcSettings) GetSubdomain() *bool {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_OidcSettings{}
	}
	return t.Subdomain
}

type GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_Repository_RepositoryFragment_Publisher struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_Repository_RepositoryFragment_Publisher) GetName() string {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_Repository_RepositoryFragment_Publisher{}
	}
	return t.Name
}

type GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_Repository_RepositoryFragment_Recipes struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_Repository_RepositoryFragment_Recipes) GetName() string {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_Repository_RepositoryFragment_Recipes{}
	}
	return t.Name
}

type GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies struct {
	Type     *DependencyType "json:\"type,omitempty\" graphql:\"type\""
	Name     *string         "json:\"name,omitempty\" graphql:\"name\""
	Repo     *string         "json:\"repo,omitempty\" graphql:\"repo\""
	Optional *bool           "json:\"optional,omitempty\" graphql:\"optional\""
	Version  *string         "json:\"version,omitempty\" graphql:\"version\""
}

func (t *GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetType() *DependencyType {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Type
}
func (t *GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetName() *string {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Name
}
func (t *GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetRepo() *string {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Repo
}
func (t *GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetOptional() *bool {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Optional
}
func (t *GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetVersion() *string {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Version
}

type GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions struct {
	Instructions *string "json:\"instructions,omitempty\" graphql:\"instructions\""
	Script       *string "json:\"script,omitempty\" graphql:\"script\""
}

func (t *GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions) GetInstructions() *string {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions{}
	}
	return t.Instructions
}
func (t *GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions) GetScript() *string {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions{}
	}
	return t.Script
}

type GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings struct {
	Terraform map[string]interface{} "json:\"terraform,omitempty\" graphql:\"terraform\""
	Helm      map[string]interface{} "json:\"helm,omitempty\" graphql:\"helm\""
}

func (t *GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings) GetTerraform() map[string]interface{} {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings{}
	}
	return t.Terraform
}
func (t *GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings) GetHelm() map[string]interface{} {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings{}
	}
	return t.Helm
}

type GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition struct {
	Field     string    "json:\"field\" graphql:\"field\""
	Operation Operation "json:\"operation\" graphql:\"operation\""
	Value     *string   "json:\"value,omitempty\" graphql:\"value\""
}

func (t *GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition) GetField() string {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return t.Field
}
func (t *GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition) GetOperation() *Operation {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return &t.Operation
}
func (t *GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition) GetValue() *string {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return t.Value
}

type GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation struct {
	Type    ValidationType "json:\"type\" graphql:\"type\""
	Regex   *string        "json:\"regex,omitempty\" graphql:\"regex\""
	Message string         "json:\"message\" graphql:\"message\""
}

func (t *GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation) GetType() *ValidationType {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return &t.Type
}
func (t *GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation) GetRegex() *string {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return t.Regex
}
func (t *GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation) GetMessage() string {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return t.Message
}

type GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition struct {
	Field     string    "json:\"field\" graphql:\"field\""
	Operation Operation "json:\"operation\" graphql:\"operation\""
	Value     *string   "json:\"value,omitempty\" graphql:\"value\""
}

func (t *GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition) GetField() string {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return t.Field
}
func (t *GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition) GetOperation() *Operation {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return &t.Operation
}
func (t *GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition) GetValue() *string {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return t.Value
}

type GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation struct {
	Type    ValidationType "json:\"type\" graphql:\"type\""
	Regex   *string        "json:\"regex,omitempty\" graphql:\"regex\""
	Message string         "json:\"message\" graphql:\"message\""
}

func (t *GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation) GetType() *ValidationType {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return &t.Type
}
func (t *GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation) GetRegex() *string {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return t.Regex
}
func (t *GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation) GetMessage() string {
	if t == nil {
		t = &GetRecipeByID_Recipe_RecipeDependencies_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return t.Message
}

type GetRecipeByID_Recipe struct {
	ID                 string                                            "json:\"id\" graphql:\"id\""
	Name               string                                            "json:\"name\" graphql:\"name\""
	Primary            *bool                                             "json:\"primary,omitempty\" graphql:\"primary\""
	Description        *string                                           "json:\"description,omitempty\" graphql:\"description\""
	Restricted         *bool                                             "json:\"restricted,omitempty\" graphql:\"restricted\""
	Provider           *Provider                                         "json:\"provider,omitempty\" graphql:\"provider\""
	Tests              []*GetRecipeByID_Recipe_RecipeFragment_Tests      "json:\"tests,omitempty\" graphql:\"tests\""
	Repository         *GetRecipeByID_Recipe_RecipeFragment_Repository   "json:\"repository,omitempty\" graphql:\"repository\""
	OidcSettings       *GetRecipeByID_Recipe_RecipeFragment_OidcSettings "json:\"oidcSettings,omitempty\" graphql:\"oidcSettings\""
	RecipeSections     []*RecipeSectionFragment                          "json:\"recipeSections,omitempty\" graphql:\"recipeSections\""
	RecipeDependencies []*RecipeFragment                                 "json:\"recipeDependencies,omitempty\" graphql:\"recipeDependencies\""
}

func (t *GetRecipeByID_Recipe) GetID() string {
	if t == nil {
		t = &GetRecipeByID_Recipe{}
	}
	return t.ID
}
func (t *GetRecipeByID_Recipe) GetName() string {
	if t == nil {
		t = &GetRecipeByID_Recipe{}
	}
	return t.Name
}
func (t *GetRecipeByID_Recipe) GetPrimary() *bool {
	if t == nil {
		t = &GetRecipeByID_Recipe{}
	}
	return t.Primary
}
func (t *GetRecipeByID_Recipe) GetDescription() *string {
	if t == nil {
		t = &GetRecipeByID_Recipe{}
	}
	return t.Description
}
func (t *GetRecipeByID_Recipe) GetRestricted() *bool {
	if t == nil {
		t = &GetRecipeByID_Recipe{}
	}
	return t.Restricted
}
func (t *GetRecipeByID_Recipe) GetProvider() *Provider {
	if t == nil {
		t = &GetRecipeByID_Recipe{}
	}
	return t.Provider
}
func (t *GetRecipeByID_Recipe) GetTests() []*GetRecipeByID_Recipe_RecipeFragment_Tests {
	if t == nil {
		t = &GetRecipeByID_Recipe{}
	}
	return t.Tests
}
func (t *GetRecipeByID_Recipe) GetRepository() *GetRecipeByID_Recipe_RecipeFragment_Repository {
	if t == nil {
		t = &GetRecipeByID_Recipe{}
	}
	return t.Repository
}
func (t *GetRecipeByID_Recipe) GetOidcSettings() *GetRecipeByID_Recipe_RecipeFragment_OidcSettings {
	if t == nil {
		t = &GetRecipeByID_Recipe{}
	}
	return t.OidcSettings
}
func (t *GetRecipeByID_Recipe) GetRecipeSections() []*RecipeSectionFragment {
	if t == nil {
		t = &GetRecipeByID_Recipe{}
	}
	return t.RecipeSections
}
func (t *GetRecipeByID_Recipe) GetRecipeDependencies() []*RecipeFragment {
	if t == nil {
		t = &GetRecipeByID_Recipe{}
	}
	return t.RecipeDependencies
}

type ListRecipes_Recipes_Edges_Node_RecipeFragment_Tests_Args struct {
	Name string "json:\"name\" graphql:\"name\""
	Repo string "json:\"repo\" graphql:\"repo\""
	Key  string "json:\"key\" graphql:\"key\""
}

func (t *ListRecipes_Recipes_Edges_Node_RecipeFragment_Tests_Args) GetName() string {
	if t == nil {
		t = &ListRecipes_Recipes_Edges_Node_RecipeFragment_Tests_Args{}
	}
	return t.Name
}
func (t *ListRecipes_Recipes_Edges_Node_RecipeFragment_Tests_Args) GetRepo() string {
	if t == nil {
		t = &ListRecipes_Recipes_Edges_Node_RecipeFragment_Tests_Args{}
	}
	return t.Repo
}
func (t *ListRecipes_Recipes_Edges_Node_RecipeFragment_Tests_Args) GetKey() string {
	if t == nil {
		t = &ListRecipes_Recipes_Edges_Node_RecipeFragment_Tests_Args{}
	}
	return t.Key
}

type ListRecipes_Recipes_Edges_Node_RecipeFragment_Tests struct {
	Type    TestType                                                    "json:\"type\" graphql:\"type\""
	Name    string                                                      "json:\"name\" graphql:\"name\""
	Message *string                                                     "json:\"message,omitempty\" graphql:\"message\""
	Args    []*ListRecipes_Recipes_Edges_Node_RecipeFragment_Tests_Args "json:\"args,omitempty\" graphql:\"args\""
}

func (t *ListRecipes_Recipes_Edges_Node_RecipeFragment_Tests) GetType() *TestType {
	if t == nil {
		t = &ListRecipes_Recipes_Edges_Node_RecipeFragment_Tests{}
	}
	return &t.Type
}
func (t *ListRecipes_Recipes_Edges_Node_RecipeFragment_Tests) GetName() string {
	if t == nil {
		t = &ListRecipes_Recipes_Edges_Node_RecipeFragment_Tests{}
	}
	return t.Name
}
func (t *ListRecipes_Recipes_Edges_Node_RecipeFragment_Tests) GetMessage() *string {
	if t == nil {
		t = &ListRecipes_Recipes_Edges_Node_RecipeFragment_Tests{}
	}
	return t.Message
}
func (t *ListRecipes_Recipes_Edges_Node_RecipeFragment_Tests) GetArgs() []*ListRecipes_Recipes_Edges_Node_RecipeFragment_Tests_Args {
	if t == nil {
		t = &ListRecipes_Recipes_Edges_Node_RecipeFragment_Tests{}
	}
	return t.Args
}

type ListRecipes_Recipes_Edges_Node_RecipeFragment_Repository struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *ListRecipes_Recipes_Edges_Node_RecipeFragment_Repository) GetID() string {
	if t == nil {
		t = &ListRecipes_Recipes_Edges_Node_RecipeFragment_Repository{}
	}
	return t.ID
}
func (t *ListRecipes_Recipes_Edges_Node_RecipeFragment_Repository) GetName() string {
	if t == nil {
		t = &ListRecipes_Recipes_Edges_Node_RecipeFragment_Repository{}
	}
	return t.Name
}

type ListRecipes_Recipes_Edges_Node_RecipeFragment_OidcSettings struct {
	URIFormat  *string        "json:\"uriFormat,omitempty\" graphql:\"uriFormat\""
	URIFormats []*string      "json:\"uriFormats,omitempty\" graphql:\"uriFormats\""
	AuthMethod OidcAuthMethod "json:\"authMethod\" graphql:\"authMethod\""
	DomainKey  *string        "json:\"domainKey,omitempty\" graphql:\"domainKey\""
	Subdomain  *bool          "json:\"subdomain,omitempty\" graphql:\"subdomain\""
}

func (t *ListRecipes_Recipes_Edges_Node_RecipeFragment_OidcSettings) GetURIFormat() *string {
	if t == nil {
		t = &ListRecipes_Recipes_Edges_Node_RecipeFragment_OidcSettings{}
	}
	return t.URIFormat
}
func (t *ListRecipes_Recipes_Edges_Node_RecipeFragment_OidcSettings) GetURIFormats() []*string {
	if t == nil {
		t = &ListRecipes_Recipes_Edges_Node_RecipeFragment_OidcSettings{}
	}
	return t.URIFormats
}
func (t *ListRecipes_Recipes_Edges_Node_RecipeFragment_OidcSettings) GetAuthMethod() *OidcAuthMethod {
	if t == nil {
		t = &ListRecipes_Recipes_Edges_Node_RecipeFragment_OidcSettings{}
	}
	return &t.AuthMethod
}
func (t *ListRecipes_Recipes_Edges_Node_RecipeFragment_OidcSettings) GetDomainKey() *string {
	if t == nil {
		t = &ListRecipes_Recipes_Edges_Node_RecipeFragment_OidcSettings{}
	}
	return t.DomainKey
}
func (t *ListRecipes_Recipes_Edges_Node_RecipeFragment_OidcSettings) GetSubdomain() *bool {
	if t == nil {
		t = &ListRecipes_Recipes_Edges_Node_RecipeFragment_OidcSettings{}
	}
	return t.Subdomain
}

type ListRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_Repository_RepositoryFragment_Publisher struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *ListRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_Repository_RepositoryFragment_Publisher) GetName() string {
	if t == nil {
		t = &ListRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_Repository_RepositoryFragment_Publisher{}
	}
	return t.Name
}

type ListRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_Repository_RepositoryFragment_Recipes struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *ListRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_Repository_RepositoryFragment_Recipes) GetName() string {
	if t == nil {
		t = &ListRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_Repository_RepositoryFragment_Recipes{}
	}
	return t.Name
}

type ListRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies struct {
	Type     *DependencyType "json:\"type,omitempty\" graphql:\"type\""
	Name     *string         "json:\"name,omitempty\" graphql:\"name\""
	Repo     *string         "json:\"repo,omitempty\" graphql:\"repo\""
	Optional *bool           "json:\"optional,omitempty\" graphql:\"optional\""
	Version  *string         "json:\"version,omitempty\" graphql:\"version\""
}

func (t *ListRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetType() *DependencyType {
	if t == nil {
		t = &ListRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Type
}
func (t *ListRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetName() *string {
	if t == nil {
		t = &ListRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Name
}
func (t *ListRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetRepo() *string {
	if t == nil {
		t = &ListRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Repo
}
func (t *ListRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetOptional() *bool {
	if t == nil {
		t = &ListRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Optional
}
func (t *ListRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetVersion() *string {
	if t == nil {
		t = &ListRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Version
}

type ListRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions struct {
	Instructions *string "json:\"instructions,omitempty\" graphql:\"instructions\""
	Script       *string "json:\"script,omitempty\" graphql:\"script\""
}

func (t *ListRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions) GetInstructions() *string {
	if t == nil {
		t = &ListRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions{}
	}
	return t.Instructions
}
func (t *ListRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions) GetScript() *string {
	if t == nil {
		t = &ListRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions{}
	}
	return t.Script
}

type ListRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings struct {
	Terraform map[string]interface{} "json:\"terraform,omitempty\" graphql:\"terraform\""
	Helm      map[string]interface{} "json:\"helm,omitempty\" graphql:\"helm\""
}

func (t *ListRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings) GetTerraform() map[string]interface{} {
	if t == nil {
		t = &ListRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings{}
	}
	return t.Terraform
}
func (t *ListRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings) GetHelm() map[string]interface{} {
	if t == nil {
		t = &ListRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings{}
	}
	return t.Helm
}

type ListRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition struct {
	Field     string    "json:\"field\" graphql:\"field\""
	Operation Operation "json:\"operation\" graphql:\"operation\""
	Value     *string   "json:\"value,omitempty\" graphql:\"value\""
}

func (t *ListRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition) GetField() string {
	if t == nil {
		t = &ListRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return t.Field
}
func (t *ListRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition) GetOperation() *Operation {
	if t == nil {
		t = &ListRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return &t.Operation
}
func (t *ListRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition) GetValue() *string {
	if t == nil {
		t = &ListRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return t.Value
}

type ListRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation struct {
	Type    ValidationType "json:\"type\" graphql:\"type\""
	Regex   *string        "json:\"regex,omitempty\" graphql:\"regex\""
	Message string         "json:\"message\" graphql:\"message\""
}

func (t *ListRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation) GetType() *ValidationType {
	if t == nil {
		t = &ListRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return &t.Type
}
func (t *ListRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation) GetRegex() *string {
	if t == nil {
		t = &ListRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return t.Regex
}
func (t *ListRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation) GetMessage() string {
	if t == nil {
		t = &ListRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return t.Message
}

type ListRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition struct {
	Field     string    "json:\"field\" graphql:\"field\""
	Operation Operation "json:\"operation\" graphql:\"operation\""
	Value     *string   "json:\"value,omitempty\" graphql:\"value\""
}

func (t *ListRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition) GetField() string {
	if t == nil {
		t = &ListRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return t.Field
}
func (t *ListRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition) GetOperation() *Operation {
	if t == nil {
		t = &ListRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return &t.Operation
}
func (t *ListRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition) GetValue() *string {
	if t == nil {
		t = &ListRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return t.Value
}

type ListRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation struct {
	Type    ValidationType "json:\"type\" graphql:\"type\""
	Regex   *string        "json:\"regex,omitempty\" graphql:\"regex\""
	Message string         "json:\"message\" graphql:\"message\""
}

func (t *ListRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation) GetType() *ValidationType {
	if t == nil {
		t = &ListRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return &t.Type
}
func (t *ListRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation) GetRegex() *string {
	if t == nil {
		t = &ListRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return t.Regex
}
func (t *ListRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation) GetMessage() string {
	if t == nil {
		t = &ListRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return t.Message
}

type ListRecipes_Recipes_Edges struct {
	Node *RecipeFragment "json:\"node,omitempty\" graphql:\"node\""
}

func (t *ListRecipes_Recipes_Edges) GetNode() *RecipeFragment {
	if t == nil {
		t = &ListRecipes_Recipes_Edges{}
	}
	return t.Node
}

type ListRecipes_Recipes struct {
	Edges []*ListRecipes_Recipes_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *ListRecipes_Recipes) GetEdges() []*ListRecipes_Recipes_Edges {
	if t == nil {
		t = &ListRecipes_Recipes{}
	}
	return t.Edges
}

type ListAllRecipes_Recipes_Edges_Node_RecipeFragment_Tests_Args struct {
	Name string "json:\"name\" graphql:\"name\""
	Repo string "json:\"repo\" graphql:\"repo\""
	Key  string "json:\"key\" graphql:\"key\""
}

func (t *ListAllRecipes_Recipes_Edges_Node_RecipeFragment_Tests_Args) GetName() string {
	if t == nil {
		t = &ListAllRecipes_Recipes_Edges_Node_RecipeFragment_Tests_Args{}
	}
	return t.Name
}
func (t *ListAllRecipes_Recipes_Edges_Node_RecipeFragment_Tests_Args) GetRepo() string {
	if t == nil {
		t = &ListAllRecipes_Recipes_Edges_Node_RecipeFragment_Tests_Args{}
	}
	return t.Repo
}
func (t *ListAllRecipes_Recipes_Edges_Node_RecipeFragment_Tests_Args) GetKey() string {
	if t == nil {
		t = &ListAllRecipes_Recipes_Edges_Node_RecipeFragment_Tests_Args{}
	}
	return t.Key
}

type ListAllRecipes_Recipes_Edges_Node_RecipeFragment_Tests struct {
	Type    TestType                                                       "json:\"type\" graphql:\"type\""
	Name    string                                                         "json:\"name\" graphql:\"name\""
	Message *string                                                        "json:\"message,omitempty\" graphql:\"message\""
	Args    []*ListAllRecipes_Recipes_Edges_Node_RecipeFragment_Tests_Args "json:\"args,omitempty\" graphql:\"args\""
}

func (t *ListAllRecipes_Recipes_Edges_Node_RecipeFragment_Tests) GetType() *TestType {
	if t == nil {
		t = &ListAllRecipes_Recipes_Edges_Node_RecipeFragment_Tests{}
	}
	return &t.Type
}
func (t *ListAllRecipes_Recipes_Edges_Node_RecipeFragment_Tests) GetName() string {
	if t == nil {
		t = &ListAllRecipes_Recipes_Edges_Node_RecipeFragment_Tests{}
	}
	return t.Name
}
func (t *ListAllRecipes_Recipes_Edges_Node_RecipeFragment_Tests) GetMessage() *string {
	if t == nil {
		t = &ListAllRecipes_Recipes_Edges_Node_RecipeFragment_Tests{}
	}
	return t.Message
}
func (t *ListAllRecipes_Recipes_Edges_Node_RecipeFragment_Tests) GetArgs() []*ListAllRecipes_Recipes_Edges_Node_RecipeFragment_Tests_Args {
	if t == nil {
		t = &ListAllRecipes_Recipes_Edges_Node_RecipeFragment_Tests{}
	}
	return t.Args
}

type ListAllRecipes_Recipes_Edges_Node_RecipeFragment_Repository struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *ListAllRecipes_Recipes_Edges_Node_RecipeFragment_Repository) GetID() string {
	if t == nil {
		t = &ListAllRecipes_Recipes_Edges_Node_RecipeFragment_Repository{}
	}
	return t.ID
}
func (t *ListAllRecipes_Recipes_Edges_Node_RecipeFragment_Repository) GetName() string {
	if t == nil {
		t = &ListAllRecipes_Recipes_Edges_Node_RecipeFragment_Repository{}
	}
	return t.Name
}

type ListAllRecipes_Recipes_Edges_Node_RecipeFragment_OidcSettings struct {
	URIFormat  *string        "json:\"uriFormat,omitempty\" graphql:\"uriFormat\""
	URIFormats []*string      "json:\"uriFormats,omitempty\" graphql:\"uriFormats\""
	AuthMethod OidcAuthMethod "json:\"authMethod\" graphql:\"authMethod\""
	DomainKey  *string        "json:\"domainKey,omitempty\" graphql:\"domainKey\""
	Subdomain  *bool          "json:\"subdomain,omitempty\" graphql:\"subdomain\""
}

func (t *ListAllRecipes_Recipes_Edges_Node_RecipeFragment_OidcSettings) GetURIFormat() *string {
	if t == nil {
		t = &ListAllRecipes_Recipes_Edges_Node_RecipeFragment_OidcSettings{}
	}
	return t.URIFormat
}
func (t *ListAllRecipes_Recipes_Edges_Node_RecipeFragment_OidcSettings) GetURIFormats() []*string {
	if t == nil {
		t = &ListAllRecipes_Recipes_Edges_Node_RecipeFragment_OidcSettings{}
	}
	return t.URIFormats
}
func (t *ListAllRecipes_Recipes_Edges_Node_RecipeFragment_OidcSettings) GetAuthMethod() *OidcAuthMethod {
	if t == nil {
		t = &ListAllRecipes_Recipes_Edges_Node_RecipeFragment_OidcSettings{}
	}
	return &t.AuthMethod
}
func (t *ListAllRecipes_Recipes_Edges_Node_RecipeFragment_OidcSettings) GetDomainKey() *string {
	if t == nil {
		t = &ListAllRecipes_Recipes_Edges_Node_RecipeFragment_OidcSettings{}
	}
	return t.DomainKey
}
func (t *ListAllRecipes_Recipes_Edges_Node_RecipeFragment_OidcSettings) GetSubdomain() *bool {
	if t == nil {
		t = &ListAllRecipes_Recipes_Edges_Node_RecipeFragment_OidcSettings{}
	}
	return t.Subdomain
}

type ListAllRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_Repository_RepositoryFragment_Publisher struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *ListAllRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_Repository_RepositoryFragment_Publisher) GetName() string {
	if t == nil {
		t = &ListAllRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_Repository_RepositoryFragment_Publisher{}
	}
	return t.Name
}

type ListAllRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_Repository_RepositoryFragment_Recipes struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *ListAllRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_Repository_RepositoryFragment_Recipes) GetName() string {
	if t == nil {
		t = &ListAllRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_Repository_RepositoryFragment_Recipes{}
	}
	return t.Name
}

type ListAllRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies struct {
	Type     *DependencyType "json:\"type,omitempty\" graphql:\"type\""
	Name     *string         "json:\"name,omitempty\" graphql:\"name\""
	Repo     *string         "json:\"repo,omitempty\" graphql:\"repo\""
	Optional *bool           "json:\"optional,omitempty\" graphql:\"optional\""
	Version  *string         "json:\"version,omitempty\" graphql:\"version\""
}

func (t *ListAllRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetType() *DependencyType {
	if t == nil {
		t = &ListAllRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Type
}
func (t *ListAllRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetName() *string {
	if t == nil {
		t = &ListAllRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Name
}
func (t *ListAllRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetRepo() *string {
	if t == nil {
		t = &ListAllRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Repo
}
func (t *ListAllRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetOptional() *bool {
	if t == nil {
		t = &ListAllRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Optional
}
func (t *ListAllRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetVersion() *string {
	if t == nil {
		t = &ListAllRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Version
}

type ListAllRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions struct {
	Instructions *string "json:\"instructions,omitempty\" graphql:\"instructions\""
	Script       *string "json:\"script,omitempty\" graphql:\"script\""
}

func (t *ListAllRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions) GetInstructions() *string {
	if t == nil {
		t = &ListAllRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions{}
	}
	return t.Instructions
}
func (t *ListAllRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions) GetScript() *string {
	if t == nil {
		t = &ListAllRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions{}
	}
	return t.Script
}

type ListAllRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings struct {
	Terraform map[string]interface{} "json:\"terraform,omitempty\" graphql:\"terraform\""
	Helm      map[string]interface{} "json:\"helm,omitempty\" graphql:\"helm\""
}

func (t *ListAllRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings) GetTerraform() map[string]interface{} {
	if t == nil {
		t = &ListAllRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings{}
	}
	return t.Terraform
}
func (t *ListAllRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings) GetHelm() map[string]interface{} {
	if t == nil {
		t = &ListAllRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings{}
	}
	return t.Helm
}

type ListAllRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition struct {
	Field     string    "json:\"field\" graphql:\"field\""
	Operation Operation "json:\"operation\" graphql:\"operation\""
	Value     *string   "json:\"value,omitempty\" graphql:\"value\""
}

func (t *ListAllRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition) GetField() string {
	if t == nil {
		t = &ListAllRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return t.Field
}
func (t *ListAllRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition) GetOperation() *Operation {
	if t == nil {
		t = &ListAllRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return &t.Operation
}
func (t *ListAllRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition) GetValue() *string {
	if t == nil {
		t = &ListAllRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return t.Value
}

type ListAllRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation struct {
	Type    ValidationType "json:\"type\" graphql:\"type\""
	Regex   *string        "json:\"regex,omitempty\" graphql:\"regex\""
	Message string         "json:\"message\" graphql:\"message\""
}

func (t *ListAllRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation) GetType() *ValidationType {
	if t == nil {
		t = &ListAllRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return &t.Type
}
func (t *ListAllRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation) GetRegex() *string {
	if t == nil {
		t = &ListAllRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return t.Regex
}
func (t *ListAllRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation) GetMessage() string {
	if t == nil {
		t = &ListAllRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return t.Message
}

type ListAllRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition struct {
	Field     string    "json:\"field\" graphql:\"field\""
	Operation Operation "json:\"operation\" graphql:\"operation\""
	Value     *string   "json:\"value,omitempty\" graphql:\"value\""
}

func (t *ListAllRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition) GetField() string {
	if t == nil {
		t = &ListAllRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return t.Field
}
func (t *ListAllRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition) GetOperation() *Operation {
	if t == nil {
		t = &ListAllRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return &t.Operation
}
func (t *ListAllRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition) GetValue() *string {
	if t == nil {
		t = &ListAllRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return t.Value
}

type ListAllRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation struct {
	Type    ValidationType "json:\"type\" graphql:\"type\""
	Regex   *string        "json:\"regex,omitempty\" graphql:\"regex\""
	Message string         "json:\"message\" graphql:\"message\""
}

func (t *ListAllRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation) GetType() *ValidationType {
	if t == nil {
		t = &ListAllRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return &t.Type
}
func (t *ListAllRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation) GetRegex() *string {
	if t == nil {
		t = &ListAllRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return t.Regex
}
func (t *ListAllRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation) GetMessage() string {
	if t == nil {
		t = &ListAllRecipes_Recipes_Edges_Node_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return t.Message
}

type ListAllRecipes_Recipes_Edges struct {
	Node *RecipeFragment "json:\"node,omitempty\" graphql:\"node\""
}

func (t *ListAllRecipes_Recipes_Edges) GetNode() *RecipeFragment {
	if t == nil {
		t = &ListAllRecipes_Recipes_Edges{}
	}
	return t.Node
}

type ListAllRecipes_Recipes struct {
	Edges []*ListAllRecipes_Recipes_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *ListAllRecipes_Recipes) GetEdges() []*ListAllRecipes_Recipes_Edges {
	if t == nil {
		t = &ListAllRecipes_Recipes{}
	}
	return t.Edges
}

type CreateRecipe_CreateRecipe struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateRecipe_CreateRecipe) GetID() string {
	if t == nil {
		t = &CreateRecipe_CreateRecipe{}
	}
	return t.ID
}

type InstallRecipe_InstallRecipe struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *InstallRecipe_InstallRecipe) GetID() string {
	if t == nil {
		t = &InstallRecipe_InstallRecipe{}
	}
	return t.ID
}

type CreateStack_CreateStack struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateStack_CreateStack) GetID() string {
	if t == nil {
		t = &CreateStack_CreateStack{}
	}
	return t.ID
}

type GetStack_Stack_StackFragment_Bundles_RecipeFragment_Tests_Args struct {
	Name string "json:\"name\" graphql:\"name\""
	Repo string "json:\"repo\" graphql:\"repo\""
	Key  string "json:\"key\" graphql:\"key\""
}

func (t *GetStack_Stack_StackFragment_Bundles_RecipeFragment_Tests_Args) GetName() string {
	if t == nil {
		t = &GetStack_Stack_StackFragment_Bundles_RecipeFragment_Tests_Args{}
	}
	return t.Name
}
func (t *GetStack_Stack_StackFragment_Bundles_RecipeFragment_Tests_Args) GetRepo() string {
	if t == nil {
		t = &GetStack_Stack_StackFragment_Bundles_RecipeFragment_Tests_Args{}
	}
	return t.Repo
}
func (t *GetStack_Stack_StackFragment_Bundles_RecipeFragment_Tests_Args) GetKey() string {
	if t == nil {
		t = &GetStack_Stack_StackFragment_Bundles_RecipeFragment_Tests_Args{}
	}
	return t.Key
}

type GetStack_Stack_StackFragment_Bundles_RecipeFragment_Tests struct {
	Type    TestType                                                          "json:\"type\" graphql:\"type\""
	Name    string                                                            "json:\"name\" graphql:\"name\""
	Message *string                                                           "json:\"message,omitempty\" graphql:\"message\""
	Args    []*GetStack_Stack_StackFragment_Bundles_RecipeFragment_Tests_Args "json:\"args,omitempty\" graphql:\"args\""
}

func (t *GetStack_Stack_StackFragment_Bundles_RecipeFragment_Tests) GetType() *TestType {
	if t == nil {
		t = &GetStack_Stack_StackFragment_Bundles_RecipeFragment_Tests{}
	}
	return &t.Type
}
func (t *GetStack_Stack_StackFragment_Bundles_RecipeFragment_Tests) GetName() string {
	if t == nil {
		t = &GetStack_Stack_StackFragment_Bundles_RecipeFragment_Tests{}
	}
	return t.Name
}
func (t *GetStack_Stack_StackFragment_Bundles_RecipeFragment_Tests) GetMessage() *string {
	if t == nil {
		t = &GetStack_Stack_StackFragment_Bundles_RecipeFragment_Tests{}
	}
	return t.Message
}
func (t *GetStack_Stack_StackFragment_Bundles_RecipeFragment_Tests) GetArgs() []*GetStack_Stack_StackFragment_Bundles_RecipeFragment_Tests_Args {
	if t == nil {
		t = &GetStack_Stack_StackFragment_Bundles_RecipeFragment_Tests{}
	}
	return t.Args
}

type GetStack_Stack_StackFragment_Bundles_RecipeFragment_Repository struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetStack_Stack_StackFragment_Bundles_RecipeFragment_Repository) GetID() string {
	if t == nil {
		t = &GetStack_Stack_StackFragment_Bundles_RecipeFragment_Repository{}
	}
	return t.ID
}
func (t *GetStack_Stack_StackFragment_Bundles_RecipeFragment_Repository) GetName() string {
	if t == nil {
		t = &GetStack_Stack_StackFragment_Bundles_RecipeFragment_Repository{}
	}
	return t.Name
}

type GetStack_Stack_StackFragment_Bundles_RecipeFragment_OidcSettings struct {
	URIFormat  *string        "json:\"uriFormat,omitempty\" graphql:\"uriFormat\""
	URIFormats []*string      "json:\"uriFormats,omitempty\" graphql:\"uriFormats\""
	AuthMethod OidcAuthMethod "json:\"authMethod\" graphql:\"authMethod\""
	DomainKey  *string        "json:\"domainKey,omitempty\" graphql:\"domainKey\""
	Subdomain  *bool          "json:\"subdomain,omitempty\" graphql:\"subdomain\""
}

func (t *GetStack_Stack_StackFragment_Bundles_RecipeFragment_OidcSettings) GetURIFormat() *string {
	if t == nil {
		t = &GetStack_Stack_StackFragment_Bundles_RecipeFragment_OidcSettings{}
	}
	return t.URIFormat
}
func (t *GetStack_Stack_StackFragment_Bundles_RecipeFragment_OidcSettings) GetURIFormats() []*string {
	if t == nil {
		t = &GetStack_Stack_StackFragment_Bundles_RecipeFragment_OidcSettings{}
	}
	return t.URIFormats
}
func (t *GetStack_Stack_StackFragment_Bundles_RecipeFragment_OidcSettings) GetAuthMethod() *OidcAuthMethod {
	if t == nil {
		t = &GetStack_Stack_StackFragment_Bundles_RecipeFragment_OidcSettings{}
	}
	return &t.AuthMethod
}
func (t *GetStack_Stack_StackFragment_Bundles_RecipeFragment_OidcSettings) GetDomainKey() *string {
	if t == nil {
		t = &GetStack_Stack_StackFragment_Bundles_RecipeFragment_OidcSettings{}
	}
	return t.DomainKey
}
func (t *GetStack_Stack_StackFragment_Bundles_RecipeFragment_OidcSettings) GetSubdomain() *bool {
	if t == nil {
		t = &GetStack_Stack_StackFragment_Bundles_RecipeFragment_OidcSettings{}
	}
	return t.Subdomain
}

type GetStack_Stack_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_Repository_RepositoryFragment_Publisher struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetStack_Stack_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_Repository_RepositoryFragment_Publisher) GetName() string {
	if t == nil {
		t = &GetStack_Stack_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_Repository_RepositoryFragment_Publisher{}
	}
	return t.Name
}

type GetStack_Stack_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_Repository_RepositoryFragment_Recipes struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetStack_Stack_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_Repository_RepositoryFragment_Recipes) GetName() string {
	if t == nil {
		t = &GetStack_Stack_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_Repository_RepositoryFragment_Recipes{}
	}
	return t.Name
}

type GetStack_Stack_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies struct {
	Type     *DependencyType "json:\"type,omitempty\" graphql:\"type\""
	Name     *string         "json:\"name,omitempty\" graphql:\"name\""
	Repo     *string         "json:\"repo,omitempty\" graphql:\"repo\""
	Optional *bool           "json:\"optional,omitempty\" graphql:\"optional\""
	Version  *string         "json:\"version,omitempty\" graphql:\"version\""
}

func (t *GetStack_Stack_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetType() *DependencyType {
	if t == nil {
		t = &GetStack_Stack_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Type
}
func (t *GetStack_Stack_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetName() *string {
	if t == nil {
		t = &GetStack_Stack_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Name
}
func (t *GetStack_Stack_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetRepo() *string {
	if t == nil {
		t = &GetStack_Stack_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Repo
}
func (t *GetStack_Stack_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetOptional() *bool {
	if t == nil {
		t = &GetStack_Stack_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Optional
}
func (t *GetStack_Stack_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetVersion() *string {
	if t == nil {
		t = &GetStack_Stack_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Version
}

type GetStack_Stack_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions struct {
	Instructions *string "json:\"instructions,omitempty\" graphql:\"instructions\""
	Script       *string "json:\"script,omitempty\" graphql:\"script\""
}

func (t *GetStack_Stack_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions) GetInstructions() *string {
	if t == nil {
		t = &GetStack_Stack_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions{}
	}
	return t.Instructions
}
func (t *GetStack_Stack_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions) GetScript() *string {
	if t == nil {
		t = &GetStack_Stack_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions{}
	}
	return t.Script
}

type GetStack_Stack_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings struct {
	Terraform map[string]interface{} "json:\"terraform,omitempty\" graphql:\"terraform\""
	Helm      map[string]interface{} "json:\"helm,omitempty\" graphql:\"helm\""
}

func (t *GetStack_Stack_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings) GetTerraform() map[string]interface{} {
	if t == nil {
		t = &GetStack_Stack_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings{}
	}
	return t.Terraform
}
func (t *GetStack_Stack_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings) GetHelm() map[string]interface{} {
	if t == nil {
		t = &GetStack_Stack_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings{}
	}
	return t.Helm
}

type GetStack_Stack_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition struct {
	Field     string    "json:\"field\" graphql:\"field\""
	Operation Operation "json:\"operation\" graphql:\"operation\""
	Value     *string   "json:\"value,omitempty\" graphql:\"value\""
}

func (t *GetStack_Stack_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition) GetField() string {
	if t == nil {
		t = &GetStack_Stack_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return t.Field
}
func (t *GetStack_Stack_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition) GetOperation() *Operation {
	if t == nil {
		t = &GetStack_Stack_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return &t.Operation
}
func (t *GetStack_Stack_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition) GetValue() *string {
	if t == nil {
		t = &GetStack_Stack_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return t.Value
}

type GetStack_Stack_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation struct {
	Type    ValidationType "json:\"type\" graphql:\"type\""
	Regex   *string        "json:\"regex,omitempty\" graphql:\"regex\""
	Message string         "json:\"message\" graphql:\"message\""
}

func (t *GetStack_Stack_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation) GetType() *ValidationType {
	if t == nil {
		t = &GetStack_Stack_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return &t.Type
}
func (t *GetStack_Stack_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation) GetRegex() *string {
	if t == nil {
		t = &GetStack_Stack_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return t.Regex
}
func (t *GetStack_Stack_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation) GetMessage() string {
	if t == nil {
		t = &GetStack_Stack_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return t.Message
}

type GetStack_Stack_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition struct {
	Field     string    "json:\"field\" graphql:\"field\""
	Operation Operation "json:\"operation\" graphql:\"operation\""
	Value     *string   "json:\"value,omitempty\" graphql:\"value\""
}

func (t *GetStack_Stack_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition) GetField() string {
	if t == nil {
		t = &GetStack_Stack_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return t.Field
}
func (t *GetStack_Stack_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition) GetOperation() *Operation {
	if t == nil {
		t = &GetStack_Stack_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return &t.Operation
}
func (t *GetStack_Stack_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition) GetValue() *string {
	if t == nil {
		t = &GetStack_Stack_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return t.Value
}

type GetStack_Stack_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation struct {
	Type    ValidationType "json:\"type\" graphql:\"type\""
	Regex   *string        "json:\"regex,omitempty\" graphql:\"regex\""
	Message string         "json:\"message\" graphql:\"message\""
}

func (t *GetStack_Stack_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation) GetType() *ValidationType {
	if t == nil {
		t = &GetStack_Stack_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return &t.Type
}
func (t *GetStack_Stack_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation) GetRegex() *string {
	if t == nil {
		t = &GetStack_Stack_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return t.Regex
}
func (t *GetStack_Stack_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation) GetMessage() string {
	if t == nil {
		t = &GetStack_Stack_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return t.Message
}

type ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_Tests_Args struct {
	Name string "json:\"name\" graphql:\"name\""
	Repo string "json:\"repo\" graphql:\"repo\""
	Key  string "json:\"key\" graphql:\"key\""
}

func (t *ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_Tests_Args) GetName() string {
	if t == nil {
		t = &ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_Tests_Args{}
	}
	return t.Name
}
func (t *ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_Tests_Args) GetRepo() string {
	if t == nil {
		t = &ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_Tests_Args{}
	}
	return t.Repo
}
func (t *ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_Tests_Args) GetKey() string {
	if t == nil {
		t = &ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_Tests_Args{}
	}
	return t.Key
}

type ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_Tests struct {
	Type    TestType                                                                        "json:\"type\" graphql:\"type\""
	Name    string                                                                          "json:\"name\" graphql:\"name\""
	Message *string                                                                         "json:\"message,omitempty\" graphql:\"message\""
	Args    []*ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_Tests_Args "json:\"args,omitempty\" graphql:\"args\""
}

func (t *ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_Tests) GetType() *TestType {
	if t == nil {
		t = &ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_Tests{}
	}
	return &t.Type
}
func (t *ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_Tests) GetName() string {
	if t == nil {
		t = &ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_Tests{}
	}
	return t.Name
}
func (t *ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_Tests) GetMessage() *string {
	if t == nil {
		t = &ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_Tests{}
	}
	return t.Message
}
func (t *ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_Tests) GetArgs() []*ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_Tests_Args {
	if t == nil {
		t = &ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_Tests{}
	}
	return t.Args
}

type ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_Repository struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_Repository) GetID() string {
	if t == nil {
		t = &ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_Repository{}
	}
	return t.ID
}
func (t *ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_Repository) GetName() string {
	if t == nil {
		t = &ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_Repository{}
	}
	return t.Name
}

type ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_OidcSettings struct {
	URIFormat  *string        "json:\"uriFormat,omitempty\" graphql:\"uriFormat\""
	URIFormats []*string      "json:\"uriFormats,omitempty\" graphql:\"uriFormats\""
	AuthMethod OidcAuthMethod "json:\"authMethod\" graphql:\"authMethod\""
	DomainKey  *string        "json:\"domainKey,omitempty\" graphql:\"domainKey\""
	Subdomain  *bool          "json:\"subdomain,omitempty\" graphql:\"subdomain\""
}

func (t *ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_OidcSettings) GetURIFormat() *string {
	if t == nil {
		t = &ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_OidcSettings{}
	}
	return t.URIFormat
}
func (t *ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_OidcSettings) GetURIFormats() []*string {
	if t == nil {
		t = &ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_OidcSettings{}
	}
	return t.URIFormats
}
func (t *ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_OidcSettings) GetAuthMethod() *OidcAuthMethod {
	if t == nil {
		t = &ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_OidcSettings{}
	}
	return &t.AuthMethod
}
func (t *ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_OidcSettings) GetDomainKey() *string {
	if t == nil {
		t = &ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_OidcSettings{}
	}
	return t.DomainKey
}
func (t *ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_OidcSettings) GetSubdomain() *bool {
	if t == nil {
		t = &ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_OidcSettings{}
	}
	return t.Subdomain
}

type ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_Repository_RepositoryFragment_Publisher struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_Repository_RepositoryFragment_Publisher) GetName() string {
	if t == nil {
		t = &ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_Repository_RepositoryFragment_Publisher{}
	}
	return t.Name
}

type ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_Repository_RepositoryFragment_Recipes struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_Repository_RepositoryFragment_Recipes) GetName() string {
	if t == nil {
		t = &ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_Repository_RepositoryFragment_Recipes{}
	}
	return t.Name
}

type ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies struct {
	Type     *DependencyType "json:\"type,omitempty\" graphql:\"type\""
	Name     *string         "json:\"name,omitempty\" graphql:\"name\""
	Repo     *string         "json:\"repo,omitempty\" graphql:\"repo\""
	Optional *bool           "json:\"optional,omitempty\" graphql:\"optional\""
	Version  *string         "json:\"version,omitempty\" graphql:\"version\""
}

func (t *ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetType() *DependencyType {
	if t == nil {
		t = &ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Type
}
func (t *ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetName() *string {
	if t == nil {
		t = &ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Name
}
func (t *ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetRepo() *string {
	if t == nil {
		t = &ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Repo
}
func (t *ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetOptional() *bool {
	if t == nil {
		t = &ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Optional
}
func (t *ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetVersion() *string {
	if t == nil {
		t = &ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Version
}

type ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions struct {
	Instructions *string "json:\"instructions,omitempty\" graphql:\"instructions\""
	Script       *string "json:\"script,omitempty\" graphql:\"script\""
}

func (t *ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions) GetInstructions() *string {
	if t == nil {
		t = &ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions{}
	}
	return t.Instructions
}
func (t *ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions) GetScript() *string {
	if t == nil {
		t = &ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions{}
	}
	return t.Script
}

type ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings struct {
	Terraform map[string]interface{} "json:\"terraform,omitempty\" graphql:\"terraform\""
	Helm      map[string]interface{} "json:\"helm,omitempty\" graphql:\"helm\""
}

func (t *ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings) GetTerraform() map[string]interface{} {
	if t == nil {
		t = &ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings{}
	}
	return t.Terraform
}
func (t *ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings) GetHelm() map[string]interface{} {
	if t == nil {
		t = &ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings{}
	}
	return t.Helm
}

type ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition struct {
	Field     string    "json:\"field\" graphql:\"field\""
	Operation Operation "json:\"operation\" graphql:\"operation\""
	Value     *string   "json:\"value,omitempty\" graphql:\"value\""
}

func (t *ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition) GetField() string {
	if t == nil {
		t = &ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return t.Field
}
func (t *ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition) GetOperation() *Operation {
	if t == nil {
		t = &ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return &t.Operation
}
func (t *ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition) GetValue() *string {
	if t == nil {
		t = &ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return t.Value
}

type ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation struct {
	Type    ValidationType "json:\"type\" graphql:\"type\""
	Regex   *string        "json:\"regex,omitempty\" graphql:\"regex\""
	Message string         "json:\"message\" graphql:\"message\""
}

func (t *ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation) GetType() *ValidationType {
	if t == nil {
		t = &ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return &t.Type
}
func (t *ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation) GetRegex() *string {
	if t == nil {
		t = &ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return t.Regex
}
func (t *ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation) GetMessage() string {
	if t == nil {
		t = &ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_RecipeItems_RecipeItemFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return t.Message
}

type ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition struct {
	Field     string    "json:\"field\" graphql:\"field\""
	Operation Operation "json:\"operation\" graphql:\"operation\""
	Value     *string   "json:\"value,omitempty\" graphql:\"value\""
}

func (t *ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition) GetField() string {
	if t == nil {
		t = &ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return t.Field
}
func (t *ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition) GetOperation() *Operation {
	if t == nil {
		t = &ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return &t.Operation
}
func (t *ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition) GetValue() *string {
	if t == nil {
		t = &ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Condition{}
	}
	return t.Value
}

type ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation struct {
	Type    ValidationType "json:\"type\" graphql:\"type\""
	Regex   *string        "json:\"regex,omitempty\" graphql:\"regex\""
	Message string         "json:\"message\" graphql:\"message\""
}

func (t *ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation) GetType() *ValidationType {
	if t == nil {
		t = &ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return &t.Type
}
func (t *ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation) GetRegex() *string {
	if t == nil {
		t = &ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return t.Regex
}
func (t *ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation) GetMessage() string {
	if t == nil {
		t = &ListStacks_Stacks_Edges_Node_StackFragment_Bundles_RecipeFragment_RecipeSections_RecipeSectionFragment_Configuration_RecipeConfigurationFragment_Validation{}
	}
	return t.Message
}

type ListStacks_Stacks_Edges struct {
	Node *StackFragment "json:\"node,omitempty\" graphql:\"node\""
}

func (t *ListStacks_Stacks_Edges) GetNode() *StackFragment {
	if t == nil {
		t = &ListStacks_Stacks_Edges{}
	}
	return t.Node
}

type ListStacks_Stacks struct {
	Edges []*ListStacks_Stacks_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *ListStacks_Stacks) GetEdges() []*ListStacks_Stacks_Edges {
	if t == nil {
		t = &ListStacks_Stacks{}
	}
	return t.Edges
}

type GetRepository_Repository_RepositoryFragment_Publisher struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetRepository_Repository_RepositoryFragment_Publisher) GetName() string {
	if t == nil {
		t = &GetRepository_Repository_RepositoryFragment_Publisher{}
	}
	return t.Name
}

type GetRepository_Repository_RepositoryFragment_Recipes struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetRepository_Repository_RepositoryFragment_Recipes) GetName() string {
	if t == nil {
		t = &GetRepository_Repository_RepositoryFragment_Recipes{}
	}
	return t.Name
}

type CreateResourceDefinition_UpdateRepository struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateResourceDefinition_UpdateRepository) GetID() string {
	if t == nil {
		t = &CreateResourceDefinition_UpdateRepository{}
	}
	return t.ID
}

type CreateIntegration_CreateIntegration struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateIntegration_CreateIntegration) GetID() string {
	if t == nil {
		t = &CreateIntegration_CreateIntegration{}
	}
	return t.ID
}

type UpdateRepository_UpdateRepository struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateRepository_UpdateRepository) GetID() string {
	if t == nil {
		t = &UpdateRepository_UpdateRepository{}
	}
	return t.ID
}

type CreateRepository_UpsertRepository struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateRepository_UpsertRepository) GetID() string {
	if t == nil {
		t = &CreateRepository_UpsertRepository{}
	}
	return t.ID
}

type ListRepositories_Repositories_Edges_Node_RepositoryFragment_Publisher struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *ListRepositories_Repositories_Edges_Node_RepositoryFragment_Publisher) GetName() string {
	if t == nil {
		t = &ListRepositories_Repositories_Edges_Node_RepositoryFragment_Publisher{}
	}
	return t.Name
}

type ListRepositories_Repositories_Edges_Node_RepositoryFragment_Recipes struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *ListRepositories_Repositories_Edges_Node_RepositoryFragment_Recipes) GetName() string {
	if t == nil {
		t = &ListRepositories_Repositories_Edges_Node_RepositoryFragment_Recipes{}
	}
	return t.Name
}

type ListRepositories_Repositories_Edges struct {
	Node *RepositoryFragment "json:\"node,omitempty\" graphql:\"node\""
}

func (t *ListRepositories_Repositories_Edges) GetNode() *RepositoryFragment {
	if t == nil {
		t = &ListRepositories_Repositories_Edges{}
	}
	return t.Node
}

type ListRepositories_Repositories struct {
	Edges []*ListRepositories_Repositories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *ListRepositories_Repositories) GetEdges() []*ListRepositories_Repositories_Edges {
	if t == nil {
		t = &ListRepositories_Repositories{}
	}
	return t.Edges
}

type Scaffolds_Scaffold struct {
	Path    *string "json:\"path,omitempty\" graphql:\"path\""
	Content *string "json:\"content,omitempty\" graphql:\"content\""
}

func (t *Scaffolds_Scaffold) GetPath() *string {
	if t == nil {
		t = &Scaffolds_Scaffold{}
	}
	return t.Path
}
func (t *Scaffolds_Scaffold) GetContent() *string {
	if t == nil {
		t = &Scaffolds_Scaffold{}
	}
	return t.Content
}

type DeleteRepository_DeleteRepository struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *DeleteRepository_DeleteRepository) GetID() string {
	if t == nil {
		t = &DeleteRepository_DeleteRepository{}
	}
	return t.ID
}

type GetTfProviderScaffold_TerraformProvider struct {
	Name    *Provider "json:\"name,omitempty\" graphql:\"name\""
	Content *string   "json:\"content,omitempty\" graphql:\"content\""
}

func (t *GetTfProviderScaffold_TerraformProvider) GetName() *Provider {
	if t == nil {
		t = &GetTfProviderScaffold_TerraformProvider{}
	}
	return t.Name
}
func (t *GetTfProviderScaffold_TerraformProvider) GetContent() *string {
	if t == nil {
		t = &GetTfProviderScaffold_TerraformProvider{}
	}
	return t.Content
}

type GetTerraform_Terraform_Edges_Node_TerraformFragment_Dependencies_DependenciesFragment_Dependencies struct {
	Type     *DependencyType "json:\"type,omitempty\" graphql:\"type\""
	Name     *string         "json:\"name,omitempty\" graphql:\"name\""
	Repo     *string         "json:\"repo,omitempty\" graphql:\"repo\""
	Optional *bool           "json:\"optional,omitempty\" graphql:\"optional\""
	Version  *string         "json:\"version,omitempty\" graphql:\"version\""
}

func (t *GetTerraform_Terraform_Edges_Node_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetType() *DependencyType {
	if t == nil {
		t = &GetTerraform_Terraform_Edges_Node_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Type
}
func (t *GetTerraform_Terraform_Edges_Node_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetName() *string {
	if t == nil {
		t = &GetTerraform_Terraform_Edges_Node_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Name
}
func (t *GetTerraform_Terraform_Edges_Node_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetRepo() *string {
	if t == nil {
		t = &GetTerraform_Terraform_Edges_Node_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Repo
}
func (t *GetTerraform_Terraform_Edges_Node_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetOptional() *bool {
	if t == nil {
		t = &GetTerraform_Terraform_Edges_Node_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Optional
}
func (t *GetTerraform_Terraform_Edges_Node_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetVersion() *string {
	if t == nil {
		t = &GetTerraform_Terraform_Edges_Node_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Version
}

type GetTerraform_Terraform_Edges_Node_TerraformFragment_Dependencies_DependenciesFragment_Instructions struct {
	Instructions *string "json:\"instructions,omitempty\" graphql:\"instructions\""
	Script       *string "json:\"script,omitempty\" graphql:\"script\""
}

func (t *GetTerraform_Terraform_Edges_Node_TerraformFragment_Dependencies_DependenciesFragment_Instructions) GetInstructions() *string {
	if t == nil {
		t = &GetTerraform_Terraform_Edges_Node_TerraformFragment_Dependencies_DependenciesFragment_Instructions{}
	}
	return t.Instructions
}
func (t *GetTerraform_Terraform_Edges_Node_TerraformFragment_Dependencies_DependenciesFragment_Instructions) GetScript() *string {
	if t == nil {
		t = &GetTerraform_Terraform_Edges_Node_TerraformFragment_Dependencies_DependenciesFragment_Instructions{}
	}
	return t.Script
}

type GetTerraform_Terraform_Edges_Node_TerraformFragment_Dependencies_DependenciesFragment_Wirings struct {
	Terraform map[string]interface{} "json:\"terraform,omitempty\" graphql:\"terraform\""
	Helm      map[string]interface{} "json:\"helm,omitempty\" graphql:\"helm\""
}

func (t *GetTerraform_Terraform_Edges_Node_TerraformFragment_Dependencies_DependenciesFragment_Wirings) GetTerraform() map[string]interface{} {
	if t == nil {
		t = &GetTerraform_Terraform_Edges_Node_TerraformFragment_Dependencies_DependenciesFragment_Wirings{}
	}
	return t.Terraform
}
func (t *GetTerraform_Terraform_Edges_Node_TerraformFragment_Dependencies_DependenciesFragment_Wirings) GetHelm() map[string]interface{} {
	if t == nil {
		t = &GetTerraform_Terraform_Edges_Node_TerraformFragment_Dependencies_DependenciesFragment_Wirings{}
	}
	return t.Helm
}

type GetTerraform_Terraform_Edges struct {
	Node *TerraformFragment "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetTerraform_Terraform_Edges) GetNode() *TerraformFragment {
	if t == nil {
		t = &GetTerraform_Terraform_Edges{}
	}
	return t.Node
}

type GetTerraform_Terraform struct {
	Edges []*GetTerraform_Terraform_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetTerraform_Terraform) GetEdges() []*GetTerraform_Terraform_Edges {
	if t == nil {
		t = &GetTerraform_Terraform{}
	}
	return t.Edges
}

type GetTerraformVersions_Versions_Edges_Node_VersionFragment_Dependencies_DependenciesFragment_Dependencies struct {
	Type     *DependencyType "json:\"type,omitempty\" graphql:\"type\""
	Name     *string         "json:\"name,omitempty\" graphql:\"name\""
	Repo     *string         "json:\"repo,omitempty\" graphql:\"repo\""
	Optional *bool           "json:\"optional,omitempty\" graphql:\"optional\""
	Version  *string         "json:\"version,omitempty\" graphql:\"version\""
}

func (t *GetTerraformVersions_Versions_Edges_Node_VersionFragment_Dependencies_DependenciesFragment_Dependencies) GetType() *DependencyType {
	if t == nil {
		t = &GetTerraformVersions_Versions_Edges_Node_VersionFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Type
}
func (t *GetTerraformVersions_Versions_Edges_Node_VersionFragment_Dependencies_DependenciesFragment_Dependencies) GetName() *string {
	if t == nil {
		t = &GetTerraformVersions_Versions_Edges_Node_VersionFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Name
}
func (t *GetTerraformVersions_Versions_Edges_Node_VersionFragment_Dependencies_DependenciesFragment_Dependencies) GetRepo() *string {
	if t == nil {
		t = &GetTerraformVersions_Versions_Edges_Node_VersionFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Repo
}
func (t *GetTerraformVersions_Versions_Edges_Node_VersionFragment_Dependencies_DependenciesFragment_Dependencies) GetOptional() *bool {
	if t == nil {
		t = &GetTerraformVersions_Versions_Edges_Node_VersionFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Optional
}
func (t *GetTerraformVersions_Versions_Edges_Node_VersionFragment_Dependencies_DependenciesFragment_Dependencies) GetVersion() *string {
	if t == nil {
		t = &GetTerraformVersions_Versions_Edges_Node_VersionFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Version
}

type GetTerraformVersions_Versions_Edges_Node_VersionFragment_Dependencies_DependenciesFragment_Instructions struct {
	Instructions *string "json:\"instructions,omitempty\" graphql:\"instructions\""
	Script       *string "json:\"script,omitempty\" graphql:\"script\""
}

func (t *GetTerraformVersions_Versions_Edges_Node_VersionFragment_Dependencies_DependenciesFragment_Instructions) GetInstructions() *string {
	if t == nil {
		t = &GetTerraformVersions_Versions_Edges_Node_VersionFragment_Dependencies_DependenciesFragment_Instructions{}
	}
	return t.Instructions
}
func (t *GetTerraformVersions_Versions_Edges_Node_VersionFragment_Dependencies_DependenciesFragment_Instructions) GetScript() *string {
	if t == nil {
		t = &GetTerraformVersions_Versions_Edges_Node_VersionFragment_Dependencies_DependenciesFragment_Instructions{}
	}
	return t.Script
}

type GetTerraformVersions_Versions_Edges_Node_VersionFragment_Dependencies_DependenciesFragment_Wirings struct {
	Terraform map[string]interface{} "json:\"terraform,omitempty\" graphql:\"terraform\""
	Helm      map[string]interface{} "json:\"helm,omitempty\" graphql:\"helm\""
}

func (t *GetTerraformVersions_Versions_Edges_Node_VersionFragment_Dependencies_DependenciesFragment_Wirings) GetTerraform() map[string]interface{} {
	if t == nil {
		t = &GetTerraformVersions_Versions_Edges_Node_VersionFragment_Dependencies_DependenciesFragment_Wirings{}
	}
	return t.Terraform
}
func (t *GetTerraformVersions_Versions_Edges_Node_VersionFragment_Dependencies_DependenciesFragment_Wirings) GetHelm() map[string]interface{} {
	if t == nil {
		t = &GetTerraformVersions_Versions_Edges_Node_VersionFragment_Dependencies_DependenciesFragment_Wirings{}
	}
	return t.Helm
}

type GetTerraformVersions_Versions_Edges struct {
	Node *VersionFragment "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetTerraformVersions_Versions_Edges) GetNode() *VersionFragment {
	if t == nil {
		t = &GetTerraformVersions_Versions_Edges{}
	}
	return t.Node
}

type GetTerraformVersions_Versions struct {
	Edges []*GetTerraformVersions_Versions_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetTerraformVersions_Versions) GetEdges() []*GetTerraformVersions_Versions_Edges {
	if t == nil {
		t = &GetTerraformVersions_Versions{}
	}
	return t.Edges
}

type GetTerraformInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies struct {
	Type     *DependencyType "json:\"type,omitempty\" graphql:\"type\""
	Name     *string         "json:\"name,omitempty\" graphql:\"name\""
	Repo     *string         "json:\"repo,omitempty\" graphql:\"repo\""
	Optional *bool           "json:\"optional,omitempty\" graphql:\"optional\""
	Version  *string         "json:\"version,omitempty\" graphql:\"version\""
}

func (t *GetTerraformInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetType() *DependencyType {
	if t == nil {
		t = &GetTerraformInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Type
}
func (t *GetTerraformInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetName() *string {
	if t == nil {
		t = &GetTerraformInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Name
}
func (t *GetTerraformInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetRepo() *string {
	if t == nil {
		t = &GetTerraformInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Repo
}
func (t *GetTerraformInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetOptional() *bool {
	if t == nil {
		t = &GetTerraformInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Optional
}
func (t *GetTerraformInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetVersion() *string {
	if t == nil {
		t = &GetTerraformInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Version
}

type GetTerraformInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions struct {
	Instructions *string "json:\"instructions,omitempty\" graphql:\"instructions\""
	Script       *string "json:\"script,omitempty\" graphql:\"script\""
}

func (t *GetTerraformInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions) GetInstructions() *string {
	if t == nil {
		t = &GetTerraformInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions{}
	}
	return t.Instructions
}
func (t *GetTerraformInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions) GetScript() *string {
	if t == nil {
		t = &GetTerraformInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions{}
	}
	return t.Script
}

type GetTerraformInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings struct {
	Terraform map[string]interface{} "json:\"terraform,omitempty\" graphql:\"terraform\""
	Helm      map[string]interface{} "json:\"helm,omitempty\" graphql:\"helm\""
}

func (t *GetTerraformInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings) GetTerraform() map[string]interface{} {
	if t == nil {
		t = &GetTerraformInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings{}
	}
	return t.Terraform
}
func (t *GetTerraformInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings) GetHelm() map[string]interface{} {
	if t == nil {
		t = &GetTerraformInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Terraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings{}
	}
	return t.Helm
}

type GetTerraformInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies struct {
	Type     *DependencyType "json:\"type,omitempty\" graphql:\"type\""
	Name     *string         "json:\"name,omitempty\" graphql:\"name\""
	Repo     *string         "json:\"repo,omitempty\" graphql:\"repo\""
	Optional *bool           "json:\"optional,omitempty\" graphql:\"optional\""
	Version  *string         "json:\"version,omitempty\" graphql:\"version\""
}

func (t *GetTerraformInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies) GetType() *DependencyType {
	if t == nil {
		t = &GetTerraformInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Type
}
func (t *GetTerraformInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies) GetName() *string {
	if t == nil {
		t = &GetTerraformInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Name
}
func (t *GetTerraformInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies) GetRepo() *string {
	if t == nil {
		t = &GetTerraformInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Repo
}
func (t *GetTerraformInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies) GetOptional() *bool {
	if t == nil {
		t = &GetTerraformInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Optional
}
func (t *GetTerraformInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies) GetVersion() *string {
	if t == nil {
		t = &GetTerraformInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Version
}

type GetTerraformInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Instructions struct {
	Instructions *string "json:\"instructions,omitempty\" graphql:\"instructions\""
	Script       *string "json:\"script,omitempty\" graphql:\"script\""
}

func (t *GetTerraformInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Instructions) GetInstructions() *string {
	if t == nil {
		t = &GetTerraformInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Instructions{}
	}
	return t.Instructions
}
func (t *GetTerraformInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Instructions) GetScript() *string {
	if t == nil {
		t = &GetTerraformInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Instructions{}
	}
	return t.Script
}

type GetTerraformInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Wirings struct {
	Terraform map[string]interface{} "json:\"terraform,omitempty\" graphql:\"terraform\""
	Helm      map[string]interface{} "json:\"helm,omitempty\" graphql:\"helm\""
}

func (t *GetTerraformInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Wirings) GetTerraform() map[string]interface{} {
	if t == nil {
		t = &GetTerraformInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Wirings{}
	}
	return t.Terraform
}
func (t *GetTerraformInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Wirings) GetHelm() map[string]interface{} {
	if t == nil {
		t = &GetTerraformInstallations_TerraformInstallations_Edges_Node_TerraformInstallationFragment_Version_VersionFragment_Dependencies_DependenciesFragment_Wirings{}
	}
	return t.Helm
}

type GetTerraformInstallations_TerraformInstallations_Edges struct {
	Node *TerraformInstallationFragment "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetTerraformInstallations_TerraformInstallations_Edges) GetNode() *TerraformInstallationFragment {
	if t == nil {
		t = &GetTerraformInstallations_TerraformInstallations_Edges{}
	}
	return t.Node
}

type GetTerraformInstallations_TerraformInstallations struct {
	Edges []*GetTerraformInstallations_TerraformInstallations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetTerraformInstallations_TerraformInstallations) GetEdges() []*GetTerraformInstallations_TerraformInstallations_Edges {
	if t == nil {
		t = &GetTerraformInstallations_TerraformInstallations{}
	}
	return t.Edges
}

type UploadTerraform_UploadTerraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies struct {
	Type     *DependencyType "json:\"type,omitempty\" graphql:\"type\""
	Name     *string         "json:\"name,omitempty\" graphql:\"name\""
	Repo     *string         "json:\"repo,omitempty\" graphql:\"repo\""
	Optional *bool           "json:\"optional,omitempty\" graphql:\"optional\""
	Version  *string         "json:\"version,omitempty\" graphql:\"version\""
}

func (t *UploadTerraform_UploadTerraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetType() *DependencyType {
	if t == nil {
		t = &UploadTerraform_UploadTerraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Type
}
func (t *UploadTerraform_UploadTerraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetName() *string {
	if t == nil {
		t = &UploadTerraform_UploadTerraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Name
}
func (t *UploadTerraform_UploadTerraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetRepo() *string {
	if t == nil {
		t = &UploadTerraform_UploadTerraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Repo
}
func (t *UploadTerraform_UploadTerraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetOptional() *bool {
	if t == nil {
		t = &UploadTerraform_UploadTerraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Optional
}
func (t *UploadTerraform_UploadTerraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies) GetVersion() *string {
	if t == nil {
		t = &UploadTerraform_UploadTerraform_TerraformFragment_Dependencies_DependenciesFragment_Dependencies{}
	}
	return t.Version
}

type UploadTerraform_UploadTerraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions struct {
	Instructions *string "json:\"instructions,omitempty\" graphql:\"instructions\""
	Script       *string "json:\"script,omitempty\" graphql:\"script\""
}

func (t *UploadTerraform_UploadTerraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions) GetInstructions() *string {
	if t == nil {
		t = &UploadTerraform_UploadTerraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions{}
	}
	return t.Instructions
}
func (t *UploadTerraform_UploadTerraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions) GetScript() *string {
	if t == nil {
		t = &UploadTerraform_UploadTerraform_TerraformFragment_Dependencies_DependenciesFragment_Instructions{}
	}
	return t.Script
}

type UploadTerraform_UploadTerraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings struct {
	Terraform map[string]interface{} "json:\"terraform,omitempty\" graphql:\"terraform\""
	Helm      map[string]interface{} "json:\"helm,omitempty\" graphql:\"helm\""
}

func (t *UploadTerraform_UploadTerraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings) GetTerraform() map[string]interface{} {
	if t == nil {
		t = &UploadTerraform_UploadTerraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings{}
	}
	return t.Terraform
}
func (t *UploadTerraform_UploadTerraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings) GetHelm() map[string]interface{} {
	if t == nil {
		t = &UploadTerraform_UploadTerraform_TerraformFragment_Dependencies_DependenciesFragment_Wirings{}
	}
	return t.Helm
}

type UninstallTerraform_UninstallTerraform struct {
	ID *string "json:\"id,omitempty\" graphql:\"id\""
}

func (t *UninstallTerraform_UninstallTerraform) GetID() *string {
	if t == nil {
		t = &UninstallTerraform_UninstallTerraform{}
	}
	return t.ID
}

type CreateTest_CreateTest_TestFragment_Steps struct {
	ID          string     "json:\"id\" graphql:\"id\""
	Name        string     "json:\"name\" graphql:\"name\""
	Description string     "json:\"description\" graphql:\"description\""
	Status      TestStatus "json:\"status\" graphql:\"status\""
}

func (t *CreateTest_CreateTest_TestFragment_Steps) GetID() string {
	if t == nil {
		t = &CreateTest_CreateTest_TestFragment_Steps{}
	}
	return t.ID
}
func (t *CreateTest_CreateTest_TestFragment_Steps) GetName() string {
	if t == nil {
		t = &CreateTest_CreateTest_TestFragment_Steps{}
	}
	return t.Name
}
func (t *CreateTest_CreateTest_TestFragment_Steps) GetDescription() string {
	if t == nil {
		t = &CreateTest_CreateTest_TestFragment_Steps{}
	}
	return t.Description
}
func (t *CreateTest_CreateTest_TestFragment_Steps) GetStatus() *TestStatus {
	if t == nil {
		t = &CreateTest_CreateTest_TestFragment_Steps{}
	}
	return &t.Status
}

type UpdateTest_UpdateTest_TestFragment_Steps struct {
	ID          string     "json:\"id\" graphql:\"id\""
	Name        string     "json:\"name\" graphql:\"name\""
	Description string     "json:\"description\" graphql:\"description\""
	Status      TestStatus "json:\"status\" graphql:\"status\""
}

func (t *UpdateTest_UpdateTest_TestFragment_Steps) GetID() string {
	if t == nil {
		t = &UpdateTest_UpdateTest_TestFragment_Steps{}
	}
	return t.ID
}
func (t *UpdateTest_UpdateTest_TestFragment_Steps) GetName() string {
	if t == nil {
		t = &UpdateTest_UpdateTest_TestFragment_Steps{}
	}
	return t.Name
}
func (t *UpdateTest_UpdateTest_TestFragment_Steps) GetDescription() string {
	if t == nil {
		t = &UpdateTest_UpdateTest_TestFragment_Steps{}
	}
	return t.Description
}
func (t *UpdateTest_UpdateTest_TestFragment_Steps) GetStatus() *TestStatus {
	if t == nil {
		t = &UpdateTest_UpdateTest_TestFragment_Steps{}
	}
	return &t.Status
}

type UpdateStep_UpdateStep struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateStep_UpdateStep) GetID() string {
	if t == nil {
		t = &UpdateStep_UpdateStep{}
	}
	return t.ID
}

type PublishLogs_PublishLogs struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *PublishLogs_PublishLogs) GetID() string {
	if t == nil {
		t = &PublishLogs_PublishLogs{}
	}
	return t.ID
}

type CreateUpgrade_CreateUpgrade struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateUpgrade_CreateUpgrade) GetID() string {
	if t == nil {
		t = &CreateUpgrade_CreateUpgrade{}
	}
	return t.ID
}

type Me_Me struct {
	ID                 string                           "json:\"id\" graphql:\"id\""
	Email              string                           "json:\"email\" graphql:\"email\""
	Demoing            *bool                            "json:\"demoing,omitempty\" graphql:\"demoing\""
	TrustRelationships []*OidcTrustRelationshipFragment "json:\"trustRelationships,omitempty\" graphql:\"trustRelationships\""
}

func (t *Me_Me) GetID() string {
	if t == nil {
		t = &Me_Me{}
	}
	return t.ID
}
func (t *Me_Me) GetEmail() string {
	if t == nil {
		t = &Me_Me{}
	}
	return t.Email
}
func (t *Me_Me) GetDemoing() *bool {
	if t == nil {
		t = &Me_Me{}
	}
	return t.Demoing
}
func (t *Me_Me) GetTrustRelationships() []*OidcTrustRelationshipFragment {
	if t == nil {
		t = &Me_Me{}
	}
	return t.TrustRelationships
}

type GetLoginMethod_LoginMethod struct {
	LoginMethod LoginMethod "json:\"loginMethod\" graphql:\"loginMethod\""
	Token       *string     "json:\"token,omitempty\" graphql:\"token\""
}

func (t *GetLoginMethod_LoginMethod) GetLoginMethod() *LoginMethod {
	if t == nil {
		t = &GetLoginMethod_LoginMethod{}
	}
	return &t.LoginMethod
}
func (t *GetLoginMethod_LoginMethod) GetToken() *string {
	if t == nil {
		t = &GetLoginMethod_LoginMethod{}
	}
	return t.Token
}

type ListTokens_Tokens_Edges_Node struct {
	Token *string "json:\"token,omitempty\" graphql:\"token\""
}

func (t *ListTokens_Tokens_Edges_Node) GetToken() *string {
	if t == nil {
		t = &ListTokens_Tokens_Edges_Node{}
	}
	return t.Token
}

type ListTokens_Tokens_Edges struct {
	Node *ListTokens_Tokens_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *ListTokens_Tokens_Edges) GetNode() *ListTokens_Tokens_Edges_Node {
	if t == nil {
		t = &ListTokens_Tokens_Edges{}
	}
	return t.Node
}

type ListTokens_Tokens struct {
	Edges []*ListTokens_Tokens_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *ListTokens_Tokens) GetEdges() []*ListTokens_Tokens_Edges {
	if t == nil {
		t = &ListTokens_Tokens{}
	}
	return t.Edges
}

type ListKeys_PublicKeys_Edges struct {
	Node *PublicKeyFragment "json:\"node,omitempty\" graphql:\"node\""
}

func (t *ListKeys_PublicKeys_Edges) GetNode() *PublicKeyFragment {
	if t == nil {
		t = &ListKeys_PublicKeys_Edges{}
	}
	return t.Node
}

type ListKeys_PublicKeys struct {
	Edges []*ListKeys_PublicKeys_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *ListKeys_PublicKeys) GetEdges() []*ListKeys_PublicKeys_Edges {
	if t == nil {
		t = &ListKeys_PublicKeys{}
	}
	return t.Edges
}

type PollLoginToken_LoginToken struct {
	Jwt *string "json:\"jwt,omitempty\" graphql:\"jwt\""
}

func (t *PollLoginToken_LoginToken) GetJwt() *string {
	if t == nil {
		t = &PollLoginToken_LoginToken{}
	}
	return t.Jwt
}

type DevLogin_DeviceLogin struct {
	LoginURL    string "json:\"loginUrl\" graphql:\"loginUrl\""
	DeviceToken string "json:\"deviceToken\" graphql:\"deviceToken\""
}

func (t *DevLogin_DeviceLogin) GetLoginURL() string {
	if t == nil {
		t = &DevLogin_DeviceLogin{}
	}
	return t.LoginURL
}
func (t *DevLogin_DeviceLogin) GetDeviceToken() string {
	if t == nil {
		t = &DevLogin_DeviceLogin{}
	}
	return t.DeviceToken
}

type Login_Login struct {
	Jwt *string "json:\"jwt,omitempty\" graphql:\"jwt\""
}

func (t *Login_Login) GetJwt() *string {
	if t == nil {
		t = &Login_Login{}
	}
	return t.Jwt
}

type ImpersonateServiceAccount_ImpersonateServiceAccount struct {
	Jwt   *string "json:\"jwt,omitempty\" graphql:\"jwt\""
	Email string  "json:\"email\" graphql:\"email\""
}

func (t *ImpersonateServiceAccount_ImpersonateServiceAccount) GetJwt() *string {
	if t == nil {
		t = &ImpersonateServiceAccount_ImpersonateServiceAccount{}
	}
	return t.Jwt
}
func (t *ImpersonateServiceAccount_ImpersonateServiceAccount) GetEmail() string {
	if t == nil {
		t = &ImpersonateServiceAccount_ImpersonateServiceAccount{}
	}
	return t.Email
}

type CreateAccessToken_CreateToken struct {
	Token *string "json:\"token,omitempty\" graphql:\"token\""
}

func (t *CreateAccessToken_CreateToken) GetToken() *string {
	if t == nil {
		t = &CreateAccessToken_CreateToken{}
	}
	return t.Token
}

type CreateKey_CreatePublicKey struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateKey_CreatePublicKey) GetID() string {
	if t == nil {
		t = &CreateKey_CreatePublicKey{}
	}
	return t.ID
}

type DeleteEabCredential_DeleteEabKey struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *DeleteEabCredential_DeleteEabKey) GetID() string {
	if t == nil {
		t = &DeleteEabCredential_DeleteEabKey{}
	}
	return t.ID
}

type Backups_KeyBackups_Edges struct {
	Node *KeyBackupFragment "json:\"node,omitempty\" graphql:\"node\""
}

func (t *Backups_KeyBackups_Edges) GetNode() *KeyBackupFragment {
	if t == nil {
		t = &Backups_KeyBackups_Edges{}
	}
	return t.Node
}

type Backups_KeyBackups struct {
	Edges []*Backups_KeyBackups_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *Backups_KeyBackups) GetEdges() []*Backups_KeyBackups_Edges {
	if t == nil {
		t = &Backups_KeyBackups{}
	}
	return t.Edges
}

type Backup_KeyBackup struct {
	ID           string   "json:\"id\" graphql:\"id\""
	Name         string   "json:\"name\" graphql:\"name\""
	Digest       string   "json:\"digest\" graphql:\"digest\""
	Repositories []string "json:\"repositories,omitempty\" graphql:\"repositories\""
	InsertedAt   *string  "json:\"insertedAt,omitempty\" graphql:\"insertedAt\""
	Value        string   "json:\"value\" graphql:\"value\""
}

func (t *Backup_KeyBackup) GetID() string {
	if t == nil {
		t = &Backup_KeyBackup{}
	}
	return t.ID
}
func (t *Backup_KeyBackup) GetName() string {
	if t == nil {
		t = &Backup_KeyBackup{}
	}
	return t.Name
}
func (t *Backup_KeyBackup) GetDigest() string {
	if t == nil {
		t = &Backup_KeyBackup{}
	}
	return t.Digest
}
func (t *Backup_KeyBackup) GetRepositories() []string {
	if t == nil {
		t = &Backup_KeyBackup{}
	}
	return t.Repositories
}
func (t *Backup_KeyBackup) GetInsertedAt() *string {
	if t == nil {
		t = &Backup_KeyBackup{}
	}
	return t.InsertedAt
}
func (t *Backup_KeyBackup) GetValue() string {
	if t == nil {
		t = &Backup_KeyBackup{}
	}
	return t.Value
}

type DeleteTrust_DeleteTrustRelationship struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *DeleteTrust_DeleteTrustRelationship) GetID() string {
	if t == nil {
		t = &DeleteTrust_DeleteTrustRelationship{}
	}
	return t.ID
}

type UpdateVersion_UpdateVersion struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateVersion_UpdateVersion) GetID() string {
	if t == nil {
		t = &UpdateVersion_UpdateVersion{}
	}
	return t.ID
}

type ListArtifacts struct {
	Repository *ListArtifacts_Repository "json:\"repository,omitempty\" graphql:\"repository\""
}

func (t *ListArtifacts) GetRepository() *ListArtifacts_Repository {
	if t == nil {
		t = &ListArtifacts{}
	}
	return t.Repository
}

type CreateArtifact struct {
	CreateArtifact *ArtifactFragment "json:\"createArtifact,omitempty\" graphql:\"createArtifact\""
}

func (t *CreateArtifact) GetCreateArtifact() *ArtifactFragment {
	if t == nil {
		t = &CreateArtifact{}
	}
	return t.CreateArtifact
}

type GetCharts struct {
	Charts *GetCharts_Charts "json:\"charts,omitempty\" graphql:\"charts\""
}

func (t *GetCharts) GetCharts() *GetCharts_Charts {
	if t == nil {
		t = &GetCharts{}
	}
	return t.Charts
}

type GetVersions struct {
	Versions *GetVersions_Versions "json:\"versions,omitempty\" graphql:\"versions\""
}

func (t *GetVersions) GetVersions() *GetVersions_Versions {
	if t == nil {
		t = &GetVersions{}
	}
	return t.Versions
}

type GetChartInstallations struct {
	ChartInstallations *GetChartInstallations_ChartInstallations "json:\"chartInstallations,omitempty\" graphql:\"chartInstallations\""
}

func (t *GetChartInstallations) GetChartInstallations() *GetChartInstallations_ChartInstallations {
	if t == nil {
		t = &GetChartInstallations{}
	}
	return t.ChartInstallations
}

type GetPackageInstallations struct {
	ChartInstallations     *GetPackageInstallations_ChartInstallations     "json:\"chartInstallations,omitempty\" graphql:\"chartInstallations\""
	TerraformInstallations *GetPackageInstallations_TerraformInstallations "json:\"terraformInstallations,omitempty\" graphql:\"terraformInstallations\""
}

func (t *GetPackageInstallations) GetChartInstallations() *GetPackageInstallations_ChartInstallations {
	if t == nil {
		t = &GetPackageInstallations{}
	}
	return t.ChartInstallations
}
func (t *GetPackageInstallations) GetTerraformInstallations() *GetPackageInstallations_TerraformInstallations {
	if t == nil {
		t = &GetPackageInstallations{}
	}
	return t.TerraformInstallations
}

type CreateCrd struct {
	CreateCrd *CreateCrd_CreateCrd "json:\"createCrd,omitempty\" graphql:\"createCrd\""
}

func (t *CreateCrd) GetCreateCrd() *CreateCrd_CreateCrd {
	if t == nil {
		t = &CreateCrd{}
	}
	return t.CreateCrd
}

type UninstallChart struct {
	DeleteChartInstallation *UninstallChart_DeleteChartInstallation "json:\"deleteChartInstallation,omitempty\" graphql:\"deleteChartInstallation\""
}

func (t *UninstallChart) GetDeleteChartInstallation() *UninstallChart_DeleteChartInstallation {
	if t == nil {
		t = &UninstallChart{}
	}
	return t.DeleteChartInstallation
}

type GetConsoleInstances struct {
	ConsoleInstances *GetConsoleInstances_ConsoleInstances "json:\"consoleInstances,omitempty\" graphql:\"consoleInstances\""
}

func (t *GetConsoleInstances) GetConsoleInstances() *GetConsoleInstances_ConsoleInstances {
	if t == nil {
		t = &GetConsoleInstances{}
	}
	return t.ConsoleInstances
}

type UpdateConsoleInstance struct {
	UpdateConsoleInstance *ConsoleInstanceFragment "json:\"updateConsoleInstance,omitempty\" graphql:\"updateConsoleInstance\""
}

func (t *UpdateConsoleInstance) GetUpdateConsoleInstance() *ConsoleInstanceFragment {
	if t == nil {
		t = &UpdateConsoleInstance{}
	}
	return t.UpdateConsoleInstance
}

type DestroyCluster struct {
	DestroyCluster *bool "json:\"destroyCluster,omitempty\" graphql:\"destroyCluster\""
}

func (t *DestroyCluster) GetDestroyCluster() *bool {
	if t == nil {
		t = &DestroyCluster{}
	}
	return t.DestroyCluster
}

type Clusters struct {
	Clusters *Clusters_Clusters "json:\"clusters,omitempty\" graphql:\"clusters\""
}

func (t *Clusters) GetClusters() *Clusters_Clusters {
	if t == nil {
		t = &Clusters{}
	}
	return t.Clusters
}

type ClusterInfo struct {
	Cluster *ClusterInfo_Cluster "json:\"cluster,omitempty\" graphql:\"cluster\""
}

func (t *ClusterInfo) GetCluster() *ClusterInfo_Cluster {
	if t == nil {
		t = &ClusterInfo{}
	}
	return t.Cluster
}

type CreateDependency struct {
	CreateClusterDependency *CreateDependency_CreateClusterDependency "json:\"createClusterDependency,omitempty\" graphql:\"createClusterDependency\""
}

func (t *CreateDependency) GetCreateClusterDependency() *CreateDependency_CreateClusterDependency {
	if t == nil {
		t = &CreateDependency{}
	}
	return t.CreateClusterDependency
}

type PromoteCluster struct {
	Promote *UserFragment "json:\"promote,omitempty\" graphql:\"promote\""
}

func (t *PromoteCluster) GetPromote() *UserFragment {
	if t == nil {
		t = &PromoteCluster{}
	}
	return t.Promote
}

type TransferOwnership struct {
	TransferOwnership *TransferOwnership_TransferOwnership "json:\"transferOwnership,omitempty\" graphql:\"transferOwnership\""
}

func (t *TransferOwnership) GetTransferOwnership() *TransferOwnership_TransferOwnership {
	if t == nil {
		t = &TransferOwnership{}
	}
	return t.TransferOwnership
}

type GetDNSRecords struct {
	DNSRecords *GetDnsRecords_DNSRecords "json:\"dnsRecords,omitempty\" graphql:\"dnsRecords\""
}

func (t *GetDNSRecords) GetDNSRecords() *GetDnsRecords_DNSRecords {
	if t == nil {
		t = &GetDNSRecords{}
	}
	return t.DNSRecords
}

type CreateDNSRecord struct {
	CreateDNSRecord *DNSRecordFragment "json:\"createDnsRecord,omitempty\" graphql:\"createDnsRecord\""
}

func (t *CreateDNSRecord) GetCreateDNSRecord() *DNSRecordFragment {
	if t == nil {
		t = &CreateDNSRecord{}
	}
	return t.CreateDNSRecord
}

type DeleteDNSRecord struct {
	DeleteDNSRecord *DNSRecordFragment "json:\"deleteDnsRecord,omitempty\" graphql:\"deleteDnsRecord\""
}

func (t *DeleteDNSRecord) GetDeleteDNSRecord() *DNSRecordFragment {
	if t == nil {
		t = &DeleteDNSRecord{}
	}
	return t.DeleteDNSRecord
}

type CreateDomain struct {
	ProvisionDomain *DNSDomainFragment "json:\"provisionDomain,omitempty\" graphql:\"provisionDomain\""
}

func (t *CreateDomain) GetProvisionDomain() *DNSDomainFragment {
	if t == nil {
		t = &CreateDomain{}
	}
	return t.ProvisionDomain
}

type GetInstallation struct {
	Installation *InstallationFragment "json:\"installation,omitempty\" graphql:\"installation\""
}

func (t *GetInstallation) GetInstallation() *InstallationFragment {
	if t == nil {
		t = &GetInstallation{}
	}
	return t.Installation
}

type GetInstallationByID struct {
	Installation *InstallationFragment "json:\"installation,omitempty\" graphql:\"installation\""
}

func (t *GetInstallationByID) GetInstallation() *InstallationFragment {
	if t == nil {
		t = &GetInstallationByID{}
	}
	return t.Installation
}

type GetInstallations struct {
	Installations *GetInstallations_Installations "json:\"installations,omitempty\" graphql:\"installations\""
}

func (t *GetInstallations) GetInstallations() *GetInstallations_Installations {
	if t == nil {
		t = &GetInstallations{}
	}
	return t.Installations
}

type UpsertOidcProvider struct {
	UpsertOidcProvider *UpsertOidcProvider_UpsertOidcProvider "json:\"upsertOidcProvider,omitempty\" graphql:\"upsertOidcProvider\""
}

func (t *UpsertOidcProvider) GetUpsertOidcProvider() *UpsertOidcProvider_UpsertOidcProvider {
	if t == nil {
		t = &UpsertOidcProvider{}
	}
	return t.UpsertOidcProvider
}

type ResetInstallations struct {
	ResetInstallations *int64 "json:\"resetInstallations,omitempty\" graphql:\"resetInstallations\""
}

func (t *ResetInstallations) GetResetInstallations() *int64 {
	if t == nil {
		t = &ResetInstallations{}
	}
	return t.ResetInstallations
}

type CreateInstallation struct {
	CreateInstallation *CreateInstallation_CreateInstallation "json:\"createInstallation,omitempty\" graphql:\"createInstallation\""
}

func (t *CreateInstallation) GetCreateInstallation() *CreateInstallation_CreateInstallation {
	if t == nil {
		t = &CreateInstallation{}
	}
	return t.CreateInstallation
}

type DeleteInstallation struct {
	DeleteInstallation *DeleteInstallation_DeleteInstallation "json:\"deleteInstallation,omitempty\" graphql:\"deleteInstallation\""
}

func (t *DeleteInstallation) GetDeleteInstallation() *DeleteInstallation_DeleteInstallation {
	if t == nil {
		t = &DeleteInstallation{}
	}
	return t.DeleteInstallation
}

type MarkSynced struct {
	Synced *bool "json:\"synced,omitempty\" graphql:\"synced\""
}

func (t *MarkSynced) GetSynced() *bool {
	if t == nil {
		t = &MarkSynced{}
	}
	return t.Synced
}

type GetRecipe struct {
	Recipe *GetRecipe_Recipe "json:\"recipe,omitempty\" graphql:\"recipe\""
}

func (t *GetRecipe) GetRecipe() *GetRecipe_Recipe {
	if t == nil {
		t = &GetRecipe{}
	}
	return t.Recipe
}

type GetRecipeByID struct {
	Recipe *GetRecipeByID_Recipe "json:\"recipe,omitempty\" graphql:\"recipe\""
}

func (t *GetRecipeByID) GetRecipe() *GetRecipeByID_Recipe {
	if t == nil {
		t = &GetRecipeByID{}
	}
	return t.Recipe
}

type ListRecipes struct {
	Recipes *ListRecipes_Recipes "json:\"recipes,omitempty\" graphql:\"recipes\""
}

func (t *ListRecipes) GetRecipes() *ListRecipes_Recipes {
	if t == nil {
		t = &ListRecipes{}
	}
	return t.Recipes
}

type ListAllRecipes struct {
	Recipes *ListAllRecipes_Recipes "json:\"recipes,omitempty\" graphql:\"recipes\""
}

func (t *ListAllRecipes) GetRecipes() *ListAllRecipes_Recipes {
	if t == nil {
		t = &ListAllRecipes{}
	}
	return t.Recipes
}

type CreateRecipe struct {
	CreateRecipe *CreateRecipe_CreateRecipe "json:\"createRecipe,omitempty\" graphql:\"createRecipe\""
}

func (t *CreateRecipe) GetCreateRecipe() *CreateRecipe_CreateRecipe {
	if t == nil {
		t = &CreateRecipe{}
	}
	return t.CreateRecipe
}

type InstallRecipe struct {
	InstallRecipe []*InstallRecipe_InstallRecipe "json:\"installRecipe,omitempty\" graphql:\"installRecipe\""
}

func (t *InstallRecipe) GetInstallRecipe() []*InstallRecipe_InstallRecipe {
	if t == nil {
		t = &InstallRecipe{}
	}
	return t.InstallRecipe
}

type CreateStack struct {
	CreateStack *CreateStack_CreateStack "json:\"createStack,omitempty\" graphql:\"createStack\""
}

func (t *CreateStack) GetCreateStack() *CreateStack_CreateStack {
	if t == nil {
		t = &CreateStack{}
	}
	return t.CreateStack
}

type GetStack struct {
	Stack *StackFragment "json:\"stack,omitempty\" graphql:\"stack\""
}

func (t *GetStack) GetStack() *StackFragment {
	if t == nil {
		t = &GetStack{}
	}
	return t.Stack
}

type ListStacks struct {
	Stacks *ListStacks_Stacks "json:\"stacks,omitempty\" graphql:\"stacks\""
}

func (t *ListStacks) GetStacks() *ListStacks_Stacks {
	if t == nil {
		t = &ListStacks{}
	}
	return t.Stacks
}

type GetRepository struct {
	Repository *RepositoryFragment "json:\"repository,omitempty\" graphql:\"repository\""
}

func (t *GetRepository) GetRepository() *RepositoryFragment {
	if t == nil {
		t = &GetRepository{}
	}
	return t.Repository
}

type CreateResourceDefinition struct {
	UpdateRepository *CreateResourceDefinition_UpdateRepository "json:\"updateRepository,omitempty\" graphql:\"updateRepository\""
}

func (t *CreateResourceDefinition) GetUpdateRepository() *CreateResourceDefinition_UpdateRepository {
	if t == nil {
		t = &CreateResourceDefinition{}
	}
	return t.UpdateRepository
}

type CreateIntegration struct {
	CreateIntegration *CreateIntegration_CreateIntegration "json:\"createIntegration,omitempty\" graphql:\"createIntegration\""
}

func (t *CreateIntegration) GetCreateIntegration() *CreateIntegration_CreateIntegration {
	if t == nil {
		t = &CreateIntegration{}
	}
	return t.CreateIntegration
}

type UpdateRepository struct {
	UpdateRepository *UpdateRepository_UpdateRepository "json:\"updateRepository,omitempty\" graphql:\"updateRepository\""
}

func (t *UpdateRepository) GetUpdateRepository() *UpdateRepository_UpdateRepository {
	if t == nil {
		t = &UpdateRepository{}
	}
	return t.UpdateRepository
}

type CreateRepository struct {
	UpsertRepository *CreateRepository_UpsertRepository "json:\"upsertRepository,omitempty\" graphql:\"upsertRepository\""
}

func (t *CreateRepository) GetUpsertRepository() *CreateRepository_UpsertRepository {
	if t == nil {
		t = &CreateRepository{}
	}
	return t.UpsertRepository
}

type AcquireLock struct {
	AcquireLock *ApplyLockFragment "json:\"acquireLock,omitempty\" graphql:\"acquireLock\""
}

func (t *AcquireLock) GetAcquireLock() *ApplyLockFragment {
	if t == nil {
		t = &AcquireLock{}
	}
	return t.AcquireLock
}

type ReleaseLock struct {
	ReleaseLock *ApplyLockFragment "json:\"releaseLock,omitempty\" graphql:\"releaseLock\""
}

func (t *ReleaseLock) GetReleaseLock() *ApplyLockFragment {
	if t == nil {
		t = &ReleaseLock{}
	}
	return t.ReleaseLock
}

type UnlockRepository struct {
	UnlockRepository *int64 "json:\"unlockRepository,omitempty\" graphql:\"unlockRepository\""
}

func (t *UnlockRepository) GetUnlockRepository() *int64 {
	if t == nil {
		t = &UnlockRepository{}
	}
	return t.UnlockRepository
}

type ListRepositories struct {
	Repositories *ListRepositories_Repositories "json:\"repositories,omitempty\" graphql:\"repositories\""
}

func (t *ListRepositories) GetRepositories() *ListRepositories_Repositories {
	if t == nil {
		t = &ListRepositories{}
	}
	return t.Repositories
}

type Scaffolds struct {
	Scaffold []*Scaffolds_Scaffold "json:\"scaffold,omitempty\" graphql:\"scaffold\""
}

func (t *Scaffolds) GetScaffold() []*Scaffolds_Scaffold {
	if t == nil {
		t = &Scaffolds{}
	}
	return t.Scaffold
}

type DeleteRepository struct {
	DeleteRepository *DeleteRepository_DeleteRepository "json:\"deleteRepository,omitempty\" graphql:\"deleteRepository\""
}

func (t *DeleteRepository) GetDeleteRepository() *DeleteRepository_DeleteRepository {
	if t == nil {
		t = &DeleteRepository{}
	}
	return t.DeleteRepository
}

type Release struct {
	Release *bool "json:\"release,omitempty\" graphql:\"release\""
}

func (t *Release) GetRelease() *bool {
	if t == nil {
		t = &Release{}
	}
	return t.Release
}

type InstallVersion struct {
	InstallVersion *bool "json:\"installVersion,omitempty\" graphql:\"installVersion\""
}

func (t *InstallVersion) GetInstallVersion() *bool {
	if t == nil {
		t = &InstallVersion{}
	}
	return t.InstallVersion
}

type GetTfProviders struct {
	TerraformProviders []*Provider "json:\"terraformProviders,omitempty\" graphql:\"terraformProviders\""
}

func (t *GetTfProviders) GetTerraformProviders() []*Provider {
	if t == nil {
		t = &GetTfProviders{}
	}
	return t.TerraformProviders
}

type GetTfProviderScaffold struct {
	TerraformProvider *GetTfProviderScaffold_TerraformProvider "json:\"terraformProvider,omitempty\" graphql:\"terraformProvider\""
}

func (t *GetTfProviderScaffold) GetTerraformProvider() *GetTfProviderScaffold_TerraformProvider {
	if t == nil {
		t = &GetTfProviderScaffold{}
	}
	return t.TerraformProvider
}

type GetShell struct {
	Shell *CloudShellFragment "json:\"shell,omitempty\" graphql:\"shell\""
}

func (t *GetShell) GetShell() *CloudShellFragment {
	if t == nil {
		t = &GetShell{}
	}
	return t.Shell
}

type DeleteShell struct {
	DeleteShell *CloudShellFragment "json:\"deleteShell,omitempty\" graphql:\"deleteShell\""
}

func (t *DeleteShell) GetDeleteShell() *CloudShellFragment {
	if t == nil {
		t = &DeleteShell{}
	}
	return t.DeleteShell
}

type GetTerraform struct {
	Terraform *GetTerraform_Terraform "json:\"terraform,omitempty\" graphql:\"terraform\""
}

func (t *GetTerraform) GetTerraform() *GetTerraform_Terraform {
	if t == nil {
		t = &GetTerraform{}
	}
	return t.Terraform
}

type GetTerraformVersions struct {
	Versions *GetTerraformVersions_Versions "json:\"versions,omitempty\" graphql:\"versions\""
}

func (t *GetTerraformVersions) GetVersions() *GetTerraformVersions_Versions {
	if t == nil {
		t = &GetTerraformVersions{}
	}
	return t.Versions
}

type GetTerraformInstallations struct {
	TerraformInstallations *GetTerraformInstallations_TerraformInstallations "json:\"terraformInstallations,omitempty\" graphql:\"terraformInstallations\""
}

func (t *GetTerraformInstallations) GetTerraformInstallations() *GetTerraformInstallations_TerraformInstallations {
	if t == nil {
		t = &GetTerraformInstallations{}
	}
	return t.TerraformInstallations
}

type UploadTerraform struct {
	UploadTerraform *TerraformFragment "json:\"uploadTerraform,omitempty\" graphql:\"uploadTerraform\""
}

func (t *UploadTerraform) GetUploadTerraform() *TerraformFragment {
	if t == nil {
		t = &UploadTerraform{}
	}
	return t.UploadTerraform
}

type UninstallTerraform struct {
	UninstallTerraform *UninstallTerraform_UninstallTerraform "json:\"uninstallTerraform,omitempty\" graphql:\"uninstallTerraform\""
}

func (t *UninstallTerraform) GetUninstallTerraform() *UninstallTerraform_UninstallTerraform {
	if t == nil {
		t = &UninstallTerraform{}
	}
	return t.UninstallTerraform
}

type CreateTest struct {
	CreateTest *TestFragment "json:\"createTest,omitempty\" graphql:\"createTest\""
}

func (t *CreateTest) GetCreateTest() *TestFragment {
	if t == nil {
		t = &CreateTest{}
	}
	return t.CreateTest
}

type UpdateTest struct {
	UpdateTest *TestFragment "json:\"updateTest,omitempty\" graphql:\"updateTest\""
}

func (t *UpdateTest) GetUpdateTest() *TestFragment {
	if t == nil {
		t = &UpdateTest{}
	}
	return t.UpdateTest
}

type UpdateStep struct {
	UpdateStep *UpdateStep_UpdateStep "json:\"updateStep,omitempty\" graphql:\"updateStep\""
}

func (t *UpdateStep) GetUpdateStep() *UpdateStep_UpdateStep {
	if t == nil {
		t = &UpdateStep{}
	}
	return t.UpdateStep
}

type PublishLogs struct {
	PublishLogs *PublishLogs_PublishLogs "json:\"publishLogs,omitempty\" graphql:\"publishLogs\""
}

func (t *PublishLogs) GetPublishLogs() *PublishLogs_PublishLogs {
	if t == nil {
		t = &PublishLogs{}
	}
	return t.PublishLogs
}

type CreateUpgrade struct {
	CreateUpgrade *CreateUpgrade_CreateUpgrade "json:\"createUpgrade,omitempty\" graphql:\"createUpgrade\""
}

func (t *CreateUpgrade) GetCreateUpgrade() *CreateUpgrade_CreateUpgrade {
	if t == nil {
		t = &CreateUpgrade{}
	}
	return t.CreateUpgrade
}

type Me struct {
	Me *Me_Me "json:\"me,omitempty\" graphql:\"me\""
}

func (t *Me) GetMe() *Me_Me {
	if t == nil {
		t = &Me{}
	}
	return t.Me
}

type GetLoginMethod struct {
	LoginMethod *GetLoginMethod_LoginMethod "json:\"loginMethod,omitempty\" graphql:\"loginMethod\""
}

func (t *GetLoginMethod) GetLoginMethod() *GetLoginMethod_LoginMethod {
	if t == nil {
		t = &GetLoginMethod{}
	}
	return t.LoginMethod
}

type ListTokens struct {
	Tokens *ListTokens_Tokens "json:\"tokens,omitempty\" graphql:\"tokens\""
}

func (t *ListTokens) GetTokens() *ListTokens_Tokens {
	if t == nil {
		t = &ListTokens{}
	}
	return t.Tokens
}

type ListKeys struct {
	PublicKeys *ListKeys_PublicKeys "json:\"publicKeys,omitempty\" graphql:\"publicKeys\""
}

func (t *ListKeys) GetPublicKeys() *ListKeys_PublicKeys {
	if t == nil {
		t = &ListKeys{}
	}
	return t.PublicKeys
}

type GetEabCredential struct {
	EabCredential *EabCredentialFragment "json:\"eabCredential,omitempty\" graphql:\"eabCredential\""
}

func (t *GetEabCredential) GetEabCredential() *EabCredentialFragment {
	if t == nil {
		t = &GetEabCredential{}
	}
	return t.EabCredential
}

type PollLoginToken struct {
	LoginToken *PollLoginToken_LoginToken "json:\"loginToken,omitempty\" graphql:\"loginToken\""
}

func (t *PollLoginToken) GetLoginToken() *PollLoginToken_LoginToken {
	if t == nil {
		t = &PollLoginToken{}
	}
	return t.LoginToken
}

type DevLogin struct {
	DeviceLogin *DevLogin_DeviceLogin "json:\"deviceLogin,omitempty\" graphql:\"deviceLogin\""
}

func (t *DevLogin) GetDeviceLogin() *DevLogin_DeviceLogin {
	if t == nil {
		t = &DevLogin{}
	}
	return t.DeviceLogin
}

type Login struct {
	Login *Login_Login "json:\"login,omitempty\" graphql:\"login\""
}

func (t *Login) GetLogin() *Login_Login {
	if t == nil {
		t = &Login{}
	}
	return t.Login
}

type ImpersonateServiceAccount struct {
	ImpersonateServiceAccount *ImpersonateServiceAccount_ImpersonateServiceAccount "json:\"impersonateServiceAccount,omitempty\" graphql:\"impersonateServiceAccount\""
}

func (t *ImpersonateServiceAccount) GetImpersonateServiceAccount() *ImpersonateServiceAccount_ImpersonateServiceAccount {
	if t == nil {
		t = &ImpersonateServiceAccount{}
	}
	return t.ImpersonateServiceAccount
}

type CreateAccessToken struct {
	CreateToken *CreateAccessToken_CreateToken "json:\"createToken,omitempty\" graphql:\"createToken\""
}

func (t *CreateAccessToken) GetCreateToken() *CreateAccessToken_CreateToken {
	if t == nil {
		t = &CreateAccessToken{}
	}
	return t.CreateToken
}

type CreateKey struct {
	CreatePublicKey *CreateKey_CreatePublicKey "json:\"createPublicKey,omitempty\" graphql:\"createPublicKey\""
}

func (t *CreateKey) GetCreatePublicKey() *CreateKey_CreatePublicKey {
	if t == nil {
		t = &CreateKey{}
	}
	return t.CreatePublicKey
}

type DeleteEabCredential struct {
	DeleteEabKey *DeleteEabCredential_DeleteEabKey "json:\"deleteEabKey,omitempty\" graphql:\"deleteEabKey\""
}

func (t *DeleteEabCredential) GetDeleteEabKey() *DeleteEabCredential_DeleteEabKey {
	if t == nil {
		t = &DeleteEabCredential{}
	}
	return t.DeleteEabKey
}

type CreateEvent struct {
	CreateUserEvent *bool "json:\"createUserEvent,omitempty\" graphql:\"createUserEvent\""
}

func (t *CreateEvent) GetCreateUserEvent() *bool {
	if t == nil {
		t = &CreateEvent{}
	}
	return t.CreateUserEvent
}

type CreateBackup struct {
	CreateKeyBackup *KeyBackupFragment "json:\"createKeyBackup,omitempty\" graphql:\"createKeyBackup\""
}

func (t *CreateBackup) GetCreateKeyBackup() *KeyBackupFragment {
	if t == nil {
		t = &CreateBackup{}
	}
	return t.CreateKeyBackup
}

type Backups struct {
	KeyBackups *Backups_KeyBackups "json:\"keyBackups,omitempty\" graphql:\"keyBackups\""
}

func (t *Backups) GetKeyBackups() *Backups_KeyBackups {
	if t == nil {
		t = &Backups{}
	}
	return t.KeyBackups
}

type Backup struct {
	KeyBackup *Backup_KeyBackup "json:\"keyBackup,omitempty\" graphql:\"keyBackup\""
}

func (t *Backup) GetKeyBackup() *Backup_KeyBackup {
	if t == nil {
		t = &Backup{}
	}
	return t.KeyBackup
}

type GetHelp struct {
	HelpQuestion *string "json:\"helpQuestion,omitempty\" graphql:\"helpQuestion\""
}

func (t *GetHelp) GetHelpQuestion() *string {
	if t == nil {
		t = &GetHelp{}
	}
	return t.HelpQuestion
}

type Chat struct {
	Chat *ChatMessageFragment "json:\"chat,omitempty\" graphql:\"chat\""
}

func (t *Chat) GetChat() *ChatMessageFragment {
	if t == nil {
		t = &Chat{}
	}
	return t.Chat
}

type CreateTrust struct {
	CreateTrustRelationship *OidcTrustRelationshipFragment "json:\"createTrustRelationship,omitempty\" graphql:\"createTrustRelationship\""
}

func (t *CreateTrust) GetCreateTrustRelationship() *OidcTrustRelationshipFragment {
	if t == nil {
		t = &CreateTrust{}
	}
	return t.CreateTrustRelationship
}

type DeleteTrust struct {
	DeleteTrustRelationship *DeleteTrust_DeleteTrustRelationship "json:\"deleteTrustRelationship,omitempty\" graphql:\"deleteTrustRelationship\""
}

func (t *DeleteTrust) GetDeleteTrustRelationship() *DeleteTrust_DeleteTrustRelationship {
	if t == nil {
		t = &DeleteTrust{}
	}
	return t.DeleteTrustRelationship
}

type OidcToken struct {
	OidcToken *string "json:\"oidcToken,omitempty\" graphql:\"oidcToken\""
}

func (t *OidcToken) GetOidcToken() *string {
	if t == nil {
		t = &OidcToken{}
	}
	return t.OidcToken
}

type UpdateVersion struct {
	UpdateVersion *UpdateVersion_UpdateVersion "json:\"updateVersion,omitempty\" graphql:\"updateVersion\""
}

func (t *UpdateVersion) GetUpdateVersion() *UpdateVersion_UpdateVersion {
	if t == nil {
		t = &UpdateVersion{}
	}
	return t.UpdateVersion
}

const ListArtifactsDocument = `query ListArtifacts ($id: ID!) {
	repository(id: $id) {
		artifacts {
			... ArtifactFragment
		}
	}
}
fragment ArtifactFragment on Artifact {
	id
	name
	readme
	platform
	arch
	blob
	sha
	filesize
}
`

func (c *Client) ListArtifacts(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*ListArtifacts, error) {
	vars := map[string]any{
		"id": id,
	}

	var res ListArtifacts
	if err := c.Client.Post(ctx, "ListArtifacts", ListArtifactsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateArtifactDocument = `mutation CreateArtifact ($repoName: String!, $name: String!, $readme: String!, $artifactType: String!, $platform: String!, $blob: UploadOrUrl!, $arch: String) {
	createArtifact(repositoryName: $repoName, attributes: {name:$name,blob:$blob,readme:$readme,type:$artifactType,platform:$platform,arch:$arch}) {
		... ArtifactFragment
	}
}
fragment ArtifactFragment on Artifact {
	id
	name
	readme
	platform
	arch
	blob
	sha
	filesize
}
`

func (c *Client) CreateArtifact(ctx context.Context, repoName string, name string, readme string, artifactType string, platform string, blob string, arch *string, interceptors ...clientv2.RequestInterceptor) (*CreateArtifact, error) {
	vars := map[string]any{
		"repoName":     repoName,
		"name":         name,
		"readme":       readme,
		"artifactType": artifactType,
		"platform":     platform,
		"blob":         blob,
		"arch":         arch,
	}

	var res CreateArtifact
	if err := c.Client.Post(ctx, "CreateArtifact", CreateArtifactDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetChartsDocument = `query GetCharts ($id: ID!) {
	charts(repositoryId: $id, first: 100) {
		edges {
			node {
				... ChartFragment
			}
		}
	}
}
fragment ChartFragment on Chart {
	id
	name
	description
	latestVersion
}
`

func (c *Client) GetCharts(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetCharts, error) {
	vars := map[string]any{
		"id": id,
	}

	var res GetCharts
	if err := c.Client.Post(ctx, "GetCharts", GetChartsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetVersionsDocument = `query GetVersions ($id: ID!) {
	versions(chartId: $id, first: 100) {
		edges {
			node {
				... VersionFragment
			}
		}
	}
}
fragment VersionFragment on Version {
	id
	helm
	readme
	version
	valuesTemplate
	templateType
	package
	crds {
		... CrdFragment
	}
	dependencies {
		... DependenciesFragment
	}
	insertedAt
}
fragment CrdFragment on Crd {
	id
	name
	blob
}
fragment DependenciesFragment on Dependencies {
	dependencies {
		type
		name
		repo
		optional
		version
	}
	breaking
	instructions {
		instructions
		script
	}
	wait
	application
	providers
	secrets
	wirings {
		terraform
		helm
	}
	providerWirings
	outputs
	providerVsn
	cliVsn
}
`

func (c *Client) GetVersions(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetVersions, error) {
	vars := map[string]any{
		"id": id,
	}

	var res GetVersions
	if err := c.Client.Post(ctx, "GetVersions", GetVersionsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetChartInstallationsDocument = `query GetChartInstallations ($id: ID!) {
	chartInstallations(repositoryId: $id, first: 100) {
		edges {
			node {
				... ChartInstallationFragment
			}
		}
	}
}
fragment ChartInstallationFragment on ChartInstallation {
	id
	chart {
		... ChartFragment
		dependencies {
			... DependenciesFragment
		}
	}
	version {
		... VersionFragment
	}
}
fragment ChartFragment on Chart {
	id
	name
	description
	latestVersion
}
fragment DependenciesFragment on Dependencies {
	dependencies {
		type
		name
		repo
		optional
		version
	}
	breaking
	instructions {
		instructions
		script
	}
	wait
	application
	providers
	secrets
	wirings {
		terraform
		helm
	}
	providerWirings
	outputs
	providerVsn
	cliVsn
}
fragment VersionFragment on Version {
	id
	helm
	readme
	version
	valuesTemplate
	templateType
	package
	crds {
		... CrdFragment
	}
	dependencies {
		... DependenciesFragment
	}
	insertedAt
}
fragment CrdFragment on Crd {
	id
	name
	blob
}
`

func (c *Client) GetChartInstallations(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetChartInstallations, error) {
	vars := map[string]any{
		"id": id,
	}

	var res GetChartInstallations
	if err := c.Client.Post(ctx, "GetChartInstallations", GetChartInstallationsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetPackageInstallationsDocument = `query GetPackageInstallations ($id: ID!) {
	chartInstallations(repositoryId: $id, first: 100) {
		edges {
			node {
				... ChartInstallationFragment
			}
		}
	}
	terraformInstallations(repositoryId: $id, first: 100) {
		edges {
			node {
				... TerraformInstallationFragment
			}
		}
	}
}
fragment ChartInstallationFragment on ChartInstallation {
	id
	chart {
		... ChartFragment
		dependencies {
			... DependenciesFragment
		}
	}
	version {
		... VersionFragment
	}
}
fragment ChartFragment on Chart {
	id
	name
	description
	latestVersion
}
fragment DependenciesFragment on Dependencies {
	dependencies {
		type
		name
		repo
		optional
		version
	}
	breaking
	instructions {
		instructions
		script
	}
	wait
	application
	providers
	secrets
	wirings {
		terraform
		helm
	}
	providerWirings
	outputs
	providerVsn
	cliVsn
}
fragment VersionFragment on Version {
	id
	helm
	readme
	version
	valuesTemplate
	templateType
	package
	crds {
		... CrdFragment
	}
	dependencies {
		... DependenciesFragment
	}
	insertedAt
}
fragment CrdFragment on Crd {
	id
	name
	blob
}
fragment TerraformInstallationFragment on TerraformInstallation {
	id
	terraform {
		... TerraformFragment
	}
	version {
		... VersionFragment
	}
}
fragment TerraformFragment on Terraform {
	id
	name
	package
	description
	dependencies {
		... DependenciesFragment
	}
	valuesTemplate
}
`

func (c *Client) GetPackageInstallations(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetPackageInstallations, error) {
	vars := map[string]any{
		"id": id,
	}

	var res GetPackageInstallations
	if err := c.Client.Post(ctx, "GetPackageInstallations", GetPackageInstallationsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateCrdDocument = `mutation CreateCrd ($chartName: ChartName!, $name: String!, $blob: UploadOrUrl!) {
	createCrd(chartName: $chartName, attributes: {name:$name,blob:$blob}) {
		id
	}
}
`

func (c *Client) CreateCrd(ctx context.Context, chartName ChartName, name string, blob string, interceptors ...clientv2.RequestInterceptor) (*CreateCrd, error) {
	vars := map[string]any{
		"chartName": chartName,
		"name":      name,
		"blob":      blob,
	}

	var res CreateCrd
	if err := c.Client.Post(ctx, "CreateCrd", CreateCrdDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UninstallChartDocument = `mutation UninstallChart ($id: ID!) {
	deleteChartInstallation(id: $id) {
		id
	}
}
`

func (c *Client) UninstallChart(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*UninstallChart, error) {
	vars := map[string]any{
		"id": id,
	}

	var res UninstallChart
	if err := c.Client.Post(ctx, "UninstallChart", UninstallChartDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetConsoleInstancesDocument = `query GetConsoleInstances ($first: Int!) {
	consoleInstances(first: $first) {
		edges {
			node {
				... ConsoleInstanceFragment
			}
		}
	}
}
fragment ConsoleInstanceFragment on ConsoleInstance {
	id
	name
	url
}
`

func (c *Client) GetConsoleInstances(ctx context.Context, first int64, interceptors ...clientv2.RequestInterceptor) (*GetConsoleInstances, error) {
	vars := map[string]any{
		"first": first,
	}

	var res GetConsoleInstances
	if err := c.Client.Post(ctx, "GetConsoleInstances", GetConsoleInstancesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateConsoleInstanceDocument = `mutation UpdateConsoleInstance ($id: ID!, $attributes: ConsoleInstanceUpdateAttributes!) {
	updateConsoleInstance(id: $id, attributes: $attributes) {
		... ConsoleInstanceFragment
	}
}
fragment ConsoleInstanceFragment on ConsoleInstance {
	id
	name
	url
}
`

func (c *Client) UpdateConsoleInstance(ctx context.Context, id string, attributes ConsoleInstanceUpdateAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdateConsoleInstance, error) {
	vars := map[string]any{
		"id":         id,
		"attributes": attributes,
	}

	var res UpdateConsoleInstance
	if err := c.Client.Post(ctx, "UpdateConsoleInstance", UpdateConsoleInstanceDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DestroyClusterDocument = `mutation DestroyCluster ($domain: String!, $name: String!, $provider: Provider!) {
	destroyCluster(domain: $domain, name: $name, provider: $provider)
}
`

func (c *Client) DestroyCluster(ctx context.Context, domain string, name string, provider Provider, interceptors ...clientv2.RequestInterceptor) (*DestroyCluster, error) {
	vars := map[string]any{
		"domain":   domain,
		"name":     name,
		"provider": provider,
	}

	var res DestroyCluster
	if err := c.Client.Post(ctx, "DestroyCluster", DestroyClusterDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const ClustersDocument = `query Clusters ($cursor: String) {
	clusters(first: 50, after: $cursor) {
		pageInfo {
			hasNextPage
			endCursor
		}
		edges {
			node {
				... ClusterFragment
			}
		}
	}
}
fragment ClusterFragment on Cluster {
	id
	name
	provider
	source
	gitUrl
	owner {
		... UserFragment
	}
}
fragment UserFragment on User {
	id
	name
	email
}
`

func (c *Client) Clusters(ctx context.Context, cursor *string, interceptors ...clientv2.RequestInterceptor) (*Clusters, error) {
	vars := map[string]any{
		"cursor": cursor,
	}

	var res Clusters
	if err := c.Client.Post(ctx, "Clusters", ClustersDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const ClusterInfoDocument = `query ClusterInfo ($id: ID!) {
	cluster(id: $id) {
		... ClusterFragment
		upgradeInfo {
			installation {
				repository {
					... RepositoryFragment
				}
			}
			count
		}
	}
}
fragment ClusterFragment on Cluster {
	id
	name
	provider
	source
	gitUrl
	owner {
		... UserFragment
	}
}
fragment UserFragment on User {
	id
	name
	email
}
fragment RepositoryFragment on Repository {
	id
	name
	notes
	icon
	darkIcon
	description
	publisher {
		name
	}
	recipes {
		name
	}
}
`

func (c *Client) ClusterInfo(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*ClusterInfo, error) {
	vars := map[string]any{
		"id": id,
	}

	var res ClusterInfo
	if err := c.Client.Post(ctx, "ClusterInfo", ClusterInfoDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateDependencyDocument = `mutation CreateDependency ($sourceId: ID!, $destId: ID!) {
	createClusterDependency(sourceId: $sourceId, destId: $destId) {
		id
	}
}
`

func (c *Client) CreateDependency(ctx context.Context, sourceID string, destID string, interceptors ...clientv2.RequestInterceptor) (*CreateDependency, error) {
	vars := map[string]any{
		"sourceId": sourceID,
		"destId":   destID,
	}

	var res CreateDependency
	if err := c.Client.Post(ctx, "CreateDependency", CreateDependencyDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const PromoteClusterDocument = `mutation PromoteCluster {
	promote {
		... UserFragment
	}
}
fragment UserFragment on User {
	id
	name
	email
}
`

func (c *Client) PromoteCluster(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*PromoteCluster, error) {
	vars := map[string]any{}

	var res PromoteCluster
	if err := c.Client.Post(ctx, "PromoteCluster", PromoteClusterDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const TransferOwnershipDocument = `mutation TransferOwnership ($name: String!, $email: String!) {
	transferOwnership(name: $name, email: $email) {
		id
	}
}
`

func (c *Client) TransferOwnership(ctx context.Context, name string, email string, interceptors ...clientv2.RequestInterceptor) (*TransferOwnership, error) {
	vars := map[string]any{
		"name":  name,
		"email": email,
	}

	var res TransferOwnership
	if err := c.Client.Post(ctx, "TransferOwnership", TransferOwnershipDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetDNSRecordsDocument = `query GetDnsRecords ($cluster: String!, $provider: Provider!) {
	dnsRecords(cluster: $cluster, provider: $provider, first: 500) {
		edges {
			node {
				... DnsRecordFragment
			}
		}
	}
}
fragment DnsRecordFragment on DnsRecord {
	type
	name
	records
}
`

func (c *Client) GetDNSRecords(ctx context.Context, cluster string, provider Provider, interceptors ...clientv2.RequestInterceptor) (*GetDNSRecords, error) {
	vars := map[string]any{
		"cluster":  cluster,
		"provider": provider,
	}

	var res GetDNSRecords
	if err := c.Client.Post(ctx, "GetDnsRecords", GetDNSRecordsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateDNSRecordDocument = `mutation CreateDnsRecord ($cluster: String!, $provider: Provider!, $attributes: DnsRecordAttributes!) {
	createDnsRecord(cluster: $cluster, provider: $provider, attributes: $attributes) {
		... DnsRecordFragment
	}
}
fragment DnsRecordFragment on DnsRecord {
	type
	name
	records
}
`

func (c *Client) CreateDNSRecord(ctx context.Context, cluster string, provider Provider, attributes DNSRecordAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateDNSRecord, error) {
	vars := map[string]any{
		"cluster":    cluster,
		"provider":   provider,
		"attributes": attributes,
	}

	var res CreateDNSRecord
	if err := c.Client.Post(ctx, "CreateDnsRecord", CreateDNSRecordDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteDNSRecordDocument = `mutation DeleteDnsRecord ($name: String!, $type: DnsRecordType!) {
	deleteDnsRecord(name: $name, type: $type) {
		... DnsRecordFragment
	}
}
fragment DnsRecordFragment on DnsRecord {
	type
	name
	records
}
`

func (c *Client) DeleteDNSRecord(ctx context.Context, name string, typeArg DNSRecordType, interceptors ...clientv2.RequestInterceptor) (*DeleteDNSRecord, error) {
	vars := map[string]any{
		"name": name,
		"type": typeArg,
	}

	var res DeleteDNSRecord
	if err := c.Client.Post(ctx, "DeleteDnsRecord", DeleteDNSRecordDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateDomainDocument = `mutation CreateDomain ($name: String!) {
	provisionDomain(name: $name) {
		... DnsDomainFragment
	}
}
fragment DnsDomainFragment on DnsDomain {
	id
	name
}
`

func (c *Client) CreateDomain(ctx context.Context, name string, interceptors ...clientv2.RequestInterceptor) (*CreateDomain, error) {
	vars := map[string]any{
		"name": name,
	}

	var res CreateDomain
	if err := c.Client.Post(ctx, "CreateDomain", CreateDomainDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetInstallationDocument = `query GetInstallation ($name: String) {
	installation(name: $name) {
		... InstallationFragment
	}
}
fragment InstallationFragment on Installation {
	id
	context
	licenseKey
	acmeKeyId
	acmeSecret
	repository {
		... RepositoryFragment
	}
	oidcProvider {
		... OIDCProvider
	}
}
fragment RepositoryFragment on Repository {
	id
	name
	notes
	icon
	darkIcon
	description
	publisher {
		name
	}
	recipes {
		name
	}
}
fragment OIDCProvider on OidcProvider {
	id
	clientId
	clientSecret
	redirectUris
	bindings {
		user {
			id
			email
		}
		group {
			id
			name
		}
	}
	configuration {
		issuer
		authorizationEndpoint
		tokenEndpoint
		jwksUri
		userinfoEndpoint
	}
}
`

func (c *Client) GetInstallation(ctx context.Context, name *string, interceptors ...clientv2.RequestInterceptor) (*GetInstallation, error) {
	vars := map[string]any{
		"name": name,
	}

	var res GetInstallation
	if err := c.Client.Post(ctx, "GetInstallation", GetInstallationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetInstallationByIDDocument = `query GetInstallationById ($id: ID) {
	installation(id: $id) {
		... InstallationFragment
	}
}
fragment InstallationFragment on Installation {
	id
	context
	licenseKey
	acmeKeyId
	acmeSecret
	repository {
		... RepositoryFragment
	}
	oidcProvider {
		... OIDCProvider
	}
}
fragment RepositoryFragment on Repository {
	id
	name
	notes
	icon
	darkIcon
	description
	publisher {
		name
	}
	recipes {
		name
	}
}
fragment OIDCProvider on OidcProvider {
	id
	clientId
	clientSecret
	redirectUris
	bindings {
		user {
			id
			email
		}
		group {
			id
			name
		}
	}
	configuration {
		issuer
		authorizationEndpoint
		tokenEndpoint
		jwksUri
		userinfoEndpoint
	}
}
`

func (c *Client) GetInstallationByID(ctx context.Context, id *string, interceptors ...clientv2.RequestInterceptor) (*GetInstallationByID, error) {
	vars := map[string]any{
		"id": id,
	}

	var res GetInstallationByID
	if err := c.Client.Post(ctx, "GetInstallationById", GetInstallationByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetInstallationsDocument = `query GetInstallations {
	installations(first: 100) {
		edges {
			node {
				... InstallationFragment
			}
		}
	}
}
fragment InstallationFragment on Installation {
	id
	context
	licenseKey
	acmeKeyId
	acmeSecret
	repository {
		... RepositoryFragment
	}
	oidcProvider {
		... OIDCProvider
	}
}
fragment RepositoryFragment on Repository {
	id
	name
	notes
	icon
	darkIcon
	description
	publisher {
		name
	}
	recipes {
		name
	}
}
fragment OIDCProvider on OidcProvider {
	id
	clientId
	clientSecret
	redirectUris
	bindings {
		user {
			id
			email
		}
		group {
			id
			name
		}
	}
	configuration {
		issuer
		authorizationEndpoint
		tokenEndpoint
		jwksUri
		userinfoEndpoint
	}
}
`

func (c *Client) GetInstallations(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetInstallations, error) {
	vars := map[string]any{}

	var res GetInstallations
	if err := c.Client.Post(ctx, "GetInstallations", GetInstallationsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpsertOidcProviderDocument = `mutation UpsertOidcProvider ($id: ID!, $attributes: OidcAttributes!) {
	upsertOidcProvider(installationId: $id, attributes: $attributes) {
		id
	}
}
`

func (c *Client) UpsertOidcProvider(ctx context.Context, id string, attributes OidcAttributes, interceptors ...clientv2.RequestInterceptor) (*UpsertOidcProvider, error) {
	vars := map[string]any{
		"id":         id,
		"attributes": attributes,
	}

	var res UpsertOidcProvider
	if err := c.Client.Post(ctx, "UpsertOidcProvider", UpsertOidcProviderDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const ResetInstallationsDocument = `mutation ResetInstallations {
	resetInstallations
}
`

func (c *Client) ResetInstallations(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*ResetInstallations, error) {
	vars := map[string]any{}

	var res ResetInstallations
	if err := c.Client.Post(ctx, "ResetInstallations", ResetInstallationsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateInstallationDocument = `mutation CreateInstallation ($id: ID!) {
	createInstallation(repositoryId: $id) {
		id
	}
}
`

func (c *Client) CreateInstallation(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*CreateInstallation, error) {
	vars := map[string]any{
		"id": id,
	}

	var res CreateInstallation
	if err := c.Client.Post(ctx, "CreateInstallation", CreateInstallationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteInstallationDocument = `mutation DeleteInstallation ($id: ID!) {
	deleteInstallation(id: $id) {
		id
	}
}
`

func (c *Client) DeleteInstallation(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteInstallation, error) {
	vars := map[string]any{
		"id": id,
	}

	var res DeleteInstallation
	if err := c.Client.Post(ctx, "DeleteInstallation", DeleteInstallationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const MarkSyncedDocument = `mutation MarkSynced ($repository: String!) {
	synced(repository: $repository)
}
`

func (c *Client) MarkSynced(ctx context.Context, repository string, interceptors ...clientv2.RequestInterceptor) (*MarkSynced, error) {
	vars := map[string]any{
		"repository": repository,
	}

	var res MarkSynced
	if err := c.Client.Post(ctx, "MarkSynced", MarkSyncedDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetRecipeDocument = `query GetRecipe ($repo: String, $name: String) {
	recipe(repo: $repo, name: $name) {
		... RecipeFragment
		recipeDependencies {
			... RecipeFragment
		}
	}
}
fragment RecipeFragment on Recipe {
	id
	name
	primary
	description
	restricted
	provider
	tests {
		type
		name
		message
		args {
			name
			repo
			key
		}
	}
	repository {
		id
		name
	}
	oidcSettings {
		uriFormat
		uriFormats
		authMethod
		domainKey
		subdomain
	}
	recipeSections {
		... RecipeSectionFragment
	}
}
fragment RecipeSectionFragment on RecipeSection {
	index
	repository {
		... RepositoryFragment
	}
	recipeItems {
		... RecipeItemFragment
	}
	configuration {
		... RecipeConfigurationFragment
	}
}
fragment RepositoryFragment on Repository {
	id
	name
	notes
	icon
	darkIcon
	description
	publisher {
		name
	}
	recipes {
		name
	}
}
fragment RecipeItemFragment on RecipeItem {
	id
	chart {
		... ChartFragment
	}
	terraform {
		... TerraformFragment
	}
	configuration {
		... RecipeConfigurationFragment
	}
}
fragment ChartFragment on Chart {
	id
	name
	description
	latestVersion
}
fragment TerraformFragment on Terraform {
	id
	name
	package
	description
	dependencies {
		... DependenciesFragment
	}
	valuesTemplate
}
fragment DependenciesFragment on Dependencies {
	dependencies {
		type
		name
		repo
		optional
		version
	}
	breaking
	instructions {
		instructions
		script
	}
	wait
	application
	providers
	secrets
	wirings {
		terraform
		helm
	}
	providerWirings
	outputs
	providerVsn
	cliVsn
}
fragment RecipeConfigurationFragment on RecipeConfiguration {
	name
	type
	default
	documentation
	optional
	placeholder
	functionName
	condition {
		field
		operation
		value
	}
	validation {
		type
		regex
		message
	}
}
`

func (c *Client) GetRecipe(ctx context.Context, repo *string, name *string, interceptors ...clientv2.RequestInterceptor) (*GetRecipe, error) {
	vars := map[string]any{
		"repo": repo,
		"name": name,
	}

	var res GetRecipe
	if err := c.Client.Post(ctx, "GetRecipe", GetRecipeDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetRecipeByIDDocument = `query GetRecipeByID ($id: ID) {
	recipe(id: $id) {
		... RecipeFragment
		recipeDependencies {
			... RecipeFragment
		}
	}
}
fragment RecipeFragment on Recipe {
	id
	name
	primary
	description
	restricted
	provider
	tests {
		type
		name
		message
		args {
			name
			repo
			key
		}
	}
	repository {
		id
		name
	}
	oidcSettings {
		uriFormat
		uriFormats
		authMethod
		domainKey
		subdomain
	}
	recipeSections {
		... RecipeSectionFragment
	}
}
fragment RecipeSectionFragment on RecipeSection {
	index
	repository {
		... RepositoryFragment
	}
	recipeItems {
		... RecipeItemFragment
	}
	configuration {
		... RecipeConfigurationFragment
	}
}
fragment RepositoryFragment on Repository {
	id
	name
	notes
	icon
	darkIcon
	description
	publisher {
		name
	}
	recipes {
		name
	}
}
fragment RecipeItemFragment on RecipeItem {
	id
	chart {
		... ChartFragment
	}
	terraform {
		... TerraformFragment
	}
	configuration {
		... RecipeConfigurationFragment
	}
}
fragment ChartFragment on Chart {
	id
	name
	description
	latestVersion
}
fragment TerraformFragment on Terraform {
	id
	name
	package
	description
	dependencies {
		... DependenciesFragment
	}
	valuesTemplate
}
fragment DependenciesFragment on Dependencies {
	dependencies {
		type
		name
		repo
		optional
		version
	}
	breaking
	instructions {
		instructions
		script
	}
	wait
	application
	providers
	secrets
	wirings {
		terraform
		helm
	}
	providerWirings
	outputs
	providerVsn
	cliVsn
}
fragment RecipeConfigurationFragment on RecipeConfiguration {
	name
	type
	default
	documentation
	optional
	placeholder
	functionName
	condition {
		field
		operation
		value
	}
	validation {
		type
		regex
		message
	}
}
`

func (c *Client) GetRecipeByID(ctx context.Context, id *string, interceptors ...clientv2.RequestInterceptor) (*GetRecipeByID, error) {
	vars := map[string]any{
		"id": id,
	}

	var res GetRecipeByID
	if err := c.Client.Post(ctx, "GetRecipeByID", GetRecipeByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const ListRecipesDocument = `query ListRecipes ($repo: String, $provider: Provider) {
	recipes(repositoryName: $repo, provider: $provider, first: 500) {
		edges {
			node {
				... RecipeFragment
			}
		}
	}
}
fragment RecipeFragment on Recipe {
	id
	name
	primary
	description
	restricted
	provider
	tests {
		type
		name
		message
		args {
			name
			repo
			key
		}
	}
	repository {
		id
		name
	}
	oidcSettings {
		uriFormat
		uriFormats
		authMethod
		domainKey
		subdomain
	}
	recipeSections {
		... RecipeSectionFragment
	}
}
fragment RecipeSectionFragment on RecipeSection {
	index
	repository {
		... RepositoryFragment
	}
	recipeItems {
		... RecipeItemFragment
	}
	configuration {
		... RecipeConfigurationFragment
	}
}
fragment RepositoryFragment on Repository {
	id
	name
	notes
	icon
	darkIcon
	description
	publisher {
		name
	}
	recipes {
		name
	}
}
fragment RecipeItemFragment on RecipeItem {
	id
	chart {
		... ChartFragment
	}
	terraform {
		... TerraformFragment
	}
	configuration {
		... RecipeConfigurationFragment
	}
}
fragment ChartFragment on Chart {
	id
	name
	description
	latestVersion
}
fragment TerraformFragment on Terraform {
	id
	name
	package
	description
	dependencies {
		... DependenciesFragment
	}
	valuesTemplate
}
fragment DependenciesFragment on Dependencies {
	dependencies {
		type
		name
		repo
		optional
		version
	}
	breaking
	instructions {
		instructions
		script
	}
	wait
	application
	providers
	secrets
	wirings {
		terraform
		helm
	}
	providerWirings
	outputs
	providerVsn
	cliVsn
}
fragment RecipeConfigurationFragment on RecipeConfiguration {
	name
	type
	default
	documentation
	optional
	placeholder
	functionName
	condition {
		field
		operation
		value
	}
	validation {
		type
		regex
		message
	}
}
`

func (c *Client) ListRecipes(ctx context.Context, repo *string, provider *Provider, interceptors ...clientv2.RequestInterceptor) (*ListRecipes, error) {
	vars := map[string]any{
		"repo":     repo,
		"provider": provider,
	}

	var res ListRecipes
	if err := c.Client.Post(ctx, "ListRecipes", ListRecipesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const ListAllRecipesDocument = `query ListAllRecipes ($repo: String) {
	recipes(repositoryName: $repo, first: 500) {
		edges {
			node {
				... RecipeFragment
			}
		}
	}
}
fragment RecipeFragment on Recipe {
	id
	name
	primary
	description
	restricted
	provider
	tests {
		type
		name
		message
		args {
			name
			repo
			key
		}
	}
	repository {
		id
		name
	}
	oidcSettings {
		uriFormat
		uriFormats
		authMethod
		domainKey
		subdomain
	}
	recipeSections {
		... RecipeSectionFragment
	}
}
fragment RecipeSectionFragment on RecipeSection {
	index
	repository {
		... RepositoryFragment
	}
	recipeItems {
		... RecipeItemFragment
	}
	configuration {
		... RecipeConfigurationFragment
	}
}
fragment RepositoryFragment on Repository {
	id
	name
	notes
	icon
	darkIcon
	description
	publisher {
		name
	}
	recipes {
		name
	}
}
fragment RecipeItemFragment on RecipeItem {
	id
	chart {
		... ChartFragment
	}
	terraform {
		... TerraformFragment
	}
	configuration {
		... RecipeConfigurationFragment
	}
}
fragment ChartFragment on Chart {
	id
	name
	description
	latestVersion
}
fragment TerraformFragment on Terraform {
	id
	name
	package
	description
	dependencies {
		... DependenciesFragment
	}
	valuesTemplate
}
fragment DependenciesFragment on Dependencies {
	dependencies {
		type
		name
		repo
		optional
		version
	}
	breaking
	instructions {
		instructions
		script
	}
	wait
	application
	providers
	secrets
	wirings {
		terraform
		helm
	}
	providerWirings
	outputs
	providerVsn
	cliVsn
}
fragment RecipeConfigurationFragment on RecipeConfiguration {
	name
	type
	default
	documentation
	optional
	placeholder
	functionName
	condition {
		field
		operation
		value
	}
	validation {
		type
		regex
		message
	}
}
`

func (c *Client) ListAllRecipes(ctx context.Context, repo *string, interceptors ...clientv2.RequestInterceptor) (*ListAllRecipes, error) {
	vars := map[string]any{
		"repo": repo,
	}

	var res ListAllRecipes
	if err := c.Client.Post(ctx, "ListAllRecipes", ListAllRecipesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateRecipeDocument = `mutation CreateRecipe ($name: String!, $attributes: RecipeAttributes!) {
	createRecipe(repositoryName: $name, attributes: $attributes) {
		id
	}
}
`

func (c *Client) CreateRecipe(ctx context.Context, name string, attributes RecipeAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateRecipe, error) {
	vars := map[string]any{
		"name":       name,
		"attributes": attributes,
	}

	var res CreateRecipe
	if err := c.Client.Post(ctx, "CreateRecipe", CreateRecipeDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const InstallRecipeDocument = `mutation InstallRecipe ($id: ID!) {
	installRecipe(recipeId: $id, context: "{}") {
		id
	}
}
`

func (c *Client) InstallRecipe(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*InstallRecipe, error) {
	vars := map[string]any{
		"id": id,
	}

	var res InstallRecipe
	if err := c.Client.Post(ctx, "InstallRecipe", InstallRecipeDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateStackDocument = `mutation CreateStack ($attributes: StackAttributes!) {
	createStack(attributes: $attributes) {
		id
	}
}
`

func (c *Client) CreateStack(ctx context.Context, attributes StackAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateStack, error) {
	vars := map[string]any{
		"attributes": attributes,
	}

	var res CreateStack
	if err := c.Client.Post(ctx, "CreateStack", CreateStackDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetStackDocument = `query GetStack ($name: String!, $provider: Provider!) {
	stack(name: $name, provider: $provider) {
		... StackFragment
	}
}
fragment StackFragment on Stack {
	id
	name
	featured
	description
	bundles {
		... RecipeFragment
	}
}
fragment RecipeFragment on Recipe {
	id
	name
	primary
	description
	restricted
	provider
	tests {
		type
		name
		message
		args {
			name
			repo
			key
		}
	}
	repository {
		id
		name
	}
	oidcSettings {
		uriFormat
		uriFormats
		authMethod
		domainKey
		subdomain
	}
	recipeSections {
		... RecipeSectionFragment
	}
}
fragment RecipeSectionFragment on RecipeSection {
	index
	repository {
		... RepositoryFragment
	}
	recipeItems {
		... RecipeItemFragment
	}
	configuration {
		... RecipeConfigurationFragment
	}
}
fragment RepositoryFragment on Repository {
	id
	name
	notes
	icon
	darkIcon
	description
	publisher {
		name
	}
	recipes {
		name
	}
}
fragment RecipeItemFragment on RecipeItem {
	id
	chart {
		... ChartFragment
	}
	terraform {
		... TerraformFragment
	}
	configuration {
		... RecipeConfigurationFragment
	}
}
fragment ChartFragment on Chart {
	id
	name
	description
	latestVersion
}
fragment TerraformFragment on Terraform {
	id
	name
	package
	description
	dependencies {
		... DependenciesFragment
	}
	valuesTemplate
}
fragment DependenciesFragment on Dependencies {
	dependencies {
		type
		name
		repo
		optional
		version
	}
	breaking
	instructions {
		instructions
		script
	}
	wait
	application
	providers
	secrets
	wirings {
		terraform
		helm
	}
	providerWirings
	outputs
	providerVsn
	cliVsn
}
fragment RecipeConfigurationFragment on RecipeConfiguration {
	name
	type
	default
	documentation
	optional
	placeholder
	functionName
	condition {
		field
		operation
		value
	}
	validation {
		type
		regex
		message
	}
}
`

func (c *Client) GetStack(ctx context.Context, name string, provider Provider, interceptors ...clientv2.RequestInterceptor) (*GetStack, error) {
	vars := map[string]any{
		"name":     name,
		"provider": provider,
	}

	var res GetStack
	if err := c.Client.Post(ctx, "GetStack", GetStackDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const ListStacksDocument = `query ListStacks ($featured: Boolean, $cursor: String) {
	stacks(first: 100, after: $cursor, featured: $featured) {
		edges {
			node {
				... StackFragment
			}
		}
	}
}
fragment StackFragment on Stack {
	id
	name
	featured
	description
	bundles {
		... RecipeFragment
	}
}
fragment RecipeFragment on Recipe {
	id
	name
	primary
	description
	restricted
	provider
	tests {
		type
		name
		message
		args {
			name
			repo
			key
		}
	}
	repository {
		id
		name
	}
	oidcSettings {
		uriFormat
		uriFormats
		authMethod
		domainKey
		subdomain
	}
	recipeSections {
		... RecipeSectionFragment
	}
}
fragment RecipeSectionFragment on RecipeSection {
	index
	repository {
		... RepositoryFragment
	}
	recipeItems {
		... RecipeItemFragment
	}
	configuration {
		... RecipeConfigurationFragment
	}
}
fragment RepositoryFragment on Repository {
	id
	name
	notes
	icon
	darkIcon
	description
	publisher {
		name
	}
	recipes {
		name
	}
}
fragment RecipeItemFragment on RecipeItem {
	id
	chart {
		... ChartFragment
	}
	terraform {
		... TerraformFragment
	}
	configuration {
		... RecipeConfigurationFragment
	}
}
fragment ChartFragment on Chart {
	id
	name
	description
	latestVersion
}
fragment TerraformFragment on Terraform {
	id
	name
	package
	description
	dependencies {
		... DependenciesFragment
	}
	valuesTemplate
}
fragment DependenciesFragment on Dependencies {
	dependencies {
		type
		name
		repo
		optional
		version
	}
	breaking
	instructions {
		instructions
		script
	}
	wait
	application
	providers
	secrets
	wirings {
		terraform
		helm
	}
	providerWirings
	outputs
	providerVsn
	cliVsn
}
fragment RecipeConfigurationFragment on RecipeConfiguration {
	name
	type
	default
	documentation
	optional
	placeholder
	functionName
	condition {
		field
		operation
		value
	}
	validation {
		type
		regex
		message
	}
}
`

func (c *Client) ListStacks(ctx context.Context, featured *bool, cursor *string, interceptors ...clientv2.RequestInterceptor) (*ListStacks, error) {
	vars := map[string]any{
		"featured": featured,
		"cursor":   cursor,
	}

	var res ListStacks
	if err := c.Client.Post(ctx, "ListStacks", ListStacksDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetRepositoryDocument = `query GetRepository ($name: String) {
	repository(name: $name) {
		... RepositoryFragment
	}
}
fragment RepositoryFragment on Repository {
	id
	name
	notes
	icon
	darkIcon
	description
	publisher {
		name
	}
	recipes {
		name
	}
}
`

func (c *Client) GetRepository(ctx context.Context, name *string, interceptors ...clientv2.RequestInterceptor) (*GetRepository, error) {
	vars := map[string]any{
		"name": name,
	}

	var res GetRepository
	if err := c.Client.Post(ctx, "GetRepository", GetRepositoryDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateResourceDefinitionDocument = `mutation CreateResourceDefinition ($name: String!, $input: ResourceDefinitionAttributes!) {
	updateRepository(repositoryName: $name, attributes: {integrationResourceDefinition:$input}) {
		id
	}
}
`

func (c *Client) CreateResourceDefinition(ctx context.Context, name string, input ResourceDefinitionAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateResourceDefinition, error) {
	vars := map[string]any{
		"name":  name,
		"input": input,
	}

	var res CreateResourceDefinition
	if err := c.Client.Post(ctx, "CreateResourceDefinition", CreateResourceDefinitionDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateIntegrationDocument = `mutation CreateIntegration ($name: String!, $attrs: IntegrationAttributes!) {
	createIntegration(repositoryName: $name, attributes: $attrs) {
		id
	}
}
`

func (c *Client) CreateIntegration(ctx context.Context, name string, attrs IntegrationAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateIntegration, error) {
	vars := map[string]any{
		"name":  name,
		"attrs": attrs,
	}

	var res CreateIntegration
	if err := c.Client.Post(ctx, "CreateIntegration", CreateIntegrationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateRepositoryDocument = `mutation UpdateRepository ($name: String!, $attrs: RepositoryAttributes!) {
	updateRepository(repositoryName: $name, attributes: $attrs) {
		id
	}
}
`

func (c *Client) UpdateRepository(ctx context.Context, name string, attrs RepositoryAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdateRepository, error) {
	vars := map[string]any{
		"name":  name,
		"attrs": attrs,
	}

	var res UpdateRepository
	if err := c.Client.Post(ctx, "UpdateRepository", UpdateRepositoryDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateRepositoryDocument = `mutation CreateRepository ($name: String!, $publisher: String!, $attributes: RepositoryAttributes!) {
	upsertRepository(name: $name, publisher: $publisher, attributes: $attributes) {
		id
	}
}
`

func (c *Client) CreateRepository(ctx context.Context, name string, publisher string, attributes RepositoryAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateRepository, error) {
	vars := map[string]any{
		"name":       name,
		"publisher":  publisher,
		"attributes": attributes,
	}

	var res CreateRepository
	if err := c.Client.Post(ctx, "CreateRepository", CreateRepositoryDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const AcquireLockDocument = `mutation AcquireLock ($name: String!) {
	acquireLock(repository: $name) {
		... ApplyLockFragment
	}
}
fragment ApplyLockFragment on ApplyLock {
	id
	lock
}
`

func (c *Client) AcquireLock(ctx context.Context, name string, interceptors ...clientv2.RequestInterceptor) (*AcquireLock, error) {
	vars := map[string]any{
		"name": name,
	}

	var res AcquireLock
	if err := c.Client.Post(ctx, "AcquireLock", AcquireLockDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const ReleaseLockDocument = `mutation ReleaseLock ($name: String!, $attrs: LockAttributes!) {
	releaseLock(repository: $name, attributes: $attrs) {
		... ApplyLockFragment
	}
}
fragment ApplyLockFragment on ApplyLock {
	id
	lock
}
`

func (c *Client) ReleaseLock(ctx context.Context, name string, attrs LockAttributes, interceptors ...clientv2.RequestInterceptor) (*ReleaseLock, error) {
	vars := map[string]any{
		"name":  name,
		"attrs": attrs,
	}

	var res ReleaseLock
	if err := c.Client.Post(ctx, "ReleaseLock", ReleaseLockDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UnlockRepositoryDocument = `mutation UnlockRepository ($name: String!) {
	unlockRepository(name: $name)
}
`

func (c *Client) UnlockRepository(ctx context.Context, name string, interceptors ...clientv2.RequestInterceptor) (*UnlockRepository, error) {
	vars := map[string]any{
		"name": name,
	}

	var res UnlockRepository
	if err := c.Client.Post(ctx, "UnlockRepository", UnlockRepositoryDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const ListRepositoriesDocument = `query ListRepositories ($q: String) {
	repositories(q: $q, first: 100) {
		edges {
			node {
				... RepositoryFragment
			}
		}
	}
}
fragment RepositoryFragment on Repository {
	id
	name
	notes
	icon
	darkIcon
	description
	publisher {
		name
	}
	recipes {
		name
	}
}
`

func (c *Client) ListRepositories(ctx context.Context, q *string, interceptors ...clientv2.RequestInterceptor) (*ListRepositories, error) {
	vars := map[string]any{
		"q": q,
	}

	var res ListRepositories
	if err := c.Client.Post(ctx, "ListRepositories", ListRepositoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const ScaffoldsDocument = `query Scaffolds ($app: String!, $pub: String!, $cat: Category!, $ing: Boolean, $pg: Boolean) {
	scaffold(application: $app, publisher: $pub, category: $cat, ingress: $ing, postgres: $pg) {
		path
		content
	}
}
`

func (c *Client) Scaffolds(ctx context.Context, app string, pub string, cat Category, ing *bool, pg *bool, interceptors ...clientv2.RequestInterceptor) (*Scaffolds, error) {
	vars := map[string]any{
		"app": app,
		"pub": pub,
		"cat": cat,
		"ing": ing,
		"pg":  pg,
	}

	var res Scaffolds
	if err := c.Client.Post(ctx, "Scaffolds", ScaffoldsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteRepositoryDocument = `mutation DeleteRepository ($id: ID!) {
	deleteRepository(repositoryId: $id) {
		id
	}
}
`

func (c *Client) DeleteRepository(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteRepository, error) {
	vars := map[string]any{
		"id": id,
	}

	var res DeleteRepository
	if err := c.Client.Post(ctx, "DeleteRepository", DeleteRepositoryDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const ReleaseDocument = `mutation Release ($name: String!, $tags: [String!]) {
	release(repositoryName: $name, tags: $tags)
}
`

func (c *Client) Release(ctx context.Context, name string, tags []string, interceptors ...clientv2.RequestInterceptor) (*Release, error) {
	vars := map[string]any{
		"name": name,
		"tags": tags,
	}

	var res Release
	if err := c.Client.Post(ctx, "Release", ReleaseDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const InstallVersionDocument = `mutation InstallVersion ($type: DependencyType!, $repo: String!, $package: String!, $vsn: String!) {
	installVersion(type: $type, repository: $repo, package: $package, vsn: $vsn)
}
`

func (c *Client) InstallVersion(ctx context.Context, typeArg DependencyType, repo string, packageArg string, vsn string, interceptors ...clientv2.RequestInterceptor) (*InstallVersion, error) {
	vars := map[string]any{
		"type":    typeArg,
		"repo":    repo,
		"package": packageArg,
		"vsn":     vsn,
	}

	var res InstallVersion
	if err := c.Client.Post(ctx, "InstallVersion", InstallVersionDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetTfProvidersDocument = `query GetTfProviders {
	terraformProviders
}
`

func (c *Client) GetTfProviders(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetTfProviders, error) {
	vars := map[string]any{}

	var res GetTfProviders
	if err := c.Client.Post(ctx, "GetTfProviders", GetTfProvidersDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetTfProviderScaffoldDocument = `query GetTfProviderScaffold ($name: Provider!, $vsn: String) {
	terraformProvider(name: $name, vsn: $vsn) {
		name
		content
	}
}
`

func (c *Client) GetTfProviderScaffold(ctx context.Context, name Provider, vsn *string, interceptors ...clientv2.RequestInterceptor) (*GetTfProviderScaffold, error) {
	vars := map[string]any{
		"name": name,
		"vsn":  vsn,
	}

	var res GetTfProviderScaffold
	if err := c.Client.Post(ctx, "GetTfProviderScaffold", GetTfProviderScaffoldDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetShellDocument = `query GetShell {
	shell {
		... CloudShellFragment
	}
}
fragment CloudShellFragment on CloudShell {
	id
	aesKey
	gitUrl
}
`

func (c *Client) GetShell(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetShell, error) {
	vars := map[string]any{}

	var res GetShell
	if err := c.Client.Post(ctx, "GetShell", GetShellDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteShellDocument = `mutation DeleteShell {
	deleteShell {
		... CloudShellFragment
	}
}
fragment CloudShellFragment on CloudShell {
	id
	aesKey
	gitUrl
}
`

func (c *Client) DeleteShell(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*DeleteShell, error) {
	vars := map[string]any{}

	var res DeleteShell
	if err := c.Client.Post(ctx, "DeleteShell", DeleteShellDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetTerraformDocument = `query GetTerraform ($id: ID!) {
	terraform(repositoryId: $id, first: 100) {
		edges {
			node {
				... TerraformFragment
			}
		}
	}
}
fragment TerraformFragment on Terraform {
	id
	name
	package
	description
	dependencies {
		... DependenciesFragment
	}
	valuesTemplate
}
fragment DependenciesFragment on Dependencies {
	dependencies {
		type
		name
		repo
		optional
		version
	}
	breaking
	instructions {
		instructions
		script
	}
	wait
	application
	providers
	secrets
	wirings {
		terraform
		helm
	}
	providerWirings
	outputs
	providerVsn
	cliVsn
}
`

func (c *Client) GetTerraform(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetTerraform, error) {
	vars := map[string]any{
		"id": id,
	}

	var res GetTerraform
	if err := c.Client.Post(ctx, "GetTerraform", GetTerraformDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetTerraformVersionsDocument = `query GetTerraformVersions ($id: ID!) {
	versions(terraformId: $id, first: 100) {
		edges {
			node {
				... VersionFragment
			}
		}
	}
}
fragment VersionFragment on Version {
	id
	helm
	readme
	version
	valuesTemplate
	templateType
	package
	crds {
		... CrdFragment
	}
	dependencies {
		... DependenciesFragment
	}
	insertedAt
}
fragment CrdFragment on Crd {
	id
	name
	blob
}
fragment DependenciesFragment on Dependencies {
	dependencies {
		type
		name
		repo
		optional
		version
	}
	breaking
	instructions {
		instructions
		script
	}
	wait
	application
	providers
	secrets
	wirings {
		terraform
		helm
	}
	providerWirings
	outputs
	providerVsn
	cliVsn
}
`

func (c *Client) GetTerraformVersions(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetTerraformVersions, error) {
	vars := map[string]any{
		"id": id,
	}

	var res GetTerraformVersions
	if err := c.Client.Post(ctx, "GetTerraformVersions", GetTerraformVersionsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetTerraformInstallationsDocument = `query GetTerraformInstallations ($id: ID!) {
	terraformInstallations(repositoryId: $id, first: 100) {
		edges {
			node {
				... TerraformInstallationFragment
			}
		}
	}
}
fragment TerraformInstallationFragment on TerraformInstallation {
	id
	terraform {
		... TerraformFragment
	}
	version {
		... VersionFragment
	}
}
fragment TerraformFragment on Terraform {
	id
	name
	package
	description
	dependencies {
		... DependenciesFragment
	}
	valuesTemplate
}
fragment DependenciesFragment on Dependencies {
	dependencies {
		type
		name
		repo
		optional
		version
	}
	breaking
	instructions {
		instructions
		script
	}
	wait
	application
	providers
	secrets
	wirings {
		terraform
		helm
	}
	providerWirings
	outputs
	providerVsn
	cliVsn
}
fragment VersionFragment on Version {
	id
	helm
	readme
	version
	valuesTemplate
	templateType
	package
	crds {
		... CrdFragment
	}
	dependencies {
		... DependenciesFragment
	}
	insertedAt
}
fragment CrdFragment on Crd {
	id
	name
	blob
}
`

func (c *Client) GetTerraformInstallations(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetTerraformInstallations, error) {
	vars := map[string]any{
		"id": id,
	}

	var res GetTerraformInstallations
	if err := c.Client.Post(ctx, "GetTerraformInstallations", GetTerraformInstallationsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UploadTerraformDocument = `mutation UploadTerraform ($repoName: String!, $name: String!, $uploadOrUrl: UploadOrUrl!) {
	uploadTerraform(repositoryName: $repoName, name: $name, attributes: {name:$name,package:$uploadOrUrl}) {
		... TerraformFragment
	}
}
fragment TerraformFragment on Terraform {
	id
	name
	package
	description
	dependencies {
		... DependenciesFragment
	}
	valuesTemplate
}
fragment DependenciesFragment on Dependencies {
	dependencies {
		type
		name
		repo
		optional
		version
	}
	breaking
	instructions {
		instructions
		script
	}
	wait
	application
	providers
	secrets
	wirings {
		terraform
		helm
	}
	providerWirings
	outputs
	providerVsn
	cliVsn
}
`

func (c *Client) UploadTerraform(ctx context.Context, repoName string, name string, uploadOrURL string, interceptors ...clientv2.RequestInterceptor) (*UploadTerraform, error) {
	vars := map[string]any{
		"repoName":    repoName,
		"name":        name,
		"uploadOrUrl": uploadOrURL,
	}

	var res UploadTerraform
	if err := c.Client.Post(ctx, "UploadTerraform", UploadTerraformDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UninstallTerraformDocument = `mutation UninstallTerraform ($id: ID!) {
	uninstallTerraform(id: $id) {
		id
	}
}
`

func (c *Client) UninstallTerraform(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*UninstallTerraform, error) {
	vars := map[string]any{
		"id": id,
	}

	var res UninstallTerraform
	if err := c.Client.Post(ctx, "UninstallTerraform", UninstallTerraformDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateTestDocument = `mutation CreateTest ($name: String!, $attrs: TestAttributes!) {
	createTest(name: $name, attributes: $attrs) {
		... TestFragment
	}
}
fragment TestFragment on Test {
	id
	name
	status
	promoteTag
	steps {
		id
		name
		description
		status
	}
}
`

func (c *Client) CreateTest(ctx context.Context, name string, attrs TestAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateTest, error) {
	vars := map[string]any{
		"name":  name,
		"attrs": attrs,
	}

	var res CreateTest
	if err := c.Client.Post(ctx, "CreateTest", CreateTestDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateTestDocument = `mutation UpdateTest ($id: ID!, $attrs: TestAttributes!) {
	updateTest(id: $id, attributes: $attrs) {
		... TestFragment
	}
}
fragment TestFragment on Test {
	id
	name
	status
	promoteTag
	steps {
		id
		name
		description
		status
	}
}
`

func (c *Client) UpdateTest(ctx context.Context, id string, attrs TestAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdateTest, error) {
	vars := map[string]any{
		"id":    id,
		"attrs": attrs,
	}

	var res UpdateTest
	if err := c.Client.Post(ctx, "UpdateTest", UpdateTestDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateStepDocument = `mutation UpdateStep ($id: ID!, $logs: UploadOrUrl!) {
	updateStep(id: $id, attributes: {logs:$logs}) {
		id
	}
}
`

func (c *Client) UpdateStep(ctx context.Context, id string, logs string, interceptors ...clientv2.RequestInterceptor) (*UpdateStep, error) {
	vars := map[string]any{
		"id":   id,
		"logs": logs,
	}

	var res UpdateStep
	if err := c.Client.Post(ctx, "UpdateStep", UpdateStepDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const PublishLogsDocument = `mutation PublishLogs ($id: ID!, $logs: String!) {
	publishLogs(id: $id, logs: $logs) {
		id
	}
}
`

func (c *Client) PublishLogs(ctx context.Context, id string, logs string, interceptors ...clientv2.RequestInterceptor) (*PublishLogs, error) {
	vars := map[string]any{
		"id":   id,
		"logs": logs,
	}

	var res PublishLogs
	if err := c.Client.Post(ctx, "PublishLogs", PublishLogsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateUpgradeDocument = `mutation CreateUpgrade ($queue: String!, $repository: String!, $attributes: UpgradeAttributes!) {
	createUpgrade(queue: $queue, repositoryName: $repository, attributes: $attributes) {
		id
	}
}
`

func (c *Client) CreateUpgrade(ctx context.Context, queue string, repository string, attributes UpgradeAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateUpgrade, error) {
	vars := map[string]any{
		"queue":      queue,
		"repository": repository,
		"attributes": attributes,
	}

	var res CreateUpgrade
	if err := c.Client.Post(ctx, "CreateUpgrade", CreateUpgradeDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const MeDocument = `query Me {
	me {
		id
		email
		demoing
		trustRelationships {
			... OidcTrustRelationshipFragment
		}
	}
}
fragment OidcTrustRelationshipFragment on OidcTrustRelationship {
	id
	issuer
	trust
	scopes
	insertedAt
}
`

func (c *Client) Me(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*Me, error) {
	vars := map[string]any{}

	var res Me
	if err := c.Client.Post(ctx, "Me", MeDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetLoginMethodDocument = `query GetLoginMethod ($email: String!) {
	loginMethod(email: $email) {
		loginMethod
		token
	}
}
`

func (c *Client) GetLoginMethod(ctx context.Context, email string, interceptors ...clientv2.RequestInterceptor) (*GetLoginMethod, error) {
	vars := map[string]any{
		"email": email,
	}

	var res GetLoginMethod
	if err := c.Client.Post(ctx, "GetLoginMethod", GetLoginMethodDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const ListTokensDocument = `query ListTokens {
	tokens(first: 3) {
		edges {
			node {
				token
			}
		}
	}
}
`

func (c *Client) ListTokens(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*ListTokens, error) {
	vars := map[string]any{}

	var res ListTokens
	if err := c.Client.Post(ctx, "ListTokens", ListTokensDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const ListKeysDocument = `query ListKeys ($emails: [String]) {
	publicKeys(emails: $emails, first: 1000) {
		edges {
			node {
				... PublicKeyFragment
			}
		}
	}
}
fragment PublicKeyFragment on PublicKey {
	id
	content
	user {
		... UserFragment
	}
}
fragment UserFragment on User {
	id
	name
	email
}
`

func (c *Client) ListKeys(ctx context.Context, emails []*string, interceptors ...clientv2.RequestInterceptor) (*ListKeys, error) {
	vars := map[string]any{
		"emails": emails,
	}

	var res ListKeys
	if err := c.Client.Post(ctx, "ListKeys", ListKeysDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetEabCredentialDocument = `query GetEabCredential ($cluster: String!, $provider: Provider!) {
	eabCredential(cluster: $cluster, provider: $provider) {
		... EabCredentialFragment
	}
}
fragment EabCredentialFragment on EabCredential {
	id
	keyId
	hmacKey
	cluster
	provider
}
`

func (c *Client) GetEabCredential(ctx context.Context, cluster string, provider Provider, interceptors ...clientv2.RequestInterceptor) (*GetEabCredential, error) {
	vars := map[string]any{
		"cluster":  cluster,
		"provider": provider,
	}

	var res GetEabCredential
	if err := c.Client.Post(ctx, "GetEabCredential", GetEabCredentialDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const PollLoginTokenDocument = `mutation PollLoginToken ($token: String!) {
	loginToken(token: $token) {
		jwt
	}
}
`

func (c *Client) PollLoginToken(ctx context.Context, token string, interceptors ...clientv2.RequestInterceptor) (*PollLoginToken, error) {
	vars := map[string]any{
		"token": token,
	}

	var res PollLoginToken
	if err := c.Client.Post(ctx, "PollLoginToken", PollLoginTokenDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DevLoginDocument = `mutation DevLogin {
	deviceLogin {
		loginUrl
		deviceToken
	}
}
`

func (c *Client) DevLogin(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*DevLogin, error) {
	vars := map[string]any{}

	var res DevLogin
	if err := c.Client.Post(ctx, "DevLogin", DevLoginDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const LoginDocument = `mutation Login ($email: String!, $pwd: String!) {
	login(email: $email, password: $pwd) {
		jwt
	}
}
`

func (c *Client) Login(ctx context.Context, email string, pwd string, interceptors ...clientv2.RequestInterceptor) (*Login, error) {
	vars := map[string]any{
		"email": email,
		"pwd":   pwd,
	}

	var res Login
	if err := c.Client.Post(ctx, "Login", LoginDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const ImpersonateServiceAccountDocument = `mutation ImpersonateServiceAccount ($email: String) {
	impersonateServiceAccount(email: $email) {
		jwt
		email
	}
}
`

func (c *Client) ImpersonateServiceAccount(ctx context.Context, email *string, interceptors ...clientv2.RequestInterceptor) (*ImpersonateServiceAccount, error) {
	vars := map[string]any{
		"email": email,
	}

	var res ImpersonateServiceAccount
	if err := c.Client.Post(ctx, "ImpersonateServiceAccount", ImpersonateServiceAccountDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateAccessTokenDocument = `mutation CreateAccessToken {
	createToken {
		token
	}
}
`

func (c *Client) CreateAccessToken(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*CreateAccessToken, error) {
	vars := map[string]any{}

	var res CreateAccessToken
	if err := c.Client.Post(ctx, "CreateAccessToken", CreateAccessTokenDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateKeyDocument = `mutation CreateKey ($key: String!, $name: String!) {
	createPublicKey(attributes: {content:$key,name:$name}) {
		id
	}
}
`

func (c *Client) CreateKey(ctx context.Context, key string, name string, interceptors ...clientv2.RequestInterceptor) (*CreateKey, error) {
	vars := map[string]any{
		"key":  key,
		"name": name,
	}

	var res CreateKey
	if err := c.Client.Post(ctx, "CreateKey", CreateKeyDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteEabCredentialDocument = `mutation DeleteEabCredential ($cluster: String!, $provider: Provider!) {
	deleteEabKey(cluster: $cluster, provider: $provider) {
		id
	}
}
`

func (c *Client) DeleteEabCredential(ctx context.Context, cluster string, provider Provider, interceptors ...clientv2.RequestInterceptor) (*DeleteEabCredential, error) {
	vars := map[string]any{
		"cluster":  cluster,
		"provider": provider,
	}

	var res DeleteEabCredential
	if err := c.Client.Post(ctx, "DeleteEabCredential", DeleteEabCredentialDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateEventDocument = `mutation CreateEvent ($attrs: UserEventAttributes!) {
	createUserEvent(attributes: $attrs)
}
`

func (c *Client) CreateEvent(ctx context.Context, attrs UserEventAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateEvent, error) {
	vars := map[string]any{
		"attrs": attrs,
	}

	var res CreateEvent
	if err := c.Client.Post(ctx, "CreateEvent", CreateEventDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBackupDocument = `mutation CreateBackup ($attrs: KeyBackupAttributes!) {
	createKeyBackup(attributes: $attrs) {
		... KeyBackupFragment
	}
}
fragment KeyBackupFragment on KeyBackup {
	id
	name
	digest
	repositories
	insertedAt
}
`

func (c *Client) CreateBackup(ctx context.Context, attrs KeyBackupAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateBackup, error) {
	vars := map[string]any{
		"attrs": attrs,
	}

	var res CreateBackup
	if err := c.Client.Post(ctx, "CreateBackup", CreateBackupDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const BackupsDocument = `query Backups ($cursor: String) {
	keyBackups(first: 50, after: $cursor) {
		edges {
			node {
				... KeyBackupFragment
			}
		}
	}
}
fragment KeyBackupFragment on KeyBackup {
	id
	name
	digest
	repositories
	insertedAt
}
`

func (c *Client) Backups(ctx context.Context, cursor *string, interceptors ...clientv2.RequestInterceptor) (*Backups, error) {
	vars := map[string]any{
		"cursor": cursor,
	}

	var res Backups
	if err := c.Client.Post(ctx, "Backups", BackupsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const BackupDocument = `query Backup ($name: String!) {
	keyBackup(name: $name) {
		... KeyBackupFragment
		value
	}
}
fragment KeyBackupFragment on KeyBackup {
	id
	name
	digest
	repositories
	insertedAt
}
`

func (c *Client) Backup(ctx context.Context, name string, interceptors ...clientv2.RequestInterceptor) (*Backup, error) {
	vars := map[string]any{
		"name": name,
	}

	var res Backup
	if err := c.Client.Post(ctx, "Backup", BackupDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetHelpDocument = `query GetHelp ($prompt: String!) {
	helpQuestion(prompt: $prompt)
}
`

func (c *Client) GetHelp(ctx context.Context, prompt string, interceptors ...clientv2.RequestInterceptor) (*GetHelp, error) {
	vars := map[string]any{
		"prompt": prompt,
	}

	var res GetHelp
	if err := c.Client.Post(ctx, "GetHelp", GetHelpDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const ChatDocument = `query Chat ($history: [ChatMessageAttributes]) {
	chat(history: $history) {
		... ChatMessageFragment
	}
}
fragment ChatMessageFragment on ChatMessage {
	role
	content
	name
}
`

func (c *Client) Chat(ctx context.Context, history []*ChatMessageAttributes, interceptors ...clientv2.RequestInterceptor) (*Chat, error) {
	vars := map[string]any{
		"history": history,
	}

	var res Chat
	if err := c.Client.Post(ctx, "Chat", ChatDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateTrustDocument = `mutation CreateTrust ($attributes: TrustRelationshipAttributes!) {
	createTrustRelationship(attributes: $attributes) {
		... OidcTrustRelationshipFragment
	}
}
fragment OidcTrustRelationshipFragment on OidcTrustRelationship {
	id
	issuer
	trust
	scopes
	insertedAt
}
`

func (c *Client) CreateTrust(ctx context.Context, attributes TrustRelationshipAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateTrust, error) {
	vars := map[string]any{
		"attributes": attributes,
	}

	var res CreateTrust
	if err := c.Client.Post(ctx, "CreateTrust", CreateTrustDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteTrustDocument = `mutation DeleteTrust ($id: ID!) {
	deleteTrustRelationship(id: $id) {
		id
	}
}
`

func (c *Client) DeleteTrust(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteTrust, error) {
	vars := map[string]any{
		"id": id,
	}

	var res DeleteTrust
	if err := c.Client.Post(ctx, "DeleteTrust", DeleteTrustDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const OidcTokenDocument = `query OidcToken ($provider: ExternalOidcProvider!, $token: String!, $email: String!) {
	oidcToken(provider: $provider, idToken: $token, email: $email)
}
`

func (c *Client) OidcToken(ctx context.Context, provider ExternalOidcProvider, token string, email string, interceptors ...clientv2.RequestInterceptor) (*OidcToken, error) {
	vars := map[string]any{
		"provider": provider,
		"token":    token,
		"email":    email,
	}

	var res OidcToken
	if err := c.Client.Post(ctx, "OidcToken", OidcTokenDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateVersionDocument = `mutation UpdateVersion ($spec: VersionSpec, $attributes: VersionAttributes!) {
	updateVersion(spec: $spec, attributes: $attributes) {
		id
	}
}
`

func (c *Client) UpdateVersion(ctx context.Context, spec *VersionSpec, attributes VersionAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdateVersion, error) {
	vars := map[string]any{
		"spec":       spec,
		"attributes": attributes,
	}

	var res UpdateVersion
	if err := c.Client.Post(ctx, "UpdateVersion", UpdateVersionDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

var DocumentOperationNames = map[string]string{
	ListArtifactsDocument:             "ListArtifacts",
	CreateArtifactDocument:            "CreateArtifact",
	GetChartsDocument:                 "GetCharts",
	GetVersionsDocument:               "GetVersions",
	GetChartInstallationsDocument:     "GetChartInstallations",
	GetPackageInstallationsDocument:   "GetPackageInstallations",
	CreateCrdDocument:                 "CreateCrd",
	UninstallChartDocument:            "UninstallChart",
	GetConsoleInstancesDocument:       "GetConsoleInstances",
	UpdateConsoleInstanceDocument:     "UpdateConsoleInstance",
	DestroyClusterDocument:            "DestroyCluster",
	ClustersDocument:                  "Clusters",
	ClusterInfoDocument:               "ClusterInfo",
	CreateDependencyDocument:          "CreateDependency",
	PromoteClusterDocument:            "PromoteCluster",
	TransferOwnershipDocument:         "TransferOwnership",
	GetDNSRecordsDocument:             "GetDnsRecords",
	CreateDNSRecordDocument:           "CreateDnsRecord",
	DeleteDNSRecordDocument:           "DeleteDnsRecord",
	CreateDomainDocument:              "CreateDomain",
	GetInstallationDocument:           "GetInstallation",
	GetInstallationByIDDocument:       "GetInstallationById",
	GetInstallationsDocument:          "GetInstallations",
	UpsertOidcProviderDocument:        "UpsertOidcProvider",
	ResetInstallationsDocument:        "ResetInstallations",
	CreateInstallationDocument:        "CreateInstallation",
	DeleteInstallationDocument:        "DeleteInstallation",
	MarkSyncedDocument:                "MarkSynced",
	GetRecipeDocument:                 "GetRecipe",
	GetRecipeByIDDocument:             "GetRecipeByID",
	ListRecipesDocument:               "ListRecipes",
	ListAllRecipesDocument:            "ListAllRecipes",
	CreateRecipeDocument:              "CreateRecipe",
	InstallRecipeDocument:             "InstallRecipe",
	CreateStackDocument:               "CreateStack",
	GetStackDocument:                  "GetStack",
	ListStacksDocument:                "ListStacks",
	GetRepositoryDocument:             "GetRepository",
	CreateResourceDefinitionDocument:  "CreateResourceDefinition",
	CreateIntegrationDocument:         "CreateIntegration",
	UpdateRepositoryDocument:          "UpdateRepository",
	CreateRepositoryDocument:          "CreateRepository",
	AcquireLockDocument:               "AcquireLock",
	ReleaseLockDocument:               "ReleaseLock",
	UnlockRepositoryDocument:          "UnlockRepository",
	ListRepositoriesDocument:          "ListRepositories",
	ScaffoldsDocument:                 "Scaffolds",
	DeleteRepositoryDocument:          "DeleteRepository",
	ReleaseDocument:                   "Release",
	InstallVersionDocument:            "InstallVersion",
	GetTfProvidersDocument:            "GetTfProviders",
	GetTfProviderScaffoldDocument:     "GetTfProviderScaffold",
	GetShellDocument:                  "GetShell",
	DeleteShellDocument:               "DeleteShell",
	GetTerraformDocument:              "GetTerraform",
	GetTerraformVersionsDocument:      "GetTerraformVersions",
	GetTerraformInstallationsDocument: "GetTerraformInstallations",
	UploadTerraformDocument:           "UploadTerraform",
	UninstallTerraformDocument:        "UninstallTerraform",
	CreateTestDocument:                "CreateTest",
	UpdateTestDocument:                "UpdateTest",
	UpdateStepDocument:                "UpdateStep",
	PublishLogsDocument:               "PublishLogs",
	CreateUpgradeDocument:             "CreateUpgrade",
	MeDocument:                        "Me",
	GetLoginMethodDocument:            "GetLoginMethod",
	ListTokensDocument:                "ListTokens",
	ListKeysDocument:                  "ListKeys",
	GetEabCredentialDocument:          "GetEabCredential",
	PollLoginTokenDocument:            "PollLoginToken",
	DevLoginDocument:                  "DevLogin",
	LoginDocument:                     "Login",
	ImpersonateServiceAccountDocument: "ImpersonateServiceAccount",
	CreateAccessTokenDocument:         "CreateAccessToken",
	CreateKeyDocument:                 "CreateKey",
	DeleteEabCredentialDocument:       "DeleteEabCredential",
	CreateEventDocument:               "CreateEvent",
	CreateBackupDocument:              "CreateBackup",
	BackupsDocument:                   "Backups",
	BackupDocument:                    "Backup",
	GetHelpDocument:                   "GetHelp",
	ChatDocument:                      "Chat",
	CreateTrustDocument:               "CreateTrust",
	DeleteTrustDocument:               "DeleteTrust",
	OidcTokenDocument:                 "OidcToken",
	UpdateVersionDocument:             "UpdateVersion",
}
